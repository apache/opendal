# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Bindings NodeJS CI

env:
  DEBUG: napi:*
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  # refer to https://github.com/nodejs/corepack/issues/612#issuecomment-2631462297
  #
  # SHOULD remove after nodejs been upgraded.
  COREPACK_INTEGRITY_KEYS: 0

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main
    paths:
      - "bindings/nodejs/**"
      - "core/**"
      - ".github/workflows/ci_bindings_nodejs.yml"
  workflow_dispatch:
    inputs:
      nodejs-publish-dry-run:
        description: "Trigger nodejs publish dry run"
        required: true
        type: boolean
        default: false
      nodejs-publish:
        description: "Trigger nodejs publish"
        required: true
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest

    # Notes: this defaults only apply on run tasks.
    defaults:
      run:
        working-directory: "bindings/nodejs"

    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup

      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
          cache-dependency-path: "bindings/nodejs/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check format
        run: pnpm exec prettier --check .

      - name: Build
        run: pnpm build

      - name: Check diff
        run: git diff --exit-code

      - name: Test
        run: cargo test --no-fail-fast

      - name: Check Clippy
        run: cargo clippy -- -D warnings

  build:
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    if: (github.event_name == 'workflow_dispatch' && (inputs.nodejs-publish || inputs.nodejs-publish-dry-run)) || startsWith(github.ref, 'refs/tags/')
    # Notes: this defaults only apply on run tasks.
    defaults:
      run:
        working-directory: "bindings/nodejs"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: linux
            host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            features: services-all
            build: pnpm build:ci --use-napi-cross && pnpm build:header
          - os: linux
            host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            features: services-all
            build: pnpm build:ci -x && pnpm build:header
          - os: linux
            host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            features: services-all
            build: TARGET_CC=clang pnpm build:ci --use-napi-cross && pnpm build:header
          - os: linux
            host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            features: services-all
            build: pnpm build:ci -x && pnpm build:header
          - os: windows
            host: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build
          - os: windows
            host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build
          - os: macos
            host: macos-latest
            target: x86_64-apple-darwin
            features: services-all
            build: pnpm build
          - os: macos
            host: macos-latest
            target: aarch64-apple-darwin
            features: services-all
            build: pnpm build
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
          cache-dependency-path: "bindings/nodejs/pnpm-lock.yaml"
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.0
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Set Build ENV
        shell: bash
        run: |
          if [[ -n "${{ matrix.settings.features }}" ]]; then
            echo "NAPI_FEATURES=${{ matrix.settings.features }}" >> "${GITHUB_ENV}"
          fi
          echo "NAPI_TARGET=${{ matrix.settings.target }}" >> "${GITHUB_ENV}"
      - name: Build
        shell: bash
        run: ${{ matrix.settings.build }}
      - uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.os }}-${{ matrix.settings.target }}
          path: bindings/nodejs/*.node

  release:
    name: Release
    runs-on: ubuntu-latest
    if: (github.event_name == 'workflow_dispatch' && (inputs.nodejs-publish || inputs.nodejs-publish-dry-run)) || startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    permissions:
      id-token: write
      contents: write

    # Notes: this defaults only apply on run tasks.
    defaults:
      run:
        working-directory: "bindings/nodejs"

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
          cache-dependency-path: "bindings/nodejs/pnpm-lock.yaml"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bindings/nodejs/artifacts
      - name: Move artifacts
        run: pnpm exec napi artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Add LICENSE & NOTICE
        # Set working directory to root to copy LICENSE & NOTICE
        working-directory: .
        run: cp LICENSE NOTICE ./bindings/nodejs

      - name: Publish Dry Run
        if: (github.event_name == 'workflow_dispatch' && inputs.nodejs-publish-dry-run) || (startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-'))
        # Since this command will not exit with non-zero code when file missing,
        # we need to check the output manually.
        run: |
          npm publish --access public --provenance --dry-run

      - name: Publish
        if: (github.event_name == 'workflow_dispatch' && inputs.nodejs-publish) || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-'))
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public --provenance
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
