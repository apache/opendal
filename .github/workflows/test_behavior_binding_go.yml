# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Behavior Test Binding Go

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      cases:
        required: true
        type: string

jobs:
  set-build:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.set-matrix-build.outputs.build }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix-build
        name: Setup Matrix Build
        run: |
          MATRIX=$(yq -o=json -I=0 '[.build[] | select(.os == "${{ inputs.os }}")]' .github/scripts/test_go_binding/matrix.yaml | sed 's/ //g')
          echo "Matrix:"
          echo "$MATRIX" | jq .
          echo "build=$MATRIX" >> $GITHUB_OUTPUT

  test:
    needs: [set-build]
    name: ${{ matrix.cases.service }} / ${{ matrix.cases.setup }}
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      matrix:
        cases: ${{ fromJson(inputs.cases) }}
        build: ${{ fromJson(needs.set-build.outputs.build) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: "apache/opendal-go-services"
          path: "tools"
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup
        with:
          need-nextest: true
          need-protoc: true
          need-rocksdb: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # TODO: 1password is only supported on linux
      #
      # Waiting for https://github.com/1Password/load-secrets-action/issues/46
      - name: Setup 1Password Connect
        if: runner.os == 'Linux'
        uses: 1password/load-secrets-action/configure@v1
        with:
          connect-host: ${{ secrets.OP_CONNECT_HOST }}
          connect-token: ${{ secrets.OP_CONNECT_TOKEN }}
      - name: Setup Target (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          TARGET: ${{ matrix.build.target }}
        run: rustup target add $TARGET
      - name: Setup Target (Windows)
        if: runner.os == 'Windows'
        env:
          TARGET: ${{ matrix.build.target }}
        run: |
          rustup target add $env:TARGET
      - uses: actions/setup-go@v5
        with:
          go-version: stable
          cache-dependency-path: |
            bindings/go/go.sum
            bindings/go/tests/behavior_tests/go.sum
      - name: Install dependencies (Linux)
        if: ${{ matrix.build.os == 'ubuntu-latest' }}
        run: sudo apt install zstd
      - name: Install dependencies (macOS)
        if: ${{ matrix.build.os == 'macos-latest' }}
        run: brew install zstd libffi
      - name: Install dependencies (Windows)
        if: ${{ matrix.build.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build C Binding (Linux/macOS)
        working-directory: bindings/c
        if: runner.os != 'Windows'
        env:
          VERSION: "latest"
          SERVICE: ${{ matrix.cases.service }}
          TARGET: ${{ matrix.build.target }}
          CC: ${{ matrix.build.cc }}
          OS: ${{ matrix.build.os }}
        run: |
          SERVICE_DASH="${SERVICE//_/-}"
          cargo build --target $TARGET --release  --features "opendal/services-${SERVICE_DASH}"
          DIR=$GITHUB_WORKSPACE/libopendal_c_${VERSION}_${SERVICE}_$TARGET
          mkdir $DIR
          if [ ${OS} == 'ubuntu-latest' ]; then
            SO=so
          else
            SO=dylib
          fi
          zstd -19 ./target/${TARGET}/release/libopendal_c.${SO} -o $DIR/libopendal_c.${TARGET}.$SO.zst
      - name: Build C Binding (Windows)
        working-directory: bindings/c
        if: runner.os == 'Windows'
        env:
          VERSION: "latest"
          SERVICE: ${{ matrix.cases.service }}
          TARGET: ${{ matrix.build.target }}
          CC: ${{ matrix.build.cc }}
        run: |
          $service_dash = ${env:SERVICE} -replace '_', '-'
          cargo build --target $env:TARGET --release  --features "opendal/services-$service_dash"
          $DIR="$env:GITHUB_WORKSPACE\libopendal_c_${env:VERSION}_${env:SERVICE}_${env:TARGET}"
          Rename-Item -Path "./target/$env:TARGET/release/opendal_c.dll" -NewName "libopendal_c.dll"
          New-Item -ItemType Directory -Force -Path $DIR
          zstd -19 "./target/${env:TARGET}/release/libopendal_c.dll" -o "$DIR/libopendal_c.${env:TARGET}.dll.zst"
      - name: Build Go Artifact
        working-directory: tools/internal/generate
        env:
          MATRIX: '{"build": [${{ toJson(matrix.build) }}], "service": ["${{ matrix.cases.service }}"]}'
          VERSION: "latest"
        run: |
          go run generate.go
      - name: Setup Go Workspace (Linux/macOS)
        env:
          SERVICE: ${{ matrix.cases.service }}
        working-directory: bindings/go/tests
        if: runner.os != 'Windows'
        run: |
          go work init
          go work use ..
          go work use ./behavior_tests
          go work use $GITHUB_WORKSPACE/$(echo $SERVICE | sed 's/-/_/g')
      - name: Setup Go Workspace (Windows)
        env:
          SERVICE: ${{ matrix.cases.service }}
        working-directory: bindings/go/tests
        if: runner.os == 'Windows'
        run: |
          go work init
          go work use ..
          go work use ./behavior_tests
          go work use $env:GITHUB_WORKSPACE/$($env:SERVICE -replace '-','_')
      - name: Generate Test Scheme
        env:
          SERVICE: ${{ matrix.cases.service }}
        run: |
          python ./.github/scripts/test_go_binding/generate_test_scheme.py
      - name: Setup Go Module (Linux/macOS)
        env:
          SERVICE: ${{ matrix.cases.service }}
        working-directory: bindings/go/tests/behavior_tests
        if: runner.os != 'Windows'
        run: |
          go mod edit -replace=github.com/apache/opendal-go-services/${SERVICE}=$GITHUB_WORKSPACE/$SERVICE
          go mod tidy
      - name: Setup Go Module (Windows)
        env:
          SERVICE: ${{ matrix.cases.service }}
        working-directory: bindings/go/tests/behavior_tests
        if: runner.os == 'Windows'
        run: |
          go mod edit -replace=github.com/apache/opendal-go-services/$env:SERVICE=$env:GITHUB_WORKSPACE/$env:SERVICE
          go mod tidy
      - name: Test Core
        uses: ./.github/actions/test_behavior_binding_go
        with:
          setup: ${{ matrix.cases.setup }}
          service: ${{ matrix.cases.service }}
          feature: ${{ matrix.cases.feature }}
