"use strict";(self.webpackChunkopendal_website=self.webpackChunkopendal_website||[]).push([[9722],{383:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(6672),o=t(3420);function i({children:e,owner:n="apache",repo:t="opendal",branch:i="main",basePath:s="",components:a={}}){const c=e=>{const r=e.replace(/^\.\//,"");return`https://github.com/${n}/${t}/blob/${i}/${s}${r}`},l={...a,a:e=>{const{href:n,...t}=e;return n&&n.startsWith("./")?(0,o.jsx)("a",{...t,href:c(n)}):(0,o.jsx)("a",{...e})},p:e=>{const{children:n}=e;if("string"==typeof n){const e=/\[(.*?)\]:\s*(\.\/[^\s]+)/g;if(e.test(n)){const t=n.replace(e,(e,n,t)=>`[${n}]: ${c(t)}`);return(0,o.jsx)("p",{children:t})}}return(0,o.jsx)("p",{...e})}};return"string"==typeof e?(e=>{if("string"!=typeof e)return e;let n=e.replace(/\[(.*?)\]\((\.\/[^)]+)\)/g,(e,n,t)=>`[${n}](${c(t)})`);return n=n.replace(/\[(.*?)\]:\s*(\.\/[^\s]+)/g,(e,n,t)=>`[${n}]: ${c(t)}`),n})(e):r.isValidElement(e)?r.cloneElement(e,{components:{...e.props.components||{},...l}}):e}},660:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"integrations/cloud_filter","title":"Cloud Filter","description":"","source":"@site/docs/30-integrations/cloud_filter.mdx","sourceDirName":"30-integrations","slug":"/integrations/cloud_filter","permalink":"/integrations/cloud_filter","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/opendal/tree/main/website/docs/30-integrations/cloud_filter.mdx","tags":[],"version":"current","lastUpdatedBy":"Xuanwo","lastUpdatedAt":1741601725000,"frontMatter":{"title":"Cloud Filter"},"sidebar":"docs","previous":{"title":"Integrations","permalink":"/category/integrations"},"next":{"title":"Dav Server","permalink":"/integrations/dav_server"}}');var o=t(3420),i=t(7251),s=t(383);function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"apache-opendal-cloud-filter-integration",children:"Apache OpenDAL\u2122 Cloud Filter Integration"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/apache/opendal/actions?query=branch%3Amain",children:(0,o.jsx)(n.img,{src:"/img/external/bc0198e84b604118d2689a6877fd1877.svg",alt:"Build Status"})})," ",(0,o.jsx)(n.a,{href:"https://crates.io/crates/cloud_filter_opendal",children:(0,o.jsx)(n.img,{src:"/img/external/339821411e4b1af1a6f5b9137a1246d5.svg",alt:"Latest Version"})})," ",(0,o.jsx)(n.a,{href:"https://crates.io/crates/cloud_filter_opendal",children:(0,o.jsx)(n.img,{src:"/img/external/6659ee5d99aec1b105e40ae42b70fb41.svg",alt:"Crate Downloads"})})," ",(0,o.jsx)(n.a,{href:"https://opendal.apache.org/discord",children:(0,o.jsx)(n.img,{src:"/img/external/6564632a3de5ae36e76129dad4c34d7c.svg",alt:"chat"})})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"cloud_filter_opendal"})," integrates OpenDAL with ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/windows/win32/cfapi/build-a-cloud-file-sync-engine",children:"cloud sync engines"}),". It provides a way to access various cloud storage on Windows."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that ",(0,o.jsx)(n.code,{children:"cloud_filter_opendal"})," is a read-only service, and it is not recommended to use it in production."]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use anyhow::Result;\nuse cloud_filter::root::PopulationType;\nuse cloud_filter::root::SecurityId;\nuse cloud_filter::root::Session;\nuse cloud_filter::root::SyncRootIdBuilder;\nuse cloud_filter::root::SyncRootInfo;\nuse opendal::services;\nuse opendal::Operator;\nuse tokio::runtime::Handle;\nuse tokio::signal;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Create any service desired\n    let op = Operator::from_iter::<services::S3>([\n        ("bucket".to_string(), "my_bucket".to_string()),\n        ("access_key".to_string(), "my_access_key".to_string()),\n        ("secret_key".to_string(), "my_secret_key".to_string()),\n        ("endpoint".to_string(), "my_endpoint".to_string()),\n        ("region".to_string(), "my_region".to_string()),\n    ])?\n    .finish();\n\n    let client_path = std::env::var("CLIENT_PATH").expect("$CLIENT_PATH is set");\n\n    // Create a sync root id\n    let sync_root_id = SyncRootIdBuilder::new("cloud_filter_opendal")\n        .user_security_id(SecurityId::current_user()?)\n        .build();\n\n    // Register the sync root if not exists\n    if !sync_root_id.is_registered()? {\n        sync_root_id.register(\n            SyncRootInfo::default()\n                .with_display_name("OpenDAL Cloud Filter")\n                .with_population_type(PopulationType::Full)\n                .with_icon("shell32.dll,3")\n                .with_version("1.0.0")\n                .with_recycle_bin_uri("http://cloudmirror.example.com/recyclebin")?\n                .with_path(&client_path)?,\n        )?;\n    }\n\n    let handle = Handle::current();\n    let connection = Session::new().connect_async(\n        &client_path,\n        cloud_filter_opendal::CloudFilter::new(op, client_path.clone().into()),\n        move |f| handle.block_on(f),\n    )?;\n\n    signal::ctrl_c().await?;\n\n    // Drop the connection before unregister the sync root\n    drop(connection);\n    sync_root_id.unregister()?;\n\n    Ok(())\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"branding",children:"Branding"}),"\n",(0,o.jsxs)(n.p,{children:["The first and most prominent mentions must use the full form: ",(0,o.jsx)(n.strong,{children:"Apache OpenDAL\u2122"})," of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization."]}),"\n",(0,o.jsxs)(n.p,{children:["For more details, see the ",(0,o.jsx)(n.a,{href:"https://www.apache.org/foundation/marks/guide",children:"Apache Product Name Usage Guide"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"license-and-trademarks",children:"License and Trademarks"}),"\n",(0,o.jsxs)(n.p,{children:["Licensed under the Apache License, Version 2.0: ",(0,o.jsx)(n.a,{href:"http://www.apache.org/licenses/LICENSE-2.0",children:"http://www.apache.org/licenses/LICENSE-2.0"})]}),"\n",(0,o.jsx)(n.p,{children:"Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}const l={title:"Cloud Filter"},d=void 0,p={},h=[{value:"Example",id:"example",level:2},{value:"Branding",id:"branding",level:2},{value:"License and Trademarks",id:"license-and-trademarks",level:2}];function u(e){return(0,o.jsx)(s.A,{basePath:"integrations/cloud_filter/",children:(0,o.jsx)(c,{components:{h1:"h2"}})})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u()}},7251:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6672);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);