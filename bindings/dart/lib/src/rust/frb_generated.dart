// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/opendal_api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.1';

  @override
  int get rustContentHash => -958887605;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'opendal_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  bool crateApiOpendalApiCapabilityBlocking({required Capability that});

  bool crateApiOpendalApiCapabilityCopy({required Capability that});

  bool crateApiOpendalApiCapabilityCreateDir({required Capability that});

  bool crateApiOpendalApiCapabilityDelete({required Capability that});

  bool crateApiOpendalApiCapabilityList({required Capability that});

  bool crateApiOpendalApiCapabilityListWithLimit({required Capability that});

  bool crateApiOpendalApiCapabilityListWithRecursive(
      {required Capability that});

  bool crateApiOpendalApiCapabilityListWithStartAfter(
      {required Capability that});

  bool crateApiOpendalApiCapabilityPresign({required Capability that});

  bool crateApiOpendalApiCapabilityPresignRead({required Capability that});

  bool crateApiOpendalApiCapabilityPresignStat({required Capability that});

  bool crateApiOpendalApiCapabilityPresignWrite({required Capability that});

  bool crateApiOpendalApiCapabilityRead({required Capability that});

  bool crateApiOpendalApiCapabilityReadWithIfMatch({required Capability that});

  bool crateApiOpendalApiCapabilityReadWithIfNoneMatch(
      {required Capability that});

  bool crateApiOpendalApiCapabilityReadWithOverrideCacheControl(
      {required Capability that});

  bool crateApiOpendalApiCapabilityReadWithOverrideContentDisposition(
      {required Capability that});

  bool crateApiOpendalApiCapabilityReadWithOverrideContentType(
      {required Capability that});

  bool crateApiOpendalApiCapabilityRename({required Capability that});

  bool crateApiOpendalApiCapabilityShared({required Capability that});

  bool crateApiOpendalApiCapabilityStat({required Capability that});

  bool crateApiOpendalApiCapabilityStatWithIfMatch({required Capability that});

  bool crateApiOpendalApiCapabilityStatWithIfNoneMatch(
      {required Capability that});

  bool crateApiOpendalApiCapabilityWrite({required Capability that});

  bool crateApiOpendalApiCapabilityWriteCanAppend({required Capability that});

  bool crateApiOpendalApiCapabilityWriteCanEmpty({required Capability that});

  bool crateApiOpendalApiCapabilityWriteCanMulti({required Capability that});

  BigInt? crateApiOpendalApiCapabilityWriteMultiMaxSize(
      {required Capability that});

  BigInt? crateApiOpendalApiCapabilityWriteMultiMinSize(
      {required Capability that});

  BigInt? crateApiOpendalApiCapabilityWriteTotalMaxSize(
      {required Capability that});

  bool crateApiOpendalApiCapabilityWriteWithCacheControl(
      {required Capability that});

  bool crateApiOpendalApiCapabilityWriteWithContentDisposition(
      {required Capability that});

  bool crateApiOpendalApiCapabilityWriteWithContentType(
      {required Capability that});

  String? crateApiOpendalApiMetadataContentDisposition(
      {required Metadata that});

  BigInt? crateApiOpendalApiMetadataContentLength({required Metadata that});

  String? crateApiOpendalApiMetadataContentMd5({required Metadata that});

  String? crateApiOpendalApiMetadataContentType({required Metadata that});

  String? crateApiOpendalApiMetadataEtag({required Metadata that});

  bool crateApiOpendalApiMetadataIsDirectory({required Metadata that});

  bool crateApiOpendalApiMetadataIsFile({required Metadata that});

  String? crateApiOpendalApiMetadataLastModified({required Metadata that});

  Capability crateApiOpendalApiOperatorCapability({required Operator that});

  Future<void> crateApiOpendalApiOperatorCheck({required Operator that});

  Future<void> crateApiOpendalApiOperatorCreateDir(
      {required Operator that, required String path});

  void crateApiOpendalApiOperatorCreateDirSync(
      {required Operator that, required String path});

  Future<bool> crateApiOpendalApiOperatorIsExist(
      {required Operator that, required String path});

  bool crateApiOpendalApiOperatorIsExistSync(
      {required Operator that, required String path});

  Operator crateApiOpendalApiOperatorNew(
      {required String schemeStr, required Map<String, String> map});

  Future<Metadata> crateApiOpendalApiOperatorStat(
      {required Operator that, required String path});

  Metadata crateApiOpendalApiOperatorStatSync(
      {required Operator that, required String path});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Capability;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Capability;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CapabilityPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Metadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Metadata;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MetadataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Operator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Operator;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OperatorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  bool crateApiOpendalApiCapabilityBlocking({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityBlockingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityBlockingConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_blocking",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityCopy({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityCopyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityCopyConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_copy",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityCreateDir({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityCreateDirConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityCreateDirConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_create_dir",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityDelete({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityDeleteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_delete",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityList({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityListConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityListConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_list",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityListWithLimit({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityListWithLimitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityListWithLimitConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_list_with_limit",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityListWithRecursive(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityListWithRecursiveConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityListWithRecursiveConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_list_with_recursive",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityListWithStartAfter(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityListWithStartAfterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityListWithStartAfterConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_list_with_start_after",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityPresign({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityPresignConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityPresignConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_presign",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityPresignRead({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityPresignReadConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityPresignReadConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_presign_read",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityPresignStat({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityPresignStatConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityPresignStatConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_presign_stat",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityPresignWrite({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityPresignWriteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityPresignWriteConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_presign_write",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityRead({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityReadConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityReadConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_read",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityReadWithIfMatch({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityReadWithIfMatchConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityReadWithIfMatchConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_read_with_if_match",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityReadWithIfNoneMatch(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityReadWithIfNoneMatchConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityReadWithIfNoneMatchConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_read_with_if_none_match",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityReadWithOverrideCacheControl(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOpendalApiCapabilityReadWithOverrideCacheControlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityReadWithOverrideCacheControlConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_read_with_override_cache_control",
            argNames: ["that"],
          );

  @override
  bool crateApiOpendalApiCapabilityReadWithOverrideContentDisposition(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOpendalApiCapabilityReadWithOverrideContentDispositionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityReadWithOverrideContentDispositionConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_read_with_override_content_disposition",
            argNames: ["that"],
          );

  @override
  bool crateApiOpendalApiCapabilityReadWithOverrideContentType(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOpendalApiCapabilityReadWithOverrideContentTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityReadWithOverrideContentTypeConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_read_with_override_content_type",
            argNames: ["that"],
          );

  @override
  bool crateApiOpendalApiCapabilityRename({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityRenameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityRenameConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_rename",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityShared({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilitySharedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilitySharedConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_shared",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityStat({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityStatConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityStatConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_stat",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityStatWithIfMatch({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityStatWithIfMatchConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityStatWithIfMatchConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_stat_with_if_match",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityStatWithIfNoneMatch(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityStatWithIfNoneMatchConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityStatWithIfNoneMatchConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_stat_with_if_none_match",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityWrite({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityWriteCanAppend({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteCanAppendConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteCanAppendConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_can_append",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityWriteCanEmpty({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteCanEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteCanEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_can_empty",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityWriteCanMulti({required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteCanMultiConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteCanMultiConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_can_multi",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiOpendalApiCapabilityWriteMultiMaxSize(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteMultiMaxSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteMultiMaxSizeConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_multi_max_size",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiOpendalApiCapabilityWriteMultiMinSize(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteMultiMinSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteMultiMinSizeConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_multi_min_size",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiOpendalApiCapabilityWriteTotalMaxSize(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteTotalMaxSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiCapabilityWriteTotalMaxSizeConstMeta =>
      const TaskConstMeta(
        debugName: "Capability_write_total_max_size",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiCapabilityWriteWithCacheControl(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteWithCacheControlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityWriteWithCacheControlConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_write_with_cache_control",
            argNames: ["that"],
          );

  @override
  bool crateApiOpendalApiCapabilityWriteWithContentDisposition(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOpendalApiCapabilityWriteWithContentDispositionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityWriteWithContentDispositionConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_write_with_content_disposition",
            argNames: ["that"],
          );

  @override
  bool crateApiOpendalApiCapabilityWriteWithContentType(
      {required Capability that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiCapabilityWriteWithContentTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOpendalApiCapabilityWriteWithContentTypeConstMeta =>
          const TaskConstMeta(
            debugName: "Capability_write_with_content_type",
            argNames: ["that"],
          );

  @override
  String? crateApiOpendalApiMetadataContentDisposition(
      {required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataContentDispositionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataContentDispositionConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_content_disposition",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiOpendalApiMetadataContentLength({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataContentLengthConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataContentLengthConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_content_length",
        argNames: ["that"],
      );

  @override
  String? crateApiOpendalApiMetadataContentMd5({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataContentMd5ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataContentMd5ConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_content_md5",
        argNames: ["that"],
      );

  @override
  String? crateApiOpendalApiMetadataContentType({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataContentTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataContentTypeConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_content_type",
        argNames: ["that"],
      );

  @override
  String? crateApiOpendalApiMetadataEtag({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataEtagConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataEtagConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_etag",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiMetadataIsDirectory({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataIsDirectoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataIsDirectoryConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_is_directory",
        argNames: ["that"],
      );

  @override
  bool crateApiOpendalApiMetadataIsFile({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataIsFileConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataIsFileConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_is_file",
        argNames: ["that"],
      );

  @override
  String? crateApiOpendalApiMetadataLastModified({required Metadata that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiMetadataLastModifiedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiMetadataLastModifiedConstMeta =>
      const TaskConstMeta(
        debugName: "Metadata_last_modified",
        argNames: ["that"],
      );

  @override
  Capability crateApiOpendalApiOperatorCapability({required Operator that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorCapabilityConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorCapabilityConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_capability",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOpendalApiOperatorCheck({required Operator that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorCheckConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_check",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiOpendalApiOperatorCreateDir(
      {required Operator that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorCreateDirConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorCreateDirConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_create_dir",
        argNames: ["that", "path"],
      );

  @override
  void crateApiOpendalApiOperatorCreateDirSync(
      {required Operator that, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorCreateDirSyncConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorCreateDirSyncConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_create_dir_sync",
        argNames: ["that", "path"],
      );

  @override
  Future<bool> crateApiOpendalApiOperatorIsExist(
      {required Operator that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorIsExistConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorIsExistConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_is_exist",
        argNames: ["that", "path"],
      );

  @override
  bool crateApiOpendalApiOperatorIsExistSync(
      {required Operator that, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorIsExistSyncConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorIsExistSyncConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_is_exist_sync",
        argNames: ["that", "path"],
      );

  @override
  Operator crateApiOpendalApiOperatorNew(
      {required String schemeStr, required Map<String, String> map}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(schemeStr, serializer);
        sse_encode_Map_String_String(map, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorNewConstMeta,
      argValues: [schemeStr, map],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorNewConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_new",
        argNames: ["schemeStr", "map"],
      );

  @override
  Future<Metadata> crateApiOpendalApiOperatorStat(
      {required Operator that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorStatConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorStatConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_stat",
        argNames: ["that", "path"],
      );

  @override
  Metadata crateApiOpendalApiOperatorStatSync(
      {required Operator that, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
            that, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOpendalApiOperatorStatSyncConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOpendalApiOperatorStatSyncConstMeta =>
      const TaskConstMeta(
        debugName: "Operator_stat_sync",
        argNames: ["that", "path"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Capability => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Capability => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Metadata => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Metadata => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Operator => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Operator => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator;

  @protected
  Capability
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Operator
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperatorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Capability
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Operator
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperatorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Capability
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CapabilityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Operator
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperatorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Capability
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Metadata
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Operator
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperatorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Capability
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Metadata
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Operator
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperatorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Capability
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CapabilityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Metadata
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Operator
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperatorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          Capability self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilityImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MetadataImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          Operator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OperatorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          Capability self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilityImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MetadataImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          Operator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OperatorImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCapability(
          Capability self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CapabilityImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
          Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MetadataImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperator(
          Operator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OperatorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class CapabilityImpl extends RustOpaque implements Capability {
  // Not to be used by end users
  CapabilityImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CapabilityImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Capability,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Capability,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CapabilityPtr,
  );

  /// If operator supports blocking.
  bool get blocking =>
      RustLib.instance.api.crateApiOpendalApiCapabilityBlocking(
        that: this,
      );

  /// If operator supports copy.
  bool get copy => RustLib.instance.api.crateApiOpendalApiCapabilityCopy(
        that: this,
      );

  /// If operator supports create dir.
  bool get createDir =>
      RustLib.instance.api.crateApiOpendalApiCapabilityCreateDir(
        that: this,
      );

  /// If operator supports delete.
  bool get delete => RustLib.instance.api.crateApiOpendalApiCapabilityDelete(
        that: this,
      );

  /// If operator supports list.
  bool get list => RustLib.instance.api.crateApiOpendalApiCapabilityList(
        that: this,
      );

  /// If backend supports list with limit.
  bool get listWithLimit =>
      RustLib.instance.api.crateApiOpendalApiCapabilityListWithLimit(
        that: this,
      );

  /// If backend supports list with recursive.
  bool get listWithRecursive =>
      RustLib.instance.api.crateApiOpendalApiCapabilityListWithRecursive(
        that: this,
      );

  /// If backend supports list with start after.
  bool get listWithStartAfter =>
      RustLib.instance.api.crateApiOpendalApiCapabilityListWithStartAfter(
        that: this,
      );

  /// If operator supports presign.
  bool get presign => RustLib.instance.api.crateApiOpendalApiCapabilityPresign(
        that: this,
      );

  /// If operator supports presign read.
  bool get presignRead =>
      RustLib.instance.api.crateApiOpendalApiCapabilityPresignRead(
        that: this,
      );

  /// If operator supports presign stat.
  bool get presignStat =>
      RustLib.instance.api.crateApiOpendalApiCapabilityPresignStat(
        that: this,
      );

  /// If operator supports presign write.
  bool get presignWrite =>
      RustLib.instance.api.crateApiOpendalApiCapabilityPresignWrite(
        that: this,
      );

  /// If operator supports read.
  bool get read => RustLib.instance.api.crateApiOpendalApiCapabilityRead(
        that: this,
      );

  /// If operator supports read with if matched.
  bool get readWithIfMatch =>
      RustLib.instance.api.crateApiOpendalApiCapabilityReadWithIfMatch(
        that: this,
      );

  /// If operator supports read with if not match.
  bool get readWithIfNoneMatch =>
      RustLib.instance.api.crateApiOpendalApiCapabilityReadWithIfNoneMatch(
        that: this,
      );

  /// if operator supports read with override cache control.
  bool get readWithOverrideCacheControl => RustLib.instance.api
          .crateApiOpendalApiCapabilityReadWithOverrideCacheControl(
        that: this,
      );

  /// if operator supports `read` with override content disposition.
  bool get readWithOverrideContentDisposition => RustLib.instance.api
          .crateApiOpendalApiCapabilityReadWithOverrideContentDisposition(
        that: this,
      );

  /// if operator supports read with override content type.
  bool get readWithOverrideContentType => RustLib.instance.api
          .crateApiOpendalApiCapabilityReadWithOverrideContentType(
        that: this,
      );

  /// If operator supports rename.
  bool get rename => RustLib.instance.api.crateApiOpendalApiCapabilityRename(
        that: this,
      );

  /// If operator supports shared.
  bool get shared => RustLib.instance.api.crateApiOpendalApiCapabilityShared(
        that: this,
      );

  /// If operator supports stat.
  bool get stat => RustLib.instance.api.crateApiOpendalApiCapabilityStat(
        that: this,
      );

  /// If operator supports stat with if matched.
  bool get statWithIfMatch =>
      RustLib.instance.api.crateApiOpendalApiCapabilityStatWithIfMatch(
        that: this,
      );

  /// If operator supports stat with if not match.
  bool get statWithIfNoneMatch =>
      RustLib.instance.api.crateApiOpendalApiCapabilityStatWithIfNoneMatch(
        that: this,
      );

  /// If operator supports write.
  bool get write => RustLib.instance.api.crateApiOpendalApiCapabilityWrite(
        that: this,
      );

  /// If operator supports write by append.
  bool get writeCanAppend =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteCanAppend(
        that: this,
      );

  /// If operator supports write with empty content.
  bool get writeCanEmpty =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteCanEmpty(
        that: this,
      );

  /// If operator supports write can be called in multi times.
  bool get writeCanMulti =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteCanMulti(
        that: this,
      );

  /// write_multi_max_size is the max size that services support in write_multi.
  ///
  /// For example, AWS S3 supports 5GiB as max in write_multi.
  BigInt? get writeMultiMaxSize =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteMultiMaxSize(
        that: this,
      );

  /// write_multi_min_size is the min size that services support in write_multi.
  ///
  /// For example, AWS S3 requires at least 5MiB in write_multi expect the last one.
  BigInt? get writeMultiMinSize =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteMultiMinSize(
        that: this,
      );

  /// write_total_max_size is the max size that services support in write_total.
  ///
  /// For example, Cloudflare D1 supports 1MB as max in write_total.
  BigInt? get writeTotalMaxSize =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteTotalMaxSize(
        that: this,
      );

  /// If operator supports write with cache control.
  bool get writeWithCacheControl =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteWithCacheControl(
        that: this,
      );

  /// If operator supports write with content disposition.
  bool get writeWithContentDisposition => RustLib.instance.api
          .crateApiOpendalApiCapabilityWriteWithContentDisposition(
        that: this,
      );

  /// If operator supports write with content type.
  bool get writeWithContentType =>
      RustLib.instance.api.crateApiOpendalApiCapabilityWriteWithContentType(
        that: this,
      );
}

@sealed
class MetadataImpl extends RustOpaque implements Metadata {
  // Not to be used by end users
  MetadataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MetadataImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Metadata,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Metadata,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MetadataPtr,
  );

  /// Content-Disposition of this object
  String? get contentDisposition =>
      RustLib.instance.api.crateApiOpendalApiMetadataContentDisposition(
        that: this,
      );

  /// Content Length of this object
  BigInt? get contentLength =>
      RustLib.instance.api.crateApiOpendalApiMetadataContentLength(
        that: this,
      );

  /// Content MD5 of this object.
  String? get contentMd5 =>
      RustLib.instance.api.crateApiOpendalApiMetadataContentMd5(
        that: this,
      );

  /// Content Type of this object.
  String? get contentType =>
      RustLib.instance.api.crateApiOpendalApiMetadataContentType(
        that: this,
      );

  /// ETag of this object.
  String? get etag => RustLib.instance.api.crateApiOpendalApiMetadataEtag(
        that: this,
      );

  /// Returns true if the <op.stat> object describes a file system directory.
  bool get isDirectory =>
      RustLib.instance.api.crateApiOpendalApiMetadataIsDirectory(
        that: this,
      );

  /// Returns true if the <op.stat> object describes a regular file.
  bool get isFile => RustLib.instance.api.crateApiOpendalApiMetadataIsFile(
        that: this,
      );

  /// Last Modified of this object.
  ///
  /// We will output this time in RFC3339 format like `1996-12-19T16:39:57+08:00`.
  String? get lastModified =>
      RustLib.instance.api.crateApiOpendalApiMetadataLastModified(
        that: this,
      );
}

@sealed
class OperatorImpl extends RustOpaque implements Operator {
  // Not to be used by end users
  OperatorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OperatorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Operator,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Operator,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperatorPtr,
  );

  Capability capability() =>
      RustLib.instance.api.crateApiOpendalApiOperatorCapability(
        that: this,
      );

  Future<void> check() => RustLib.instance.api.crateApiOpendalApiOperatorCheck(
        that: this,
      );

  Future<void> createDir({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorCreateDir(that: this, path: path);

  void createDirSync({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorCreateDirSync(that: this, path: path);

  Future<bool> isExist({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorIsExist(that: this, path: path);

  bool isExistSync({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorIsExistSync(that: this, path: path);

  Future<Metadata> stat({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorStat(that: this, path: path);

  Metadata statSync({required String path}) => RustLib.instance.api
      .crateApiOpendalApiOperatorStatSync(that: this, path: path);
}
