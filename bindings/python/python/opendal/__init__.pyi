# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import collections.abc
import datetime
import os
import pathlib
import typing

from opendal import capability, exceptions, file, layers, types
from opendal.layers import Layer

__version__: builtins.str = "0.46.1"

@typing.final
class AsyncOperator:
    r"""
    The async equivalent of `Operator`.

    `AsyncOperator` is the entry point for all async APIs.

    See Also
    --------
    Operator
    """

    def __new__(cls, scheme: builtins.str, **kwargs: typing.Any) -> AsyncOperator:
        r"""
        Create a new `AsyncOperator`.

        Parameters
        ----------
        scheme : str
            The scheme of the service.
        **kwargs : dict
            The options for the service.

        Returns
        -------
        AsyncOperator
            The new async operator.
        """
    def layer(self, layer: Layer) -> AsyncOperator:
        r"""
        Add a new layer to the operator.

        Parameters
        ----------
        layer : Layer
            The layer to add.

        Returns
        -------
        AsyncOperator
            A new operator with the layer added.
        """
    def open(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        mode: builtins.str,
        **kwargs: typing.Any,
    ) -> collections.abc.Awaitable[file.AsyncFile]:
        r"""
        Open an async file-like object for the given path.

        The returning async file-like object is a context manager.

        Parameters
        ----------
        path : str
            The path to the file.
        mode : str
            The mode to open the file in. Only "rb" and "wb" are supported.
        **kwargs : dict
            Additional options for the underlying reader or writer.

        Returns
        -------
        coroutine
            An awaitable that returns a file-like object.
        """
    def read(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        version: builtins.str | None = None,
        concurrent: builtins.int | None = None,
        chunk: builtins.int | None = None,
        gap: builtins.int | None = None,
        offset: builtins.int | None = None,
        prefetch: builtins.int | None = None,
        size: builtins.int | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_modified_since: datetime.datetime = None,
        if_unmodified_since: datetime.datetime = None,
        content_type: builtins.str | None = None,
        cache_control: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
    ) -> collections.abc.Awaitable[builtins.bytes]:
        r"""
        Read the entire contents of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        version : str, optional
            The version of the file.
        concurrent : int, optional
            The number of concurrent readers.
        chunk : int, optional
            The size of each chunk.
        gap : int, optional
            The gap between each chunk.
        offset : int, optional
            The offset of the file.
        prefetch : int, optional
            The number of bytes to prefetch.
        size : int, optional
            The size of the file.
        if_match : str, optional
            The ETag of the file.
        if_none_match : str, optional
            The ETag of the file.
        if_modified_since : str, optional
            The last modified time of the file.
        if_unmodified_since : str, optional
            The last modified time of the file.
        content_type : str, optional
            The content type of the file.
        cache_control : str, optional
            The cache control of the file.
        content_disposition : str, optional
            The content disposition of the file.

        Returns
        -------
        coroutine
            An awaitable that returns the contents of the file as bytes.
        """
    def write(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        bs: builtins.bytes,
        *,
        append: builtins.bool | None = None,
        chunk: builtins.int | None = None,
        concurrent: builtins.int | None = None,
        cache_control: builtins.str | None = None,
        content_type: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
        content_encoding: builtins.str | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_not_exists: builtins.bool | None = None,
        user_metadata: typing.Mapping[builtins.str, builtins.str] | None = None,
    ) -> collections.abc.Awaitable[None]:
        r"""
        Write bytes to a file at the given path.

        This function will create a file if it does not exist, and will
        overwrite its contents if it does.

        Parameters
        ----------
        path : str
            The path to the file.
        bs : bytes
            The contents to write to the file.
        append : bool, optional
            Whether to append to the file instead of overwriting it.
        chunk : int, optional
            The chunk size to use when writing the file.
        concurrent : int, optional
            The number of concurrent requests to make when writing the file.
        cache_control : str, optional
            The cache control header to set on the file.
        content_type : str, optional
            The content type header to set on the file.
        content_disposition : str, optional
            The content disposition header to set on the file.
        content_encoding : str, optional
            The content encoding header to set on the file.
        if_match : str, optional
            The ETag to match when writing the file.
        if_none_match : str, optional
            The ETag to not match when writing the file.
        if_not_exists : bool, optional
            Whether to fail if the file already exists.
        user_metadata : dict, optional
            The user metadata to set on the file.

        Returns
        -------
        coroutine
            An awaitable that completes when the write is finished.
        """
    def stat(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        version: builtins.str | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_modified_since: datetime.datetime = None,
        if_unmodified_since: datetime.datetime = None,
        content_type: builtins.str | None = None,
        cache_control: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
    ) -> collections.abc.Awaitable[types.Metadata]:
        r"""
        Get the metadata of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        version : str, optional
            The version of the file.
        if_match : str, optional
            The ETag of the file.
        if_none_match : str, optional
            The ETag of the file.
        if_modified_since : datetime, optional
            The last modified time of the file.
        if_unmodified_since : datetime, optional
            The last modified time of the file.
        content_type : str, optional
            The content type of the file.
        cache_control : str, optional
            The cache control of the file.
        content_disposition : str, optional
            The content disposition of the file.

        Returns
        -------
        coroutine
            An awaitable that returns the metadata of the file.
        """
    def copy(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> collections.abc.Awaitable[None]:
        r"""
        Copy a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.

        Returns
        -------
        coroutine
            An awaitable that completes when the copy is finished.
        """
    def rename(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> collections.abc.Awaitable[None]:
        r"""
        Rename (move) a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.

        Returns
        -------
        coroutine
            An awaitable that completes when the rename is finished.
        """
    def remove_all(
        self, path: builtins.str | os.PathLike | pathlib.Path
    ) -> collections.abc.Awaitable[None]:
        r"""
        Recursively remove all files and directories at the given path.

        Parameters
        ----------
        path : str
            The path to remove.

        Returns
        -------
        coroutine
            An awaitable that completes when the removal is finished.
        """
    def check(self) -> collections.abc.Awaitable[None]:
        r"""
        Check if the operator is able to work correctly.

        Returns
        -------
        coroutine
            An awaitable that completes when the check is finished.

        Raises
        ------
        Exception
            If the operator is not able to work correctly.
        """
    def create_dir(
        self, path: builtins.str | os.PathLike | pathlib.Path
    ) -> collections.abc.Awaitable[None]:
        r"""
        Create a directory at the given path.

        Notes
        -----
        To indicate that a path is a directory, it must end with a `/`.
        This operation is always recursive, like `mkdir -p`.

        Parameters
        ----------
        path : str
            The path to the directory.

        Returns
        -------
        coroutine
            An awaitable that completes when the directory is created.
        """
    def delete(
        self, path: builtins.str | os.PathLike | pathlib.Path
    ) -> collections.abc.Awaitable[None]:
        r"""
        Delete a file at the given path.

        Notes
        -----
        This operation will not return an error if the path does not exist.

        Parameters
        ----------
        path : str
            The path to the file.

        Returns
        -------
        coroutine
            An awaitable that completes when the file is deleted.
        """
    def exists(
        self, path: builtins.str | os.PathLike | pathlib.Path
    ) -> collections.abc.Awaitable[builtins.bool]:
        r"""
        Check if a path exists.

        Parameters
        ----------
        path : str
            The path to check.

        Returns
        -------
        coroutine
            An awaitable that returns True if the path exists, False otherwise.
        """
    def list(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        limit: builtins.int | None = None,
        start_after: builtins.str | None = None,
        recursive: builtins.bool | None = None,
        versions: builtins.bool | None = None,
        deleted: builtins.bool | None = None,
    ) -> collections.abc.AsyncIterable[types.Entry]:
        r"""
        List entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        limit : int, optional
            The maximum number of entries to return.
        start_after : str, optional
            The entry to start after.
        recursive : bool, optional
            Whether to list recursively.
        versions : bool, optional
            Whether to list versions.
        deleted : bool, optional
            Whether to list deleted entries.

        Returns
        -------
        coroutine
            An awaitable that returns an async iterator over the entries.
        """
    def presign_stat(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> types.PresignedRequest:
        r"""
        Create a presigned request for a stat operation.

        Parameters
        ----------
        path : str
            The path of the object to stat.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_read(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> types.PresignedRequest:
        r"""
        Create a presigned request for a read operation.

        Parameters
        ----------
        path : str
            The path of the object to read.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_write(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> types.PresignedRequest:
        r"""
        Create a presigned request for a write operation.

        Parameters
        ----------
        path : str
            The path of the object to write to.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_delete(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> types.PresignedRequest:
        r"""
        Create a presigned request for a delete operation.

        Parameters
        ----------
        path : str
            The path of the object to delete.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def full_capability(self) -> capability.Capability:
        r"""
        Get all capabilities of this operator.

        Returns
        -------
        Capability
            The capability of the operator.
        """
    def to_operator(self) -> Operator:
        r"""
        Create a new blocking `Operator` from this async operator.

        Returns
        -------
        Operator
            The blocking operator.
        """

@typing.final
class Operator:
    r"""
    The blocking equivalent of `AsyncOperator`.

    `Operator` is the entry point for all blocking APIs.

    See Also
    --------
    AsyncOperator
    """

    def __new__(cls, scheme: builtins.str, **kwargs: typing.Any) -> Operator:
        r"""
        Create a new blocking `Operator`.

        Parameters
        ----------
        scheme : str
            The scheme of the service.
        **kwargs : dict
            The options for the service.

        Returns
        -------
        Operator
            The new operator.
        """
    def layer(self, layer: Layer) -> Operator:
        r"""
        Add a new layer to this operator.

        Parameters
        ----------
        layer : Layer
            The layer to add.

        Returns
        -------
        Operator
            A new operator with the layer added.
        """
    def open(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        mode: builtins.str,
        **kwargs: typing.Any,
    ) -> file.File:
        r"""
        Open a file-like object for the given path.

        The returning file-like object is a context manager.

        Parameters
        ----------
        path : str
            The path to the file.
        mode : str
            The mode to open the file in. Only "rb" and "wb" are supported.
        **kwargs
            Additional options for the underlying reader or writer.

        Returns
        -------
        File
            A file-like object.
        """
    def read(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        version: builtins.str | None = None,
        concurrent: builtins.int | None = None,
        chunk: builtins.int | None = None,
        gap: builtins.int | None = None,
        offset: builtins.int | None = None,
        prefetch: builtins.int | None = None,
        size: builtins.int | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_modified_since: datetime.datetime = None,
        if_unmodified_since: datetime.datetime = None,
        content_type: builtins.str | None = None,
        cache_control: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
    ) -> builtins.bytes:
        r"""
        Read the entire contents of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        version : str, optional
            The version of the file.
        concurrent : int, optional
            The number of concurrent readers.
        chunk : int, optional
            The size of each chunk.
        gap : int, optional
            The gap between each chunk.
        offset : int, optional
            The offset of the file.
        prefetch : int, optional
            The number of bytes to prefetch.
        size : int, optional
            The size of the file.
        if_match : str, optional
            The ETag of the file.
        if_none_match : str, optional
            The ETag of the file.
        if_modified_since : str, optional
            The last modified time of the file.
        if_unmodified_since : str, optional
            The last modified time of the file.
        content_type : str, optional
            The content type of the file.
        cache_control : str, optional
            The cache control of the file.
        content_disposition : str, optional
            The content disposition of the file.

        Returns
        -------
        bytes
            The contents of the file as bytes.
        """
    def write(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        bs: builtins.bytes,
        *,
        append: builtins.bool | None = None,
        chunk: builtins.int | None = None,
        concurrent: builtins.int | None = None,
        cache_control: builtins.str | None = None,
        content_type: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
        content_encoding: builtins.str | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_not_exists: builtins.bool | None = None,
        user_metadata: typing.Mapping[builtins.str, builtins.str] | None = None,
    ) -> None:
        r"""
        Write bytes to a file at the given path.

        This function will create a file if it does not exist, and will
        overwrite its contents if it does.

        Parameters
        ----------
        path : str
            The path to the file.
        bs : bytes
            The contents to write to the file.
        append : bool, optional
            Whether to append to the file instead of overwriting it.
        chunk : int, optional
            The chunk size to use when writing the file.
        concurrent : int, optional
            The number of concurrent requests to make when writing the file.
        cache_control : str, optional
            The cache control header to set on the file.
        content_type : str, optional
            The content type header to set on the file.
        content_disposition : str, optional
            The content disposition header to set on the file.
        content_encoding : str, optional
            The content encoding header to set on the file.
        if_match : str, optional
            The ETag to match when writing the file.
        if_none_match : str, optional
            The ETag to not match when writing the file.
        if_not_exists : bool, optional
            Whether to fail if the file already exists.
        user_metadata : dict, optional
            The user metadata to set on the file.
        """
    def stat(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        version: builtins.str | None = None,
        if_match: builtins.str | None = None,
        if_none_match: builtins.str | None = None,
        if_modified_since: datetime.datetime = None,
        if_unmodified_since: datetime.datetime = None,
        content_type: builtins.str | None = None,
        cache_control: builtins.str | None = None,
        content_disposition: builtins.str | None = None,
    ) -> types.Metadata:
        r"""
        Get the metadata of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        version : str, optional
            The version of the file.
        if_match : str, optional
            The ETag of the file.
        if_none_match : str, optional
            The ETag of the file.
        if_modified_since : datetime, optional
            The last modified time of the file.
        if_unmodified_since : datetime, optional
            The last modified time of the file.
        content_type : str, optional
            The content type of the file.
        cache_control : str, optional
            The cache control of the file.
        content_disposition : str, optional
            The content disposition of the file.

        Returns
        -------
        Metadata
            The metadata of the file.
        """
    def copy(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> None:
        r"""
        Copy a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.
        """
    def rename(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> None:
        r"""
        Rename (move) a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.
        """
    def remove_all(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Recursively remove all files and directories at the given path.

        Parameters
        ----------
        path : str
            The path to remove.
        """
    def create_dir(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Create a directory at the given path.

        Notes
        -----
        To indicate that a path is a directory, it must end with a `/`.
        This operation is always recursive, like `mkdir -p`.

        Parameters
        ----------
        path : str
            The path to the directory.
        """
    def delete(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Delete a file at the given path.

        Notes
        -----
        This operation will not return an error if the path does not exist.

        Parameters
        ----------
        path : str
            The path to the file.
        """
    def exists(self, path: builtins.str | os.PathLike | pathlib.Path) -> builtins.bool:
        r"""
        Check if a path exists.

        Parameters
        ----------
        path : str
            The path to check.

        Returns
        -------
        bool
            True if the path exists, False otherwise.
        """
    def list(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        limit: builtins.int | None = None,
        start_after: builtins.str | None = None,
        recursive: builtins.bool | None = None,
        versions: builtins.bool | None = None,
        deleted: builtins.bool | None = None,
    ) -> collections.abc.Iterable[types.Entry]:
        r"""
        List entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        limit : int, optional
            The maximum number of entries to return.
        start_after : str, optional
            The entry to start after.
        recursive : bool, optional
            Whether to list recursively.
        versions : bool, optional
            Whether to list versions.
        deleted : bool, optional
            Whether to list deleted entries.

        Returns
        -------
        BlockingLister
            An iterator over the entries in the directory.
        """
    def scan(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        *,
        limit: builtins.int | None = None,
        start_after: builtins.str | None = None,
        versions: builtins.bool | None = None,
        deleted: builtins.bool | None = None,
    ) -> collections.abc.Iterable[types.Entry]:
        r"""
        Recursively list entries in the given directory.

        Deprecated
        ----------
            Use `list()` with `recursive=True` instead.

        Parameters
        ----------
        path : str
            The path to the directory.
        limit : int, optional
            The maximum number of entries to return.
        start_after : str, optional
            The entry to start after.
        versions : bool, optional
            Whether to list versions.
        deleted : bool, optional
            Whether to list deleted entries.

        Returns
        -------
        BlockingLister
            An iterator over the entries in the directory.
        """
    def full_capability(self) -> capability.Capability:
        r"""
        Get all capabilities of this operator.

        Returns
        -------
        Capability
            The capability of the operator.
        """
    def check(self) -> None:
        r"""
        Check if the operator is able to work correctly.

        Raises
        ------
        Exception
            If the operator is not able to work correctly.
        """
    def to_async_operator(self) -> AsyncOperator:
        r"""
        Create a new `AsyncOperator` from this blocking operator.

        Returns
        -------
        AsyncOperator
            The async operator.
        """
