# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import os
import pathlib
import typing

import typing_extensions

import opendal.types
from opendal.capability import Capability
from opendal.file import File
from opendal.layers import Layer
from opendal.lister import BlockingLister
from opendal.options import ReadOptions, WriteOptions
from opendal.types import Metadata

class AsyncOperator:
    r"""
    The async equivalent of `Operator`.

    `AsyncOperator` is the entry point for all async APIs.

    See Also
    --------
    Operator
    """

    def __new__(cls, scheme: builtins.str, **kwargs) -> typing_extensions.Self:
        r"""
        Create a new `AsyncOperator`.

        Parameters
        ----------
        scheme : str
            The scheme of the service.
        **kwargs : dict
            The options for the service.

        Returns
        -------
        AsyncOperator
            The new async operator.
        """
    def layer(self, layer: Layer) -> AsyncOperator:
        r"""
        Add a new layer to the operator.

        Parameters
        ----------
        layer : Layer
            The layer to add.

        Returns
        -------
        AsyncOperator
            A new operator with the layer added.
        """
    def open(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        mode: builtins.str,
        **kwargs,
    ) -> typing.Any:
        r"""
        Open a file-like object for the given path.

        The returning file-like object is a context manager.

        Parameters
        ----------
        path : str
            The path to the file.
        mode : str
            The mode to open the file in. Only "rb" and "wb" are supported.
        **kwargs : dict
            Additional options for the underlying reader or writer.

        Returns
        -------
        coroutine
            An awaitable that returns a file-like object.
        """
    def read(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> typing.Any:
        r"""
        Read the entire contents of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        **kwargs : ReadOptions
            Additional options for the underlying reader.

        Returns
        -------
        coroutine
            An awaitable that returns the contents of the file as bytes.
        """
    def write(
        self, path: builtins.str | os.PathLike | pathlib.Path, bs: bytes, **kwargs
    ) -> typing.Any:
        r"""
        Write bytes to a file at the given path.

        This function will create a file if it does not exist, and will
        overwrite its contents if it does.

        Parameters
        ----------
        path : str
            The path to the file.
        bs : bytes
            The contents to write to the file.
        **kwargs : WriteOptions
            Additional options for the underlying writer.

        Returns
        -------
        coroutine
            An awaitable that completes when the write is finished.
        """
    def stat(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> typing.Any:
        r"""
        Get the metadata of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        **kwargs : StatOptions
            Additional options for the underlying stat operation.

        Returns
        -------
        coroutine
            An awaitable that returns the metadata of the file.
        """
    def copy(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> typing.Any:
        r"""
        Copy a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.

        Returns
        -------
        coroutine
            An awaitable that completes when the copy is finished.
        """
    def rename(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> typing.Any:
        r"""
        Rename (move) a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.

        Returns
        -------
        coroutine
            An awaitable that completes when the rename is finished.
        """
    def remove_all(self, path: builtins.str | os.PathLike | pathlib.Path) -> typing.Any:
        r"""
        Recursively remove all files and directories at the given path.

        Parameters
        ----------
        path : str
            The path to remove.

        Returns
        -------
        coroutine
            An awaitable that completes when the removal is finished.
        """
    def check(self) -> typing.Any:
        r"""
        Check if the operator is able to work correctly.

        Returns
        -------
        coroutine
            An awaitable that completes when the check is finished.

        Raises
        ------
        Exception
            If the operator is not able to work correctly.
        """
    def create_dir(self, path: builtins.str | os.PathLike | pathlib.Path) -> typing.Any:
        r"""
        Create a directory at the given path.

        Notes
        -----
        To indicate that a path is a directory, it must end with a `/`.
        This operation is always recursive, like `mkdir -p`.

        Parameters
        ----------
        path : str
            The path to the directory.

        Returns
        -------
        coroutine
            An awaitable that completes when the directory is created.
        """
    def delete(self, path: builtins.str | os.PathLike | pathlib.Path) -> typing.Any:
        r"""
        Delete a file at the given path.

        Notes
        -----
        This operation will not return an error if the path does not exist.

        Parameters
        ----------
        path : str
            The path to the file.

        Returns
        -------
        coroutine
            An awaitable that completes when the file is deleted.
        """
    def exists(self, path: builtins.str | os.PathLike | pathlib.Path) -> typing.Any:
        r"""
        Check if a path exists.

        Parameters
        ----------
        path : str
            The path to check.

        Returns
        -------
        coroutine
            An awaitable that returns True if the path exists, False otherwise.
        """
    def list(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> typing.Any:
        r"""
        List entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        **kwargs : ListOptions
            Additional options for the underlying list operation.

        Returns
        -------
        coroutine
            An awaitable that returns an async iterator over the entries.
        """
    @typing_extensions.deprecated("Use `list()` with `recursive=True` instead.")
    def scan(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> typing.Any:
        r"""
        Recursively list entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        **kwargs : ListOptions
            Additional options for the underlying list operation.

        Returns
        -------
        coroutine
            An awaitable that returns an async iterator over the entries.

        Deprecated
        ----------
            Use `list()` with `recursive=True` instead.
        """
    def presign_stat(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> opendal.types.PresignedRequest:
        r"""
        Create a presigned request for a stat operation.

        Parameters
        ----------
        path : str
            The path of the object to stat.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_read(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> opendal.types.PresignedRequest:
        r"""
        Create a presigned request for a read operation.

        Parameters
        ----------
        path : str
            The path of the object to read.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_write(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> opendal.types.PresignedRequest:
        r"""
        Create a presigned request for a write operation.

        Parameters
        ----------
        path : str
            The path of the object to write to.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def presign_delete(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        expire_second: builtins.int,
    ) -> opendal.types.PresignedRequest:
        r"""
        Create a presigned request for a delete operation.

        Parameters
        ----------
        path : str
            The path of the object to delete.
        expire_second : int
            The number of seconds until the presigned URL expires.

        Returns
        -------
        coroutine
            An awaitable that returns a presigned request object.
        """
    def capability(self) -> Capability:
        r"""
        Get all capabilities of this operator.

        Returns
        -------
        Capability
            The capability of the operator.
        """
    def to_operator(self) -> Operator:
        r"""
        Create a new blocking `Operator` from this async operator.

        Returns
        -------
        Operator
            The blocking operator.
        """
    def __getnewargs_ex__(self) -> typing.Any: ...

class Operator:
    r"""
    The blocking equivalent of `AsyncOperator`.

    `Operator` is the entry point for all blocking APIs.

    See Also
    --------
    AsyncOperator
    """

    def __new__(cls, scheme: builtins.str, **kwargs) -> typing_extensions.Self:
        r"""
        Create a new blocking `Operator`.

        Parameters
        ----------
        scheme : str
            The scheme of the service.
        **kwargs : dict
            The options for the service.

        Returns
        -------
        Operator
            The new operator.
        """
    def layer(self, layer: Layer) -> Operator:
        r"""
        Add a new layer to this operator.

        Parameters
        ----------
        layer : Layer
            The layer to add.

        Returns
        -------
        Operator
            A new operator with the layer added.
        """
    def open(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        mode: builtins.str,
        **kwargs,
    ) -> File:
        r"""
        Open a file-like object for the given path.

        The returning file-like object is a context manager.

        Parameters
        ----------
        path : str
            The path to the file.
        mode : str
            The mode to open the file in. Only "rb" and "wb" are supported.
        **kwargs : dict
            Additional options for the underlying reader or writer.

        Returns
        -------
        File
            A file-like object.
        """
    def read(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> typing.Any:
        r"""
        Read the entire contents of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        **kwargs : ReadOptions
            Additional options for the underlying reader.

        Returns
        -------
        bytes
            The contents of the file.
        """
    def write(
        self,
        path: builtins.str | os.PathLike | pathlib.Path,
        bs: typing.Sequence[builtins.int],
        **kwargs,
    ) -> None:
        r"""
        Write bytes to a file at the given path.

        This function will create a file if it does not exist, and will
        overwrite its contents if it does.

        Parameters
        ----------
        path : str
            The path to the file.
        bs : bytes
            The contents to write to the file.
        **kwargs : WriteOptions
            Additional options for the underlying writer.
        """
    def stat(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> Metadata:
        r"""
        Get the metadata of a file at the given path.

        Parameters
        ----------
        path : str
            The path to the file.
        **kwargs : StatOptions
            Additional options for the underlying stat operation.

        Returns
        -------
        Metadata
            The metadata of the file.
        """
    def copy(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> None:
        r"""
        Copy a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.
        """
    def rename(
        self,
        source: builtins.str | os.PathLike | pathlib.Path,
        target: builtins.str | os.PathLike | pathlib.Path,
    ) -> None:
        r"""
        Rename (move) a file from one path to another.

        Parameters
        ----------
        source : str
            The path to the source file.
        target : str
            The path to the target file.
        """
    def remove_all(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Recursively remove all files and directories at the given path.

        Parameters
        ----------
        path : str
            The path to remove.
        """
    def create_dir(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Create a directory at the given path.

        Notes
        -----
        To indicate that a path is a directory, it must end with a `/`.
        This operation is always recursive, like `mkdir -p`.

        Parameters
        ----------
        path : str
            The path to the directory.
        """
    def delete(self, path: builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Delete a file at the given path.

        Notes
        -----
        This operation will not return an error if the path does not exist.

        Parameters
        ----------
        path : str
            The path to the file.
        """
    def exists(self, path: builtins.str | os.PathLike | pathlib.Path) -> builtins.bool:
        r"""
        Check if a path exists.

        Parameters
        ----------
        path : str
            The path to check.

        Returns
        -------
        bool
            True if the path exists, False otherwise.
        """
    def list(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> BlockingLister:
        r"""
        List entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        **kwargs : ListOptions
            Additional options for the underlying list operation.

        Returns
        -------
        BlockingLister
            An iterator over the entries in the directory.
        """
    @typing_extensions.deprecated("Use `list()` with `recursive=True` instead.")
    def scan(
        self, path: builtins.str | os.PathLike | pathlib.Path, **kwargs
    ) -> BlockingLister:
        r"""
        Recursively list entries in the given directory.

        Parameters
        ----------
        path : str
            The path to the directory.
        **kwargs : ListOptions
            Additional options for the underlying list operation.

        Returns
        -------
        BlockingLister
            An iterator over the entries in the directory.

        Deprecated
        ----------
            Use `list()` with `recursive=True` instead.
        """
    def capability(self) -> Capability:
        r"""
        Get all capabilities of this operator.

        Returns
        -------
        Capability
            The capability of the operator.
        """
    def check(self) -> None:
        r"""
        Check if the operator is able to work correctly.

        Raises
        ------
        Exception
            If the operator is not able to work correctly.
        """
    def to_async_operator(self) -> AsyncOperator:
        r"""
        Create a new `AsyncOperator` from this blocking operator.

        Returns
        -------
        AsyncOperator
            The async operator.
        """
    def __getnewargs_ex__(self) -> typing.Any: ...
