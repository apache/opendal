# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class ListOptions:
    r"""Options for list operations."""

    @property
    def limit(self) -> builtins.int | None:
        r"""
        Set the max results to return per request.

        This controls the `limit` passed to the underlying service. Users can
        use this to manage the memory usage of the list operation.
        ```python
        default = None
        ```
        """
    @limit.setter
    def limit(self, value: builtins.int | None) -> None:
        r"""
        Set the max results to return per request.

        This controls the `limit` passed to the underlying service. Users can
        use this to manage the memory usage of the list operation.
        ```python
        default = None
        ```
        """
    @property
    def start_after(self) -> builtins.str | None:
        r"""
        Set the key to start listing from.

        The list operation will start after this specified key, allowing for
        pagination.
        ```python
        default = None
        ```
        """
    @start_after.setter
    def start_after(self, value: builtins.str | None) -> None:
        r"""
        Set the key to start listing from.

        The list operation will start after this specified key, allowing for
        pagination.
        ```python
        default = None
        ```
        """
    @property
    def recursive(self) -> builtins.bool:
        r"""
        Control whether the list operation is recursive.

        - If `false`, the operation will only list entries under the given path.
        - If `true`, the operation will list all entries that start with the
          given path.
        ```python
        default = False
        ```
        """
    @recursive.setter
    def recursive(self, value: builtins.bool) -> None:
        r"""
        Control whether the list operation is recursive.

        - If `false`, the operation will only list entries under the given path.
        - If `true`, the operation will list all entries that start with the
          given path.
        ```python
        default = False
        ```
        """
    @property
    def versions(self) -> builtins.bool:
        r"""
        Control whether to return object versions.

        - If `false`, the operation will not return object versions.
        - If `true`, the operation will return object versions if the service
          supports it.
        ```python
        default = False
        ```
        """
    @versions.setter
    def versions(self, value: builtins.bool) -> None:
        r"""
        Control whether to return object versions.

        - If `false`, the operation will not return object versions.
        - If `true`, the operation will return object versions if the service
          supports it.
        ```python
        default = False
        ```
        """
    @property
    def deleted(self) -> builtins.bool:
        r"""
        Control whether to return deleted objects.

        - If `false`, the operation will not return deleted objects.
        - If `true`, the operation will return deleted objects if the service
          supports object versioning.
        ```python
        default = False
        ```
        """
    @deleted.setter
    def deleted(self, value: builtins.bool) -> None:
        r"""
        Control whether to return deleted objects.

        - If `false`, the operation will not return deleted objects.
        - If `true`, the operation will return deleted objects if the service
          supports object versioning.
        ```python
        default = False
        ```
        """

class ReadOptions:
    r"""Options for read operations."""

    @property
    def offset(self) -> builtins.int:
        r"""
        Set the starting point for the read.

        This specifies the byte offset from the beginning of the file to
        start reading from. If not set, the read will start from the
        beginning (offset 0).
        ```python
        default = 0
        ```
        """
    @offset.setter
    def offset(self, value: builtins.int) -> None:
        r"""
        Set the starting point for the read.

        This specifies the byte offset from the beginning of the file to
        start reading from. If not set, the read will start from the
        beginning (offset 0).
        ```python
        default = 0
        ```
        """
    @property
    def size(self) -> builtins.int | None:
        r"""
        Set the number of bytes to read.

        This specifies the total number of bytes to read starting from the
        `offset`. If not set, the read will continue to the end of the file.
        ```python
        default = None
        ```
        """
    @size.setter
    def size(self, value: builtins.int | None) -> None:
        r"""
        Set the number of bytes to read.

        This specifies the total number of bytes to read starting from the
        `offset`. If not set, the read will continue to the end of the file.
        ```python
        default = None
        ```
        """
    @property
    def version(self) -> builtins.str | None:
        r"""
        Set `version` for this operation.

        This option can be used to retrieve the data of a specified version
        of the given path.

        If the version does not exist, an error will be returned.
        ```python
        default = None
        ```
        """
    @version.setter
    def version(self, value: builtins.str | None) -> None:
        r"""
        Set `version` for this operation.

        This option can be used to retrieve the data of a specified version
        of the given path.

        If the version does not exist, an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_match(self) -> builtins.str | None:
        r"""
        Set `if_match` for this operation.

        This option can be used to check if the file's `ETag` matches the
        given `ETag`.

        If the file exists and its ETag does not match, an error will be
        returned.
        ```python
        default = None
        ```
        """
    @if_match.setter
    def if_match(self, value: builtins.str | None) -> None:
        r"""
        Set `if_match` for this operation.

        This option can be used to check if the file's `ETag` matches the
        given `ETag`.

        If the file exists and its ETag does not match, an error will be
        returned.
        ```python
        default = None
        ```
        """
    @property
    def if_none_match(self) -> builtins.str | None:
        r"""
        Set `if_none_match` for this operation.

        This option can be used to check if the file's `ETag` does not match
        the given `ETag`.

        If the file exists and its ETag matches, an error will be returned.
        ```python
        default = None
        ```
        """
    @if_none_match.setter
    def if_none_match(self, value: builtins.str | None) -> None:
        r"""
        Set `if_none_match` for this operation.

        This option can be used to check if the file's `ETag` does not match
        the given `ETag`.

        If the file exists and its ETag matches, an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_modified_since(self) -> datetime.datetime | None:
        r"""
        Set `if_modified_since` for this operation.

        This option can be used to check if the file has been modified since
        the given timestamp.

        If the file exists and has not been modified since the specified time,
        an error will be returned.
        ```python
        default = None
        ```
        """
    @if_modified_since.setter
    def if_modified_since(self, value: datetime.datetime | None) -> None:
        r"""
        Set `if_modified_since` for this operation.

        This option can be used to check if the file has been modified since
        the given timestamp.

        If the file exists and has not been modified since the specified time,
        an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_unmodified_since(self) -> datetime.datetime | None:
        r"""
        Set `if_unmodified_since` for this operation.

        This feature can be used to check if the file has not been modified
        since the given timestamp.

        If the file exists and has been modified since the specified time, an
        error will be returned.
        ```python
        default = None
        ```
        """
    @if_unmodified_since.setter
    def if_unmodified_since(self, value: datetime.datetime | None) -> None:
        r"""
        Set `if_unmodified_since` for this operation.

        This feature can be used to check if the file has not been modified
        since the given timestamp.

        If the file exists and has been modified since the specified time, an
        error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def concurrent(self) -> builtins.int:
        r"""
        Set the level of concurrency for the read operation.

        By default, files are read sequentially. Setting this enables
        concurrent reads, which can improve performance for large files on
        supported services. It determines how many chunks are fetched
        at the same time.
        ```python
        default = 0
        ```
        """
    @concurrent.setter
    def concurrent(self, value: builtins.int) -> None:
        r"""
        Set the level of concurrency for the read operation.

        By default, files are read sequentially. Setting this enables
        concurrent reads, which can improve performance for large files on
        supported services. It determines how many chunks are fetched
        at the same time.
        ```python
        default = 0
        ```
        """
    @property
    def chunk(self) -> builtins.int | None:
        r"""
        Set the chunk size for concurrent reads.

        Services often have a preferred chunk size that is used by default.
        You can override this based on your application's needs.
        ```python
        default = None
        ```
        """
    @chunk.setter
    def chunk(self, value: builtins.int | None) -> None:
        r"""
        Set the chunk size for concurrent reads.

        Services often have a preferred chunk size that is used by default.
        You can override this based on your application's needs.
        ```python
        default = None
        ```
        """
    @property
    def gap(self) -> builtins.int | None:
        r"""
        Set the gap size for merging range read requests.

        If the gap between two requested byte ranges is smaller than this
        value, the ranges will be merged into a single read request. This
        reduces API calls at the cost of fetching extra data.
        ```python
        default = None
        ```
        """
    @gap.setter
    def gap(self, value: builtins.int | None) -> None:
        r"""
        Set the gap size for merging range read requests.

        If the gap between two requested byte ranges is smaller than this
        value, the ranges will be merged into a single read request. This
        reduces API calls at the cost of fetching extra data.
        ```python
        default = None
        ```
        """
    @property
    def prefetch(self) -> builtins.int:
        r"""
        Set the number of chunks to prefetch in memory.

        During concurrent reads, this limits how many completed chunks can
        be buffered. Once the limit is reached, new read tasks are paused
        until the buffer is consumed. A higher value allows for more
        aggressive prefetching at the cost of higher memory usage.

        Defaults to 0 (no prefetching).
        ```python
        default = 0
        ```
        """
    @prefetch.setter
    def prefetch(self, value: builtins.int) -> None:
        r"""
        Set the number of chunks to prefetch in memory.

        During concurrent reads, this limits how many completed chunks can
        be buffered. Once the limit is reached, new read tasks are paused
        until the buffer is consumed. A higher value allows for more
        aggressive prefetching at the cost of higher memory usage.

        Defaults to 0 (no prefetching).
        ```python
        default = 0
        ```
        """
    @property
    def override_content_type(self) -> builtins.str | None:
        r"""
        Override the `content-type` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """
    @override_content_type.setter
    def override_content_type(self, value: builtins.str | None) -> None:
        r"""
        Override the `content-type` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """
    @property
    def override_cache_control(self) -> builtins.str | None:
        r"""
        Override the `cache-control` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """
    @override_cache_control.setter
    def override_cache_control(self, value: builtins.str | None) -> None:
        r"""
        Override the `cache-control` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """
    @property
    def override_content_disposition(self) -> builtins.str | None:
        r"""
        Override the `content-disposition` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """
    @override_content_disposition.setter
    def override_content_disposition(self, value: builtins.str | None) -> None:
        r"""
        Override the `content-disposition` header in the response.

        This is only effective for presigned read operations.
        ```python
        default = None
        ```
        """

class StatOptions:
    r"""Options for stat operations."""

    @property
    def version(self) -> builtins.str | None:
        r"""
        Set `version` for this operation.

        This option can be used to retrieve the data of a specified version
        of the given path.

        If the version does not exist, an error will be returned.
        ```python
        default = None
        ```
        """
    @version.setter
    def version(self, value: builtins.str | None) -> None:
        r"""
        Set `version` for this operation.

        This option can be used to retrieve the data of a specified version
        of the given path.

        If the version does not exist, an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_match(self) -> builtins.str | None:
        r"""
        Set `if_match` for this operation.

        This option can be used to check if the file's `ETag` matches the
        given `ETag`.

        If the file exists and its ETag does not match, an error will be
        returned.
        ```python
        default = None
        ```
        """
    @if_match.setter
    def if_match(self, value: builtins.str | None) -> None:
        r"""
        Set `if_match` for this operation.

        This option can be used to check if the file's `ETag` matches the
        given `ETag`.

        If the file exists and its ETag does not match, an error will be
        returned.
        ```python
        default = None
        ```
        """
    @property
    def if_none_match(self) -> builtins.str | None:
        r"""
        Set `if_none_match` for this operation.

        This option can be used to check if the file's `ETag` does not match
        the given `ETag`.

        If the file exists and its ETag matches, an error will be returned.
        ```python
        default = None
        ```
        """
    @if_none_match.setter
    def if_none_match(self, value: builtins.str | None) -> None:
        r"""
        Set `if_none_match` for this operation.

        This option can be used to check if the file's `ETag` does not match
        the given `ETag`.

        If the file exists and its ETag matches, an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_modified_since(self) -> datetime.datetime | None:
        r"""
        Set `if_modified_since` for this operation.

        This option can be used to check if the file has been modified since
        the given timestamp.

        If the file exists and has not been modified since the specified time,
        an error will be returned.
        ```python
        default = None
        ```
        """
    @if_modified_since.setter
    def if_modified_since(self, value: datetime.datetime | None) -> None:
        r"""
        Set `if_modified_since` for this operation.

        This option can be used to check if the file has been modified since
        the given timestamp.

        If the file exists and has not been modified since the specified time,
        an error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def if_unmodified_since(self) -> datetime.datetime | None:
        r"""
        Set `if_unmodified_since` for this operation.

        This feature can be used to check if the file has not been modified
        since the given timestamp.

        If the file exists and has been modified since the specified time, an
        error will be returned.
        ```python
        default = None
        ```
        """
    @if_unmodified_since.setter
    def if_unmodified_since(self, value: datetime.datetime | None) -> None:
        r"""
        Set `if_unmodified_since` for this operation.

        This feature can be used to check if the file has not been modified
        since the given timestamp.

        If the file exists and has been modified since the specified time, an
        error will be returned.
        ```python
        default = None
        ```
        """
    @property
    def override_content_type(self) -> builtins.str | None:
        r"""
        Specify the content-type header to be sent back by the operation.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """
    @override_content_type.setter
    def override_content_type(self, value: builtins.str | None) -> None:
        r"""
        Specify the content-type header to be sent back by the operation.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """
    @property
    def override_cache_control(self) -> builtins.str | None:
        r"""
        Specify the `cache-control` header to be sent back by the operation.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """
    @override_cache_control.setter
    def override_cache_control(self, value: builtins.str | None) -> None:
        r"""
        Specify the `cache-control` header to be sent back by the operation.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """
    @property
    def override_content_disposition(self) -> builtins.str | None:
        r"""
        Specify the `content-disposition` header to be sent back.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """
    @override_content_disposition.setter
    def override_content_disposition(self, value: builtins.str | None) -> None:
        r"""
        Specify the `content-disposition` header to be sent back.

        This option is only meaningful when used with presign operations.
        ```python
        default = None
        ```
        """

class WriteOptions:
    r"""Options for write operations."""

    @property
    def append(self) -> builtins.bool:
        r"""
        Enable append mode for this operation.

        If `true`, new data will be appended to the end of the file. If the
        file does not exist, it will be created. By default, write operations
        overwrite existing files. Check if the service supports this first.
        ```python
        default = False
        ```
        """
    @append.setter
    def append(self, value: builtins.bool) -> None:
        r"""
        Enable append mode for this operation.

        If `true`, new data will be appended to the end of the file. If the
        file does not exist, it will be created. By default, write operations
        overwrite existing files. Check if the service supports this first.
        ```python
        default = False
        ```
        """
    @property
    def cache_control(self) -> builtins.str | None:
        r"""
        Set the `Cache-Control` header for the object.

        This controls caching behavior for browsers and CDNs. The value should
        be a valid HTTP `Cache-Control` header string. It is ignored if the
        service does not support it.
        ```python
        default = None
        ```
        """
    @cache_control.setter
    def cache_control(self, value: builtins.str | None) -> None:
        r"""
        Set the `Cache-Control` header for the object.

        This controls caching behavior for browsers and CDNs. The value should
        be a valid HTTP `Cache-Control` header string. It is ignored if the
        service does not support it.
        ```python
        default = None
        ```
        """
    @property
    def content_type(self) -> builtins.str | None:
        r"""
        Set the `Content-Type` header for the object.

        This specifies the media type (MIME type) of the content, such as
        `text/plain` or `image/jpeg`. It is ignored if not supported by the
        service.
        ```python
        default = None
        ```
        """
    @content_type.setter
    def content_type(self, value: builtins.str | None) -> None:
        r"""
        Set the `Content-Type` header for the object.

        This specifies the media type (MIME type) of the content, such as
        `text/plain` or `image/jpeg`. It is ignored if not supported by the
        service.
        ```python
        default = None
        ```
        """
    @property
    def content_disposition(self) -> builtins.str | None:
        r"""
        Set the `Content-Disposition` header for the object.

        This suggests how content should be handled by a browser, for example,
        `inline` (displayed) or `attachment; filename="..."` (downloaded).
        It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @content_disposition.setter
    def content_disposition(self, value: builtins.str | None) -> None:
        r"""
        Set the `Content-Disposition` header for the object.

        This suggests how content should be handled by a browser, for example,
        `inline` (displayed) or `attachment; filename="..."` (downloaded).
        It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @property
    def content_encoding(self) -> builtins.str | None:
        r"""
        Set the `Content-Encoding` header for the object.

        This specifies the encoding of the content, such as `gzip` or `br`
        for compression. It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @content_encoding.setter
    def content_encoding(self, value: builtins.str | None) -> None:
        r"""
        Set the `Content-Encoding` header for the object.

        This specifies the encoding of the content, such as `gzip` or `br`
        for compression. It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @property
    def user_metadata(self) -> builtins.dict[builtins.str, builtins.str] | None:
        r"""
        Set custom user metadata for the object.

        This attaches user-defined key-value pairs to the object. Be aware
        that services may have limits on key/value length and total size.
        It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @user_metadata.setter
    def user_metadata(
        self, value: builtins.dict[builtins.str, builtins.str] | None
    ) -> None:
        r"""
        Set custom user metadata for the object.

        This attaches user-defined key-value pairs to the object. Be aware
        that services may have limits on key/value length and total size.
        It is ignored if unsupported.
        ```python
        default = None
        ```
        """
    @property
    def if_match(self) -> builtins.str | None:
        r"""
        Set the `If-Match` condition for the write.

        The write will only succeed if the target's ETag matches the given
        value. Use `*` to match any existing object. This helps prevent
        overwriting concurrent changes.
        ```python
        default = None
        ```
        """
    @if_match.setter
    def if_match(self, value: builtins.str | None) -> None:
        r"""
        Set the `If-Match` condition for the write.

        The write will only succeed if the target's ETag matches the given
        value. Use `*` to match any existing object. This helps prevent
        overwriting concurrent changes.
        ```python
        default = None
        ```
        """
    @property
    def if_none_match(self) -> builtins.str | None:
        r"""
        Set the `If-None-Match` condition for the write.

        The write will only succeed if the target's ETag does not match the
        given value. Use `*` to ensure the object does not already exist.
        This is useful for creating new, unique objects.
        ```python
        default = None
        ```
        """
    @if_none_match.setter
    def if_none_match(self, value: builtins.str | None) -> None:
        r"""
        Set the `If-None-Match` condition for the write.

        The write will only succeed if the target's ETag does not match the
        given value. Use `*` to ensure the object does not already exist.
        This is useful for creating new, unique objects.
        ```python
        default = None
        ```
        """
    @property
    def if_not_exists(self) -> builtins.bool:
        r"""
        Ensure the write only succeeds if the object does not already exist.

        If `true`, the operation will fail if the path is already occupied.
        This provides a simple "create-if-not-exists" check.
        ```python
        default = False
        ```
        """
    @if_not_exists.setter
    def if_not_exists(self, value: builtins.bool) -> None:
        r"""
        Ensure the write only succeeds if the object does not already exist.

        If `true`, the operation will fail if the path is already occupied.
        This provides a simple "create-if-not-exists" check.
        ```python
        default = False
        ```
        """
    @property
    def concurrent(self) -> builtins.int:
        r"""
        Set the number of concurrent write operations.

        This enables parallel uploads, which can significantly improve
        performance for large files, especially over high-latency networks.
        It increases memory usage and falls back to sequential writes if
        unsupported.
        ```python
        default = 0
        ```
        """
    @concurrent.setter
    def concurrent(self, value: builtins.int) -> None:
        r"""
        Set the number of concurrent write operations.

        This enables parallel uploads, which can significantly improve
        performance for large files, especially over high-latency networks.
        It increases memory usage and falls back to sequential writes if
        unsupported.
        ```python
        default = 0
        ```
        """
    @property
    def chunk(self) -> builtins.int | None:
        r"""
        Set the chunk size for buffered or multipart writes.

        Larger chunks can improve performance and reduce API costs but use
        more memory. Some services have minimum chunk size requirements. If not
        set, an optimal size is chosen by default.
        ```python
        default = None
        ```
        """
    @chunk.setter
    def chunk(self, value: builtins.int | None) -> None:
        r"""
        Set the chunk size for buffered or multipart writes.

        Larger chunks can improve performance and reduce API costs but use
        more memory. Some services have minimum chunk size requirements. If not
        set, an optimal size is chosen by default.
        ```python
        default = None
        ```
        """
