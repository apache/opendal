# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
from enum import Enum

class Entry:
    r"""
    Entry representing a path and its associated metadata.

    If this entry is a directory, ``path`` **must** end with ``/``.
    Otherwise, ``path`` **must not** end with ``/``.
    """

    @property
    def path(self) -> builtins.str:
        r"""Path of entry relative to operator's root."""
    @property
    def name(self) -> builtins.str:
        r"""Name of entry representing the last segment of path."""
    @property
    def metadata(self) -> Metadata:
        r"""Metadata of this entry."""

class Metadata:
    r"""
    Metadata of an entry.

    Depending on the request context, metadata for the same path may vary.
    For example, two versions of the same path might have different content
    lengths. Metadata is always tied to a specific context and is not a global
    state.

    In systems that support versioning, such as AWS S3, the metadata may
    represent a specific version of a file.

    Users can access :meth:`Metadata.version` to retrieve the file version, if
    available. They can also use :meth:`Metadata.is_current` and
    :meth:`Metadata.is_deleted` to determine whether the metadata represents the
    latest version or a deleted one.
    """

    @property
    def content_disposition(self) -> builtins.str | None: ...
    @property
    def content_length(self) -> builtins.int:
        r"""Content length of this entry."""
    @property
    def content_md5(self) -> builtins.str | None:
        r"""Content MD5 of this entry."""
    @property
    def content_type(self) -> builtins.str | None:
        r"""Content Type of this entry."""
    @property
    def content_encoding(self) -> builtins.str | None:
        r"""Content Type of this entry."""
    @property
    def etag(self) -> builtins.str | None:
        r"""ETag of this entry."""
    @property
    def mode(self) -> EntryMode:
        r"""Mode represents this entry's mode."""
    @property
    def is_file(self) -> builtins.bool:
        r"""Return ``True`` if this metadata is for a file."""
    @property
    def is_dir(self) -> builtins.bool:
        r"""Return ``True`` if this metadata is for a directory."""
    @property
    def last_modified(self) -> datetime.datetime | None:
        r"""Last modified time."""
    @property
    def version(self) -> builtins.str | None:
        r"""Version of this entry, if available."""
    @property
    def user_metadata(self) -> builtins.dict[builtins.str, builtins.str] | None:
        r"""User defined metadata of this entry."""

class PresignedRequest:
    r"""
    A presigned request.

    This contains the information required to make a request to the
    underlying service, including the URL, method, and headers.
    """

    @property
    def url(self) -> builtins.str:
        r"""The URL of this request."""
    @property
    def method(self) -> builtins.str:
        r"""The HTTP method of this request."""
    @property
    def headers(self) -> builtins.dict[builtins.str, builtins.str]:
        r"""
        The HTTP headers of this request.

        Returns
        -------
        dict
            The HTTP headers of this request.
        """

class EntryMode(Enum):
    r"""EntryMode represents the mode."""

    File = ...
    r"""
    FILE means the path has data to read.
    """
    Dir = ...
    r"""
    DIR means the path can be listed.
    """
    Unknown = ...
    r"""
    Unknown means we don't know what we can do on this path.
    """

    def is_file(self) -> builtins.bool:
        r"""Return ``True`` if this is a file."""
    def is_dir(self) -> builtins.bool:
        r"""Return ``True`` if this is a directory."""
