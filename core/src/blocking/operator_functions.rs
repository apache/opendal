// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

//! Functions provides the functions generated by [`blocking::Operator`]
//!
//! By using functions, users can add more options for operation.

use std::collections::HashMap;
use std::future::{Future, IntoFuture};
use std::ops::RangeBounds;
use tokio::runtime::Handle;

use crate::operator_futures::OperatorFuture;
use crate::raw::*;
use crate::*;

use super::read::BlockingReader;
use super::write::BlockingWriter;

/// OperatorFunction is the function generated by [`blocking::Operator`].
///
/// The function will consume all the input to generate a result.
pub(crate) struct OperatorFunction<I, O, F: Future<Output = Result<O>>> {
    handle: Handle,
    fut: OperatorFuture<I, O, F>,
}

impl<I, O, F: Future<Output = Result<O>>> OperatorFunction<I, O, F> {
    pub fn new(handle: Handle, fut: OperatorFuture<I, O, F>) -> Self {
        Self { handle, fut }
    }

    pub fn call(self) -> Result<O> {
        self.handle.block_on(self.fut.into_future())
    }
}

/// Function that generated by [`blocking::Operator::write_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionWrite<F> = OperatorFunction<(OpWrite, OpWriter, Buffer), Metadata, F>;

impl<F: Future<Output = Result<Metadata>>> FunctionWrite<F> {
    /// Set the append mode.
    ///
    /// Refer to [`crate::operator_futures::FutureWrite::append`] for more docs
    pub fn append(mut self, v: bool) -> Self {
        self.fut = self
            .fut
            .map(|(args, options, bs)| (args.with_append(v), options, bs));
        self
    }

    /// Set the chunk size of op.
    ///
    /// Refer to [`crate::operator_futures::FutureWrite::chunk`] for more docs
    pub fn chunk(mut self, v: usize) -> Self {
        self.fut = self
            .fut
            .map(|(args, options, bs)| (args, options.with_chunk(v), bs));
        self
    }

    /// Set the content type of option
    ///
    /// Refer to [`crate::operator_futures::FutureWrite::content_type`] for more docs
    pub fn content_type(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options, bs)| (args.with_content_type(v), options, bs));
        self
    }

    /// Set the content disposition of option
    ///
    /// Refer to [`crate::operator_futures::FutureWrite::content_disposition`] for more docs
    pub fn content_disposition(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options, bs)| (args.with_content_disposition(v), options, bs));
        self
    }

    /// Set the cache control of option
    ///
    /// Refer to [`crate::operator_futures::FutureWrite::cache_control`] for more docs
    pub fn cache_control(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options, bs)| (args.with_cache_control(v), options, bs));
        self
    }

    /// Sets user metadata for this write request.
    ///
    /// User metadata is a set of key-value pairs that are stored with the object.
    pub fn user_metadata(mut self, v: impl IntoIterator<Item = (String, String)>) -> Self {
        self.fut = self.fut.map(|(args, options, bs)| {
            (args.with_user_metadata(HashMap::from_iter(v)), options, bs)
        });
        self
    }
}

/// Function that generated by [`blocking::Operator::writer_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionWriter<F> = OperatorFunction<(OpWrite, OpWriter), BlockingWriter, F>;

impl<F: Future<Output = Result<BlockingWriter>>> FunctionWriter<F> {
    /// Set the append mode of op.
    ///
    /// Refer to [`crate::operator_futures::FutureWriter::append`] for more docs
    pub fn append(mut self, v: bool) -> Self {
        self.fut = self
            .fut
            .map(|(args, options)| (args.with_append(v), options));
        self
    }

    /// Set the chunk size of op.
    ///
    /// Refer to [`crate::operator_futures::FutureWriter::chunk`] for more docs
    pub fn chunk(mut self, v: usize) -> Self {
        self.fut = self
            .fut
            .map(|(args, options)| (args, options.with_chunk(v)));
        self
    }

    /// Set the content type of option
    ///
    /// Refer to [`crate::operator_futures::FutureWriter::content_type`] for more docs
    pub fn content_type(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options)| (args.with_content_type(v), options));
        self
    }

    /// Set the content disposition of option
    ///
    /// Refer to [`crate::operator_futures::FutureWriter::content_disposition`] for more docs
    pub fn content_disposition(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options)| (args.with_content_disposition(v), options));
        self
    }

    /// Set the content type of option
    ///
    /// Refer to [`crate::operator_futures::FutureWriter::cache_control`] for more docs
    pub fn cache_control(mut self, v: &str) -> Self {
        self.fut = self
            .fut
            .map(|(args, options)| (args.with_cache_control(v), options));
        self
    }
}

/// Function that generated by [`blocking::Operator::delete_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionDelete<F> = OperatorFunction<OpDelete, (), F>;

impl<F: Future<Output = Result<()>>> FunctionDelete<F> {
    /// Set the version for this operation.
    ///
    /// Refer to [`crate::operator_futures::FutureDelete::version`] for more docs
    pub fn version(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_version(v));
        self
    }
}

/// Function that generated by [`blocking::Operator::list_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionList<F> = OperatorFunction<OpList, Vec<Entry>, F>;

impl<F: Future<Output = Result<Vec<Entry>>>> FunctionList<F> {
    /// The limit passed to underlying service to specify the max results
    /// that could return per-request.
    ///
    /// Refer to [`crate::operator_futures::FutureList::limit`] for more docs
    pub fn limit(mut self, v: usize) -> Self {
        self.fut = self.fut.map(|args| args.with_limit(v));
        self
    }

    /// The start_after passes to underlying service to specify the specified key
    /// to start listing from.
    ///
    /// Refer to [`crate::operator_futures::FutureList::start_after`] for more docs
    pub fn start_after(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_start_after(v));
        self
    }

    /// The recursive is used to control whether the list operation is recursive.
    ///
    /// Refer to [`crate::operator_futures::FutureList::recursive`] for more docs
    pub fn recursive(mut self, v: bool) -> Self {
        self.fut = self.fut.map(|args| args.with_recursive(v));
        self
    }
}

/// Function that generated by [`blocking::Operator::lister_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionLister<F> = OperatorFunction<OpList, blocking::BlockingLister, F>;

impl<F: Future<Output = Result<blocking::BlockingLister>>> FunctionLister<F> {
    /// The limit passed to underlying service to specify the max results
    /// that could return per-request.
    ///
    /// Refer to [`crate::operator_futures::FutureLister::limit`] for more docs
    pub fn limit(mut self, v: usize) -> Self {
        self.fut = self.fut.map(|args| args.with_limit(v));
        self
    }

    /// The start_after passes to underlying service to specify the specified key
    /// to start listing from.
    ///
    /// Refer to [`crate::operator_futures::FutureLister::start_after`] for more docs
    pub fn start_after(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_start_after(v));
        self
    }

    /// The recursive is used to control whether the list operation is recursive.
    ///
    /// Refer to [`crate::operator_futures::FutureLister::recursive`] for more docs
    pub fn recursive(mut self, v: bool) -> Self {
        self.fut = self.fut.map(|args| args.with_recursive(v));
        self
    }
}

/// Function that generated by [`blocking::Operator::read_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionRead<F> = OperatorFunction<(OpRead, OpReader), Buffer, F>;

impl<F: Future<Output = Result<Buffer>>> FunctionRead<F> {
    /// Set the range for this operation.
    pub fn range(mut self, range: impl RangeBounds<u64>) -> Self {
        self.fut = self.fut.range(range);
        self
    }
}

/// Function that generated by [`blocking::Operator::reader_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionReader<F> = OperatorFunction<OpRead, BlockingReader, F>;

impl<F: Future<Output = Result<BlockingReader>>> FunctionReader<F> {
    /// Sets the if-match header that should be send back by the
    /// Set the If-Match for this operation.
    ///
    /// Refer to [`crate::operator_futures::FutureReader::if_match`] for more docs
    pub fn if_match(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_if_match(v));
        self
    }

    /// Set the If-None-Match for this operation.
    ///
    /// Refer to [`crate::operator_futures::FutureReader::if_none_match`] for more docs
    pub fn if_none_match(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_if_none_match(v));
        self
    }

    /// Set the version for this operation.
    ///
    /// Refer to [`crate::operator_futures::FutureReader::version`] for more docs
    pub fn version(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_version(v));
        self
    }
}

/// Function that generated by [`blocking::Operator::stat_with`].
///
/// Users can add more options by public functions provided by this struct.
pub type FunctionStat<F> = OperatorFunction<OpStat, Metadata, F>;

impl<F: Future<Output = Result<Metadata>>> FunctionStat<F> {
    /// Set the If-Match for this operation.
    pub fn if_match(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_if_match(v));
        self
    }

    /// Set the If-None-Match for this operation.
    pub fn if_none_match(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_if_none_match(v));
        self
    }

    /// Set the version for this operation.
    pub fn version(mut self, v: &str) -> Self {
        self.fut = self.fut.map(|args| args.with_version(v));
        self
    }
}
