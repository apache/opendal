// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// > DO NOT EDIT IT MANUALLY <

use std::str::FromStr;

use crate::*;

#[gen_stub_pyclass_enum]
#[pyclass(
    eq,
    eq_int,
    dict,
    hash,
    frozen,
    name = "Scheme",
    module = "opendal.services"
)]
#[pyo3(rename_all = "PascalCase")]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum PyScheme {
{%- for name in srvs %}
    #[cfg(feature = "{{service_to_feature(name)}}")]
    {{ service_to_pascal(name) }},
{%- endfor %}
}

#[gen_stub_pymethods]
#[pymethods]
impl PyScheme {
    #[getter]
    pub fn name(&self) -> &'static str {
        match self {
        {%- for name in srvs %}
            #[cfg(feature = "{{service_to_feature(name)}}")]
            PyScheme::{{ service_to_pascal(name) }} => "{{ service_to_pascal(name) }}",
        {%- endfor %}
        }
    }

    #[getter]
    pub fn value(&self) -> &'static str {
        match self {
        {%- for name in srvs %}
            #[cfg(feature = "{{service_to_feature(name)}}")]
            PyScheme::{{ service_to_pascal(name) }} => "{{ name|lower }}",
        {%- endfor %}
        }
    }
}

impl From<PyScheme> for ocore::Scheme {
    fn from(p: PyScheme) -> Self {
        ocore::Scheme::from_str(p.value())
            .unwrap_or_else(|_| panic!("No Scheme found for '{}'", p.value()))
    }
}
