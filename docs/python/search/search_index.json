{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apache OpenDAL\u2122 Python binding","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install opendal\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import opendal\n\nop = opendal.Operator(\"fs\", root=\"/tmp\")\nop.write(\"test.txt\", b\"Hello World\")\nprint(op.read(\"test.txt\"))\nprint(op.stat(\"test.txt\").content_length)\n</code></pre> <p>Or using the async API:</p> <pre><code>import asyncio\n\nasync def main():\n    op = opendal.AsyncOperator(\"fs\", root=\"/tmp\")\n    await op.write(\"test.txt\", b\"Hello World\")\n    print(await op.read(\"test.txt\"))\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/async_file/","title":"Async file","text":"<p>A file-like object for reading and writing data.</p> <p>Created by the <code>open</code> method of the <code>AsyncOperator</code> class.</p>"},{"location":"api/async_file/#opendal.AsyncFile.closed","title":"<code>closed</code>  <code>async</code> <code>property</code>","text":"<p>Check if the file is closed.</p>"},{"location":"api/async_file/#opendal.AsyncFile.__aenter__","title":"<code>__aenter__()</code>","text":"<p>Enter the runtime context related to this object.</p>"},{"location":"api/async_file/#opendal.AsyncFile.__aexit__","title":"<code>__aexit__(exc_type, exc_value, traceback)</code>","text":"<p>Exit the runtime context related to this object.</p>"},{"location":"api/async_file/#opendal.AsyncFile.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the file.</p>"},{"location":"api/async_file/#opendal.AsyncFile.read","title":"<code>read(size=None)</code>  <code>async</code>","text":"<p>Read the content of the file.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The number of bytes to read. If None, read all.</p> <code>None</code>"},{"location":"api/async_file/#opendal.AsyncFile.read--returns","title":"Returns","text":"<pre><code>The content of the file as bytes.\n</code></pre>"},{"location":"api/async_file/#opendal.AsyncFile.readable","title":"<code>readable()</code>  <code>async</code>","text":"<p>Check if the file is readable.</p>"},{"location":"api/async_file/#opendal.AsyncFile.seek","title":"<code>seek(pos, whence=0)</code>  <code>async</code>","text":"<p>Set the file's current position.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>int</code> <p>The position to set.</p> required <code>whence</code> <code>int</code> <p>The reference point for the position. Can be 0, 1, or 2.</p> <code>0</code>"},{"location":"api/async_file/#opendal.AsyncFile.seek--returns","title":"Returns","text":"<pre><code>The new position in the file.\n</code></pre>"},{"location":"api/async_file/#opendal.AsyncFile.seekable","title":"<code>seekable()</code>  <code>async</code>","text":"<p>Check if the file supports seeking.</p>"},{"location":"api/async_file/#opendal.AsyncFile.tell","title":"<code>tell()</code>  <code>async</code>","text":"<p>Get the current position in the file.</p>"},{"location":"api/async_file/#opendal.AsyncFile.tell--returns","title":"Returns","text":"<pre><code>The current position in the file.\n</code></pre>"},{"location":"api/async_file/#opendal.AsyncFile.writable","title":"<code>writable()</code>  <code>async</code>","text":"<p>Check if the file is writable.</p>"},{"location":"api/async_file/#opendal.AsyncFile.write","title":"<code>write(bs)</code>  <code>async</code>","text":"<p>Write the content to the file.</p> <p>Parameters:</p> Name Type Description Default <code>bs</code> <code>bytes</code> <p>The content to write.</p> required"},{"location":"api/async_operator/","title":"Async operator","text":"<p>The entry class for all public async APIs.</p> <p>Parameters:</p> Name Type Description Default <code>scheme</code> <code>str</code> <p>The service name that OpenDAL supports.</p> required <code>**options</code> <code>any</code> <p>The options for the service. See the documentation of each service for more details.</p> <code>{}</code> Example <pre><code>import opendal\n\nop = opendal.AsyncOperator(\"s3\", bucket=\"bucket\", region=\"us-east-1\")\nawait op.write(\"hello.txt\", b\"hello world\")\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.copy","title":"<code>copy(source, target)</code>  <code>async</code>","text":"<p>Copy the object from source to target.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path</code> <p>The source path.</p> required <code>target</code> <code>str | Path</code> <p>The target path.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.create_dir","title":"<code>create_dir(path)</code>  <code>async</code>","text":"<p>Create a directory at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.delete","title":"<code>delete(path)</code>  <code>async</code>","text":"<p>Delete the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.exists","title":"<code>exists(path)</code>  <code>async</code>","text":"<p>Check if the object at the given path exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.exists--returns","title":"Returns","text":"<pre><code>True if the object exists, False otherwise.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.list","title":"<code>list(path, **kwargs)</code>  <code>async</code>","text":"<p>List objects at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory/ prefix.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional listing parameters matching the OpenDAL <code>ListOptions</code>:</p> <ul> <li>limit (int): The limit passed to the underlying service to specify the     max results that could return per-request. Users could use this to     control the memory usage of list operation. If not set, all matching     entries will be listed.</li> <li>start_after (str): Start listing after this key. Useful for pagination     or resuming interrupted listings.</li> <li>recursive (bool): Whether to list entries recursively through all     subdirectories. If False, lists only top-level entries (entries     under the given path).</li> <li>versions (bool): Whether to include all versions of objects, if the     underlying service supports versioning.</li> <li>deleted (bool): Whether to include deleted objects, if the underlying     service supports soft-deletes or versioning.</li> </ul> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.list--returns","title":"Returns","text":"<pre><code>Iterable[Entry]: An iterable of entries representing the objects in the\n    directory or prefix.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.open","title":"<code>open(path, mode, **options)</code>  <code>async</code>","text":"<p>Open a file at the given path for reading or writing.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the file.</p> required <code>mode</code> <code>str</code> <p>The mode to open the file. Must be either <code>\"rb\"</code> for reading or <code>\"wb\"</code> for writing.</p> required <code>**options</code> <code>Any</code> <p>Additional options passed to the underlying OpenDAL reader or writer. - If <code>mode == \"rb\"</code>: options match the   OpenDAL <code>ReaderOptions</code>. - If <code>mode == \"wb\"</code>: options match the   OpenDAL <code>WriteOptions</code>.</p> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.open--returns","title":"Returns","text":"<pre><code>AsyncFile: A file-like object that can be used to read or write the file.\n</code></pre> Example <pre><code>import opendal\n\nop = opendal.AsyncOperator(\"s3\", bucket=\"bucket\", region=\"us-east-1\")\nasync with await op.open(\"hello.txt\", \"wb\") as f:\n    await f.write(b\"hello world\")\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_delete","title":"<code>presign_delete(path, expire_second)</code>  <code>async</code>","text":"<p>Generate a presigned URL for delete operation.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>expire_second</code> <code>int</code> <p>The expiration time in seconds.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_delete--returns","title":"Returns","text":"<pre><code>A presigned request object.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_read","title":"<code>presign_read(path, expire_second)</code>  <code>async</code>","text":"<p>Generate a presigned URL for read operation.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>expire_second</code> <code>int</code> <p>The expiration time in seconds.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_read--returns","title":"Returns","text":"<pre><code>A presigned request object.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_stat","title":"<code>presign_stat(path, expire_second)</code>  <code>async</code>","text":"<p>Generate a presigned URL for stat operation.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>expire_second</code> <code>int</code> <p>The expiration time in seconds.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_stat--returns","title":"Returns","text":"<pre><code>A presigned request object.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_write","title":"<code>presign_write(path, expire_second)</code>  <code>async</code>","text":"<p>Generate a presigned URL for write operation.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>expire_second</code> <code>int</code> <p>The expiration time in seconds.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.presign_write--returns","title":"Returns","text":"<pre><code>A presigned request object.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.read","title":"<code>read(path, **options)</code>  <code>async</code>","text":"<p>Read the content of the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>**options</code> <code>Any</code> <p>Optional read parameters matching the OpenDAL <code>ReadOptions</code>:</p> <ul> <li>offset (int): Byte offset to start reading from. Defaults to 0     if not specified.</li> <li>size (int): Number of bytes to read. If not specified, reads until     the end of the object.   Together, <code>offset</code> and <code>size</code> define the byte range for reading.</li> <li>version (str): Specify the version of the object to read, if     supported by the backend.</li> <li>concurrent (int): Level of concurrency for reading. Defaults to     backend-specific value.</li> <li>chunk (int): Read chunk size in bytes.</li> <li>gap (int): Minimum gap (in bytes) between chunks to consider     them separate.</li> <li>override_content_type (str): Override the returned content type.</li> <li>if_match (str): Read only if the ETag matches the given value.</li> <li>if_none_match (str): Read-only if the ETag does not match the     given value.</li> <li>if_modified_since (datetime): Only read if the object was modified     since this timestamp. This timestamp must be in UTC.</li> <li>if_unmodified_since (datetime): Only read if the object was not     modified since this timestamp. This timestamp must be in UTC.</li> </ul> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.read--returns","title":"Returns","text":"<pre><code>The content of the object as bytes.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.remove_all","title":"<code>remove_all(path)</code>  <code>async</code>","text":"<p>Remove all objects at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.rename","title":"<code>rename(source, target)</code>  <code>async</code>","text":"<p>Rename the object from source to target.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path</code> <p>The source path.</p> required <code>target</code> <code>str | Path</code> <p>The target path.</p> required"},{"location":"api/async_operator/#opendal.AsyncOperator.scan","title":"<code>scan(path, **kwargs)</code>  <code>async</code>","text":"<p>Scan the objects at the given path recursively.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory/ prefix.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional listing parameters matching the OpenDAL <code>ListOptions</code>, excluding <code>recursive</code> which is always enforced as <code>True</code></p> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.scan--returns","title":"Returns","text":"<pre><code>Iterable[Entry]: An iterable of all entries under the given path,\n    recursively traversing all subdirectories. Each entry represents\n    an object (e.g., file or directory) discovered within the full\n    descendant hierarchy of the specified path.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.stat","title":"<code>stat(path, **kwargs)</code>  <code>async</code>","text":"<p>Get the metadata of the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional stat parameters matching the OpenDAL <code>StatOptions</code>:</p> <ul> <li>version (str): Specify the version of the object to read, if     supported by the backend.</li> <li>if_match (str): Read only if the ETag matches the given value.</li> <li>if_none_match (str): Read-only if the ETag does not match the     given value.</li> <li>if_modified_since (datetime): Only read if the object was modified     since this timestamp. This timestamp must be in UTC.</li> <li>if_unmodified_since (datetime): Only read if the object was not     modified since this timestamp. This timestamp must be in UTC.</li> <li>cache_control (str): Override the cache-control header for the object.</li> <li>content_type (str): Explicitly set the Content-Type header for     the object.</li> <li>content_disposition (str): Sets how the object should be presented     (e.g., as an attachment).</li> </ul> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.stat--returns","title":"Returns","text":"<pre><code>Metadata: The metadata of the object.\n</code></pre>"},{"location":"api/async_operator/#opendal.AsyncOperator.write","title":"<code>write(path, bs, **options)</code>  <code>async</code>","text":"<p>Write the content to the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>bs</code> <code>bytes</code> <p>The content to write.</p> required <code>**options</code> <code>Any</code> <p>Optional write parameters matching the OpenDAL <code>WriteOptions</code>:</p> <ul> <li>append (bool): If True, append to the object instead of overwriting.</li> <li>chunk (int): Specify the chunk size in bytes for multipart uploads.</li> <li>concurrent (int): Number of concurrent upload parts. Larger values can     improve performance.</li> <li>cache_control (str): Override the cache-control header for the object.</li> <li>content_type (str): Explicitly set the Content-Type header for     the object.</li> <li>content_disposition (str): Sets how the object should be presented     (e.g., as an attachment).</li> <li>content_encoding (str): Override the Content-Encoding header.</li> <li>if_match (str): Perform the write only if the object's current     ETag matches the given one.</li> <li>if_none_match (str): Perform the write only if the object's     current ETag does NOT match the given one.</li> <li>if_not_exists (bool): Only write the object if it doesn't     already exist.</li> <li>user_metadata (dict[str, str]): Custom user metadata to associate     with the object.</li> </ul> <code>{}</code>"},{"location":"api/async_operator/#opendal.AsyncOperator.write--returns","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"api/file/","title":"File","text":"<p>A file-like object for reading and writing data.</p> <p>Created by the <code>open</code> method of the <code>Operator</code> class.</p>"},{"location":"api/file/#opendal.File.closed","title":"<code>closed</code>  <code>property</code>","text":"<p>Check if the file is closed.</p>"},{"location":"api/file/#opendal.File.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter the runtime context related to this object.</p>"},{"location":"api/file/#opendal.File.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"<p>Exit the runtime context related to this object.</p>"},{"location":"api/file/#opendal.File.close","title":"<code>close()</code>","text":"<p>Close the file.</p>"},{"location":"api/file/#opendal.File.flush","title":"<code>flush()</code>","text":"<p>Flush the internal buffer.</p>"},{"location":"api/file/#opendal.File.read","title":"<code>read(size=None)</code>","text":"<p>Read the content of the file.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The number of bytes to read. If None, read all.</p> <code>None</code>"},{"location":"api/file/#opendal.File.read--returns","title":"Returns","text":"<pre><code>The content of the file as bytes.\n</code></pre>"},{"location":"api/file/#opendal.File.readable","title":"<code>readable()</code>","text":"<p>Check if the file is readable.</p>"},{"location":"api/file/#opendal.File.readinto","title":"<code>readinto(buffer)</code>","text":"<p>Read bytes into a buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>bytes | bytearray</code> <p>The buffer to read into.</p> required"},{"location":"api/file/#opendal.File.readinto--returns","title":"Returns","text":"<pre><code>The number of bytes read.\n</code></pre>"},{"location":"api/file/#opendal.File.readline","title":"<code>readline(size=None)</code>","text":"<p>Read a single line from the file.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The number of bytes to read. If None, read until newline.</p> <code>None</code>"},{"location":"api/file/#opendal.File.readline--returns","title":"Returns","text":"<pre><code>The line read from the file as bytes.\n</code></pre>"},{"location":"api/file/#opendal.File.seek","title":"<code>seek(pos, whence=0)</code>","text":"<p>Set the file's current position.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>int</code> <p>The position to set.</p> required <code>whence</code> <code>int</code> <p>The reference point for the position. Can be 0, 1, or 2.</p> <code>0</code>"},{"location":"api/file/#opendal.File.seek--returns","title":"Returns","text":"<pre><code>The new position in the file.\n</code></pre>"},{"location":"api/file/#opendal.File.seekable","title":"<code>seekable()</code>","text":"<p>Check if the file supports seeking.</p>"},{"location":"api/file/#opendal.File.tell","title":"<code>tell()</code>","text":"<p>Get the current position in the file.</p>"},{"location":"api/file/#opendal.File.tell--returns","title":"Returns","text":"<pre><code>The current position in the file.\n</code></pre>"},{"location":"api/file/#opendal.File.writable","title":"<code>writable()</code>","text":"<p>Check if the file is writable.</p>"},{"location":"api/file/#opendal.File.write","title":"<code>write(bs)</code>","text":"<p>Write the content to the file.</p> <p>Parameters:</p> Name Type Description Default <code>bs</code> <code>bytes</code> <p>The content to write.</p> required"},{"location":"api/metadata/","title":"Metadata","text":""},{"location":"api/metadata/#opendal.Metadata.content_disposition","title":"<code>content_disposition</code>  <code>property</code>","text":"<p>The content disposition of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.content_encoding","title":"<code>content_encoding</code>  <code>property</code>","text":"<p>The content encoding of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.content_length","title":"<code>content_length</code>  <code>property</code>","text":"<p>The content length of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.content_md5","title":"<code>content_md5</code>  <code>property</code>","text":"<p>The MD5 checksum of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.content_type","title":"<code>content_type</code>  <code>property</code>","text":"<p>The mime type of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.etag","title":"<code>etag</code>  <code>property</code>","text":"<p>The ETag of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.is_dir","title":"<code>is_dir</code>  <code>property</code>","text":"<p>Returns <code>True</code> if this metadata is for a directory.</p>"},{"location":"api/metadata/#opendal.Metadata.is_file","title":"<code>is_file</code>  <code>property</code>","text":"<p>Returns <code>True</code> if this metadata is for a file.</p>"},{"location":"api/metadata/#opendal.Metadata.last_modified","title":"<code>last_modified</code>  <code>property</code>","text":"<p>The last modified time of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.mode","title":"<code>mode</code>  <code>property</code>","text":"<p>The mode of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.user_metadata","title":"<code>user_metadata</code>  <code>property</code>","text":"<p>The user defined metadata of the object.</p>"},{"location":"api/metadata/#opendal.Metadata.version","title":"<code>version</code>  <code>property</code>","text":"<p>The version of the object, if available.</p>"},{"location":"api/operator/","title":"Operator","text":"<p>The entry class for all public blocking APIs.</p> <p>Parameters:</p> Name Type Description Default <code>scheme</code> <code>str</code> <p>The service name that OpenDAL supports.</p> required <code>**options</code> <code>any</code> <p>The options for the service. See the documentation of each service for more details.</p> <code>{}</code> Example <pre><code>import opendal\n\nop = opendal.Operator(\"s3\", bucket=\"bucket\", region=\"us-east-1\")\nop.write(\"hello.txt\", b\"hello world\")\n</code></pre>"},{"location":"api/operator/#opendal.Operator.capability","title":"<code>capability()</code>","text":"<p>Get the capability of the operator.</p>"},{"location":"api/operator/#opendal.Operator.capability--returns","title":"Returns","text":"<pre><code>The capability of the operator.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.copy","title":"<code>copy(source, target)</code>","text":"<p>Copy the object from source to target.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path</code> <p>The source path.</p> required <code>target</code> <code>str | Path</code> <p>The target path.</p> required"},{"location":"api/operator/#opendal.Operator.create_dir","title":"<code>create_dir(path)</code>","text":"<p>Create a directory at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory.</p> required"},{"location":"api/operator/#opendal.Operator.delete","title":"<code>delete(path)</code>","text":"<p>Delete the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required"},{"location":"api/operator/#opendal.Operator.exists","title":"<code>exists(path)</code>","text":"<p>Check if the object at the given path exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required"},{"location":"api/operator/#opendal.Operator.exists--returns","title":"Returns","text":"<pre><code>True if the object exists, False otherwise.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.layer","title":"<code>layer(layer)</code>","text":"<p>Add new layers upon the current operator.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>Layer</code> <p>The layer to be added.</p> required"},{"location":"api/operator/#opendal.Operator.layer--returns","title":"Returns","text":"<pre><code>The new operator with the layer added.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.list","title":"<code>list(path, **kwargs)</code>","text":"<p>List objects at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory/ prefix.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional listing parameters matching the OpenDAL <code>ListOptions</code>:</p> <ul> <li>limit (int): The limit passed to the underlying service to specify the     max results that could return per-request. Users could use this to     control the memory usage of list operation. If not set, all matching     entries will be listed.</li> <li>start_after (str): Start listing after this key. Useful for pagination     or resuming interrupted listings.</li> <li>recursive (bool): Whether to list entries recursively through all     subdirectories. If False, lists only top-level entries (entries     under the given path).</li> <li>versions (bool): Whether to include all versions of objects, if the     underlying service supports versioning.</li> <li>deleted (bool): Whether to include deleted objects, if the underlying     service supports soft-deletes or versioning.</li> </ul> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.list--returns","title":"Returns","text":"<pre><code>Iterable[Entry]: An iterable of entries representing the objects in the\n    directory or prefix.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.open","title":"<code>open(path, mode, **options)</code>","text":"<p>Open a file at the given path for reading or writing.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the file.</p> required <code>mode</code> <code>str</code> <p>The mode to open the file. Must be either <code>\"rb\"</code> for reading or <code>\"wb\"</code> for writing.</p> required <code>**options</code> <code>Any</code> <p>Additional options passed to the underlying OpenDAL reader or writer. - If <code>mode == \"rb\"</code>: options match the   OpenDAL <code>ReaderOptions</code>. - If <code>mode == \"wb\"</code>: options match the   OpenDAL <code>WriteOptions</code>.</p> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.open--returns","title":"Returns","text":"<pre><code>File: A file-like object that can be used to read or write the file.\n</code></pre> Example <pre><code>import opendal\n\nop = opendal.Operator(\"s3\", bucket=\"bucket\", region=\"us-east-1\")\nwith op.open(\"hello.txt\", \"wb\") as f:\n    f.write(b\"hello world\")\n</code></pre>"},{"location":"api/operator/#opendal.Operator.read","title":"<code>read(path, **options)</code>","text":"<p>Read the content of the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>**options</code> <code>Any</code> <p>Optional read parameters matching the OpenDAL <code>ReadOptions</code>:</p> <ul> <li>offset (int): Byte offset to start reading from. Defaults to 0     if not specified.</li> <li>size (int): Number of bytes to read. If not specified, reads until     the end of the object.   Together, <code>offset</code> and <code>size</code> define the byte range for reading.</li> <li>version (str): Specify the version of the object to read, if     supported by the backend.</li> <li>concurrent (int): Level of concurrency for reading. Defaults to     backend-specific value.</li> <li>chunk (int): Read chunk size in bytes.</li> <li>gap (int): Minimum gap (in bytes) between chunks to consider     them separate.</li> <li>if_match (str): Read only if the ETag matches the given value.</li> <li>if_none_match (str): Read-only if the ETag does not match the     given value.</li> <li>if_modified_since (datetime): Only read if the object was modified     since this timestamp. This timestamp must be in UTC.</li> <li>if_unmodified_since (datetime): Only read if the object was not     modified since this timestamp. This timestamp must be in UTC.</li> </ul> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.read--returns","title":"Returns","text":"<pre><code>bytes: The content of the object as bytes.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.remove_all","title":"<code>remove_all(path)</code>","text":"<p>Convert into an async operator.</p>"},{"location":"api/operator/#opendal.Operator.rename","title":"<code>rename(source, target)</code>","text":"<p>Rename the object from source to target.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path</code> <p>The source path.</p> required <code>target</code> <code>str | Path</code> <p>The target path.</p> required"},{"location":"api/operator/#opendal.Operator.scan","title":"<code>scan(path, **kwargs)</code>","text":"<p>Scan the objects at the given path recursively.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the directory/ prefix.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional listing parameters matching the OpenDAL <code>ListOptions</code>, excluding <code>recursive</code> which is always enforced as <code>True</code></p> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.scan--returns","title":"Returns","text":"<pre><code>Iterable[Entry]: An iterable of all entries under the given path,\n    recursively traversing all subdirectories. Each entry represents\n    an object (e.g., file or directory) discovered within the full\n    descendant hierarchy of the specified path.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.stat","title":"<code>stat(path, **kwargs)</code>","text":"<p>Get the metadata of the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional stat parameters matching the OpenDAL <code>StatOptions</code>:</p> <ul> <li>version (str): Specify the version of the object to read, if     supported by the backend.</li> <li>if_match (str): Read only if the ETag matches the given value.</li> <li>if_none_match (str): Read-only if the ETag does not match the     given value.</li> <li>if_modified_since (datetime): Only read if the object was modified     since this timestamp. This timestamp must be in UTC.</li> <li>if_unmodified_since (datetime): Only read if the object was not     modified since this timestamp. This timestamp must be in UTC.</li> <li>cache_control (str): Override the cache-control header for the object.</li> <li>content_type (str): Explicitly set the Content-Type header for     the object.</li> <li>content_disposition (str): Sets how the object should be presented     (e.g., as an attachment).</li> </ul> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.stat--returns","title":"Returns","text":"<pre><code>Metadata: The metadata of the object.\n</code></pre>"},{"location":"api/operator/#opendal.Operator.write","title":"<code>write(path, bs, **options)</code>","text":"<p>Write the content to the object at the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the object.</p> required <code>bs</code> <code>bytes</code> <p>The content to write.</p> required <code>**options</code> <code>Any</code> <p>Optional write parameters matching the OpenDAL <code>WriteOptions</code>:</p> <ul> <li>append (bool): If True, append to the object instead of overwriting.</li> <li>chunk (int): Specify the chunk size in bytes for multipart uploads.</li> <li>concurrent (int): Number of concurrent upload parts. Larger values can     improve performance.</li> <li>cache_control (str): Override the cache-control header for the object.</li> <li>content_type (str): Explicitly set the Content-Type header for     the object.</li> <li>content_disposition (str): Sets how the object should be presented     (e.g., as an attachment).</li> <li>content_encoding (str): Override the Content-Encoding header.</li> <li>if_match (str): Perform the write only if the object's current     ETag matches the given one.</li> <li>if_none_match (str): Perform the write only if the object's     current ETag does NOT match the given one.</li> <li>if_not_exists (bool): Only write the object if it doesn't     already exist.</li> <li>user_metadata (dict[str, str]): Custom user metadata to associate     with the object.</li> </ul> <code>{}</code>"},{"location":"api/operator/#opendal.Operator.write--returns","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"examples/basic/","title":"Basic","text":"In\u00a0[\u00a0]: Copied! <pre># Install the opendal\n!pip install opendal\n</pre> # Install the opendal !pip install opendal In\u00a0[\u00a0]: Copied! <pre>import opendal\n\n# Init an operator.\nop = opendal.Operator(\"fs\", root=\"/tmp\")\nprint(f\"operator: {op}\")\n\n# Write data into object test.\nop.write(\"test\", b\"Hello, World!\")\n\n# Read data from object\nbs = op.read(\"test\")\nprint(f\"content: {bs.decode()}\")\n\n# Get object metadata.\nmeta = op.stat(\"test\")\nprint(f\"metadata: {meta}\")\n</pre> import opendal  # Init an operator. op = opendal.Operator(\"fs\", root=\"/tmp\") print(f\"operator: {op}\")  # Write data into object test. op.write(\"test\", b\"Hello, World!\")  # Read data from object bs = op.read(\"test\") print(f\"content: {bs.decode()}\")  # Get object metadata. meta = op.stat(\"test\") print(f\"metadata: {meta}\")"},{"location":"examples/pandas/","title":"Pandas","text":"In\u00a0[\u00a0]: Copied! <pre># Install the opendal and pandas\n!pip install opendal, pandas\n</pre> # Install the opendal and pandas !pip install opendal, pandas In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n\nimport opendal\n\n# Init an operator.\nop = opendal.Operator(\"fs\", root=\"/tmp\")\n\n# Create and write a csv file\nop.write(\"test.csv\", b\"name,age\\nAlice,25\\nBob,30\\nCharlie,35\")\n\n# Open and read the DataFrame from the file.\nwith op.open(\"test.csv\", mode=\"rb\") as file:\n    read_df = pd.read_csv(file)\n    print(f\"read_df: {read_df}\")\n</pre> import pandas as pd  import opendal  # Init an operator. op = opendal.Operator(\"fs\", root=\"/tmp\")  # Create and write a csv file op.write(\"test.csv\", b\"name,age\\nAlice,25\\nBob,30\\nCharlie,35\")  # Open and read the DataFrame from the file. with op.open(\"test.csv\", mode=\"rb\") as file:     read_df = pd.read_csv(file)     print(f\"read_df: {read_df}\")"},{"location":"examples/polars/","title":"Polars","text":"In\u00a0[\u00a0]: Copied! <pre># Install the opendal and polars\n!pip install opendal, polars\n</pre> # Install the opendal and polars !pip install opendal, polars In\u00a0[\u00a0]: Copied! <pre>import polars as pl\n\nimport opendal\n\n# Init an operator.\nop = opendal.Operator(\"fs\", root=\"/tmp\")\n\n# Create a DataFrame.\ndf = pl.DataFrame({\"name\": [\"Alice\", \"Bob\"], \"age\": [20, 30]})\nprint(f\"df: {df}\")\n\n# Open and write the DataFrame to the file.\nwith op.open(\"test.csv\", mode=\"wb\") as file:\n    df.write_csv(file)\n\n# Open and read the DataFrame from the file.\nwith op.open(\"test.csv\", mode=\"rb\") as file:\n    read_df = pl.read_csv(file)\n    print(f\"read_df: {read_df}\")\n</pre> import polars as pl  import opendal  # Init an operator. op = opendal.Operator(\"fs\", root=\"/tmp\")  # Create a DataFrame. df = pl.DataFrame({\"name\": [\"Alice\", \"Bob\"], \"age\": [20, 30]}) print(f\"df: {df}\")  # Open and write the DataFrame to the file. with op.open(\"test.csv\", mode=\"wb\") as file:     df.write_csv(file)  # Open and read the DataFrame from the file. with op.open(\"test.csv\", mode=\"rb\") as file:     read_df = pl.read_csv(file)     print(f\"read_df: {read_df}\")"}]}