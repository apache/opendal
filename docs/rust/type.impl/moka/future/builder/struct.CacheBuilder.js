(function() {
    var type_impls = Object.fromEntries([["opendal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CacheBuilder%3CK,+V,+C%3E\" class=\"impl\"><a href=\"#impl-CacheBuilder%3CK,+V,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, C&gt; CacheBuilder&lt;K, V, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">name</a>(self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the name of the cache. Currently the name is used for identification\nonly in logging messages.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">max_capacity</a>(self, max_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the max capacity of the cache.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">initial_capacity</a>(self, number_of_entries: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the initial capacity (number of entries) of the cache.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eviction_policy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">eviction_policy</a>(self, policy: EvictionPolicy) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the eviction (and admission) policy of the cache.</p>\n<p>The default policy is TinyLFU. See <a href=\"../policy/struct.EvictionPolicy.html\"><code>EvictionPolicy</code></a> for\nmore details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weigher\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">weigher</a>(\n    self,\n    weigher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the weigher closure to the cache.</p>\n<p>The closure should take <code>&amp;K</code> and <code>&amp;V</code> as the arguments and returns a <code>u32</code>\nrepresenting the relative size of the entry.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eviction_listener\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">eviction_listener</a>&lt;F&gt;(self, listener: F) -&gt; CacheBuilder&lt;K, V, C&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;K&gt;, V, RemovalCause) + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the eviction listener closure to the cache. The closure should take\n<code>Arc&lt;K&gt;</code>, <code>V</code> and <a href=\"../notification/enum.RemovalCause.html\"><code>RemovalCause</code></a> as the arguments.</p>\n<p>See <a href=\"./struct.Cache.html#per-entry-expiration-policy\">this example</a> for a usage of eviction listener.</p>\n<h5 id=\"sync-or-async-eviction-listener\"><a class=\"doc-anchor\" href=\"#sync-or-async-eviction-listener\">§</a>Sync or Async Eviction Listener</h5>\n<p>The closure can be either synchronous or asynchronous, and <code>CacheBuilder</code>\nprovides two methods for setting the eviction listener closure:</p>\n<ul>\n<li>If you do not need to <code>.await</code> anything in the eviction listener, use this\n<code>eviction_listener</code> method.</li>\n<li>If you need to <code>.await</code> something in the eviction listener, use\n<a href=\"#method.async_eviction_listener\"><code>async_eviction_listener</code></a> method\ninstead.</li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>It is very important to make the listener closure not to panic. Otherwise,\nthe cache will stop calling the listener after a panic. This is an intended\nbehavior because the cache cannot know whether it is memory safe or not to\ncall the panicked listener again.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.async_eviction_listener\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">async_eviction_listener</a>&lt;F&gt;(self, listener: F) -&gt; CacheBuilder&lt;K, V, C&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;K&gt;, V, RemovalCause) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the eviction listener closure to the cache. The closure should take\n<code>Arc&lt;K&gt;</code>, <code>V</code> and <a href=\"../notification/enum.RemovalCause.html\"><code>RemovalCause</code></a> as the arguments, and\nreturn a <a href=\"../notification/type.ListenerFuture.html\"><code>ListenerFuture</code></a>.</p>\n<p>See <a href=\"./struct.Cache.html#example-eviction-listener\">this example</a> for a usage of asynchronous eviction listener.</p>\n<h5 id=\"sync-or-async-eviction-listener-1\"><a class=\"doc-anchor\" href=\"#sync-or-async-eviction-listener-1\">§</a>Sync or Async Eviction Listener</h5>\n<p>The closure can be either synchronous or asynchronous, and <code>CacheBuilder</code>\nprovides two methods for setting the eviction listener closure:</p>\n<ul>\n<li>If you do not need to <code>.await</code> anything in the eviction listener, use\n<a href=\"#method.eviction_listener\"><code>eviction_listener</code></a> method instead.</li>\n<li>If you need to <code>.await</code> something in the eviction listener, use\nthis method.</li>\n</ul>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>It is very important to make the listener closure not to panic. Otherwise,\nthe cache will stop calling the listener after a panic. This is an intended\nbehavior because the cache cannot know whether it is memory safe or not to\ncall the panicked listener again.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.time_to_live\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">time_to_live</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the time to live of the cache.</p>\n<p>A cached entry will be expired after the specified duration past from\n<code>insert</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p><code>CacheBuilder::build*</code> methods will panic if the given <code>duration</code> is longer\nthan 1000 years. This is done to protect against overflow when computing key\nexpiration.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.time_to_idle\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">time_to_idle</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the time to idle of the cache.</p>\n<p>A cached entry will be expired after the specified duration past from <code>get</code>\nor <code>insert</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p><code>CacheBuilder::build*</code> methods will panic if the given <code>duration</code> is longer\nthan 1000 years. This is done to protect against overflow when computing key\nexpiration.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expire_after\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">expire_after</a>(\n    self,\n    expiry: impl Expiry&lt;K, V&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the given <code>expiry</code> to the cache.</p>\n<p>See <a href=\"./struct.Cache.html#per-entry-expiration-policy\">the example</a> for per-entry expiration\npolicy in the <code>Cache</code> documentation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.support_invalidation_closures\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">support_invalidation_closures</a>(self) -&gt; CacheBuilder&lt;K, V, C&gt;</h4></section></summary><div class=\"docblock\"><p>Enables support for <a href=\"./struct.Cache.html#method.invalidate_entries_if\"><code>Cache::invalidate_entries_if</code></a>\nmethod.</p>\n<p>The cache will maintain additional internal data structures to support\n<code>invalidate_entries_if</code> method.</p>\n</div></details></div></details>",0,"opendal::services::moka::backend::MokaCacheBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CacheBuilder%3CK,+V,+Cache%3CK,+V%3E%3E\" class=\"impl\"><a href=\"#impl-CacheBuilder%3CK,+V,+Cache%3CK,+V%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; CacheBuilder&lt;K, V, Cache&lt;K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(max_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; CacheBuilder&lt;K, V, Cache&lt;K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>CacheBuilder</code> that will be used to build a <code>Cache</code> holding\nup to <code>max_capacity</code> entries.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">build</a>(self) -&gt; Cache&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Builds a <code>Cache&lt;K, V&gt;</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if configured with either <code>time_to_live</code> or <code>time_to_idle</code> higher than\n1000 years. This is done to protect against overflow when computing key\nexpiration.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_with_hasher\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">build_with_hasher</a>&lt;S&gt;(self, hasher: S) -&gt; Cache&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Builds a <code>Cache&lt;K, V, S&gt;</code> with the given <code>hasher</code> of type <code>S</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This example uses AHash hasher from <a href=\"https://crates.io/crates/ahash\">AHash</a> crate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Cargo.toml\n// [dependencies]\n// ahash = \"0.8\"\n// moka = { version = ..., features = [\"future\"] }\n// tokio = { version = \"1\", features = [\"rt-multi-thread\", \"macros\" ] }\n\n</span><span class=\"kw\">use </span>moka::future::Cache;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"comment\">// The type of this cache is: Cache&lt;i32, String, ahash::RandomState&gt;\n    </span><span class=\"kw\">let </span>cache = Cache::builder()\n        .max_capacity(<span class=\"number\">100</span>)\n        .build_with_hasher(ahash::RandomState::default());\n    cache.insert(<span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>.to_string()).<span class=\"kw\">await</span>;\n}</code></pre></div>\n<p>Note: If you need to add a type annotation to your cache, you must use the\nform of <code>Cache&lt;K, V, S&gt;</code> instead of <code>Cache&lt;K, V&gt;</code>. That <code>S</code> is the type of\nthe build hasher, and its default is the <code>RandomState</code> from\n<code>std::collections::hash_map</code> module . If you use a different build hasher,\nyou must specify <code>S</code> explicitly.</p>\n<p>Here is a good example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Good {\n    <span class=\"comment\">// Specifying the type in Cache&lt;K, V, S&gt; format.\n    </span>cache: Cache&lt;i32, String, ahash::RandomState&gt;,\n}\n\n<span class=\"comment\">// Storing the cache from above example. This should compile.\n</span>Good { cache };</code></pre></div>\n<p>Here is a bad example. This struct cannot store the above cache because it\ndoes not specify <code>S</code>:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Bad {\n    <span class=\"comment\">// Specifying the type in Cache&lt;K, V&gt; format.\n    </span>cache: Cache&lt;i32, String&gt;,\n}\n\n<span class=\"comment\">// This should not compile.\n</span>Bad { cache };\n<span class=\"comment\">// =&gt; error[E0308]: mismatched types\n//    expected struct `std::collections::hash_map::RandomState`,\n//       found struct `ahash::RandomState`</span></code></pre></div>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if configured with either <code>time_to_live</code> or <code>time_to_idle</code> higher than\n1000 years. This is done to protect against overflow when computing key\nexpiration.</p>\n</div></details></div></details>",0,"opendal::services::moka::backend::MokaCacheBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-CacheBuilder%3CK,+V,+Cache%3CK,+V%3E%3E\" class=\"impl\"><a href=\"#impl-Default-for-CacheBuilder%3CK,+V,+Cache%3CK,+V%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for CacheBuilder&lt;K, V, Cache&lt;K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; CacheBuilder&lt;K, V, Cache&lt;K, V&gt;&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","opendal::services::moka::backend::MokaCacheBuilder"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[20716]}