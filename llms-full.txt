# Apache OpenDAL™: One Layer, All Storage.

> OpenDAL (/ˈoʊ.pən.dæl/, pronounced "OH-puhn-dal") is an Open Data Access Layer that enables seamless interaction with diverse storage services.

OpenDAL's development is guided by its vision of One Layer, All Storage and its core principles: Open Community, Solid Foundation, Fast Access, Object Storage First, and Extensible Architecture. Read the explained vision at OpenDAL Vision.

---
url: https://opendal.apache.org/
---
# Welcome to Apache OpenDAL™ | Apache OpenDAL™

# Welcome to Apache OpenDAL™

OpenDAL represents **Open** **D**ata **A**ccess **L**ayer. Our vision is [**One Layer, All Storage.**](/vision/)

![](https://opendal.apache.org/img/architectural.png)

---

---
url: https://opendal.apache.org/core/
---
# Core | Apache OpenDAL™

# Core

## Apache OpenDAL™ Rust Core: One Layer, All Storage.

[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_core.yml?branch=main)](https://github.com/apache/opendal/actions?query=branch%3Amain) [![Latest Version](https://img.shields.io/crates/v/opendal.svg)](https://crates.io/crates/opendal) [![Crate Downloads](https://img.shields.io/crates/d/opendal.svg)](https://crates.io/crates/opendal) [![chat](https://img.shields.io/discord/1081052318650339399)](https://opendal.apache.org/discord)

Apache OpenDAL™ is an Open Data Access Layer that enables seamless interaction with diverse storage services.

![OpenDAL Architectural](https://opendal.apache.org/img/architectural.png) 

## Useful Links[​](#useful-links "Direct link to Useful Links")

* Documentation: [release](https://docs.rs/opendal/) | [dev](https://opendal.apache.org/docs/rust/opendal/)
* [Examples](https://github.com/apache/opendal/blob/main/core/examples)
* [Release Notes](https://docs.rs/opendal/latest/opendal/docs/changelog/index.html)
* [Upgrade Guide](https://docs.rs/opendal/latest/opendal/docs/upgrade/index.html)
* [RFC List](https://docs.rs/opendal/latest/opendal/docs/rfcs/index.html)

## Services[​](#services "Direct link to Services")

OpenDAL supports the following storage [services](https://docs.rs/opendal/latest/opendal/services/index.html):

| Type                           | Services|
| ------------------------------ ||
| Standard Storage Protocols     | ftp http [sftp](https://datatracker.ietf.org/doc/html/draft-ietf-secsh-filexfer-02) [webdav](https://datatracker.ietf.org/doc/html/rfc|
| Object Storage Services        | [azblob](https://azure.microsoft.com/en-us/services/storage/blobs/) [cos](https://www.tencentcloud.com/products/cos) [gcs](https://cloud.google.com/storage) [obs](https://www.huaweicloud.com/intl/en-us/product/obs.html) [oss](https://www.aliyun.com/product/oss) [s3](https://aws.amazon.com/s3/) [b2](https://www.backblaze.com/) [openstack\_swift](https://docs.openstack.org/swift/latest/) [upyun](https://www.upyun.com/) [vercel-blob](https://vercel.com/docs/storage/vercel-blob)                                                                                                                                                                                                      |
| File Storage Services          | fs [alluxio](https://docs.alluxio.io/os/user/stable/en/api/REST-API.html) [azdls](https://azure.microsoft.com/en-us/products/storage/data-lake-storage/) [azfile](https://learn.microsoft.com/en-us/rest/api/storageservices/file-service-rest-api) [compfs](https://github.com/compio-rs/compio/) [dbfs](https://docs.databricks.com/en/dbfs/index.html) [gridfs](https://www.mongodb.com/docs/manual/core/gridfs/) [hdfs](https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html) [hdfs-native](https://github.com/Kimahriman/hdfs-native) [ipfs](https://ipfs.tech/) [webhdfs](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/WebHDFS.html) |
| Consumer Cloud Storage Service | [aliyun-drive](https://www.aliyundrive.com/) [gdrive](https://www.google.com/drive/) [onedrive](https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage) [dropbox](https://www.dropbox.com/) [koofr](https://koofr.eu/) [pcloud](https://www.pcloud.com/) [seafile](https://www.seafile.com/) [yandex-disk](https://360.yandex.com/disk/)                                                                                                                                                                                                                                                                                                                                        |
| Key-Value Storage Services     | [cacache](https://crates.io/crates/cacache) [cloudflare-kv](https://developers.cloudflare.com/kv/) [dashmap](https://github.com/xacrimon/dashmap) memory [etcd](https://etcd.io/) [foundationdb](https://www.foundationdb.org/) [persy](https://crates.io/crates/persy) [redis](https://redis.io/) [rocksdb](http://rocksdb.org/) [sled](https://crates.io/crates/sled) [redb](https://crates.io/crates/redb) [tikv](https://tikv.org/)                                                                                                                                                                                                                                                              |
| Database Storage Services      | [d1](https://developers.cloudflare.com/d1/) [mongodb](https://www.mongodb.com/) [mysql](https://www.mysql.com/) [postgresql](https://www.postgresql.org/) [sqlite](https://www.sqlite.org/) [surrealdb](https://surrealdb.com/)                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| Cache Storage Services         | [ghac](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows) [memcached](https://memcached.org/) [mini-moka](https://github.com/moka-rs/mini-moka) [moka](https://github.com/moka-rs/moka) [vercel-artifacts](https://vercel.com/docs/concepts/monorepos/remote-caching)                                                                                                                                                                                                                                                                                                                                                                                    |
| Git Based Storage Services     | [huggingface](https://huggingface.co|

## Layers[​](#layers "Direct link to Layers")

OpenDAL supports the following storage [layers](https://docs.rs/opendal/latest/opendal/layers/index.html) to extend the behavior:

| Name                                                                                                     | Depends                                                                                     | Description                                                                           |
| -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| [AsyncBacktraceLayer](https://docs.rs/opendal/latest/opendal/layers/struct.AsyncBacktraceLayer.html)     | [async-backtrace](https://github.com/tokio-rs/async-backtrace)                              | Add Efficient, logical 'stack' traces of async functions for the underlying services. |
| [AwaitTreeLayer](https://docs.rs/opendal/latest/opendal/layers/struct.AwaitTreeLayer.html)               | [await-tree](https://github.com/risingwavelabs/await-tree)                                  | Add a Instrument await-tree for actor-based applications to the underlying services.  |
| [BlockingLayer](https://docs.rs/opendal/latest/opendal/layers/struct.BlockingLayer.html)                 | [tokio](https://github.com/tokio-rs/tokio)                                                  | Add blocking API support for non-blocking services.                                   |
| [ChaosLayer](https://docs.rs/opendal/latest/opendal/layers/struct.ChaosLayer.html)                       | [rand](https://github.com/rust-random/rand)                                                 | Inject chaos into underlying services for robustness test.                            |
| [ConcurrentLimitLayer](https://docs.rs/opendal/latest/opendal/layers/struct.ConcurrentLimitLayer.html)   | [tokio](https://github.com/tokio-rs/tokio)                                                  | Add concurrent request limit.                                                         |
| [DtraceLayer](https://docs.rs/opendal/latest/opendal/layers/struct.DtraceLayer.html)                     | [probe](https://github.com/cuviper/probe-rs)                                                | Support User Statically-Defined Tracing(aka USDT) on Linux                            |
| [LoggingLayer](https://docs.rs/opendal/latest/opendal/layers/struct.LoggingLayer.html)                   | [log](https://github.com/rust-lang/log)                                                     | Add log for every operations.                                                         |
| [MetricsLayer](https://docs.rs/opendal/latest/opendal/layers/struct.MetricsLayer.html)                   | [metrics](https://github.com/metrics-rs/metrics)                                            | Add metrics for every operations.                                                     |
| [MimeGuessLayer](https://docs.rs/opendal/latest/opendal/layers/struct.MimeGuessLayer.html)               | [mime\_guess](https://github.com/abonander/mime%5Fguess)                                    | Add Content-Type automatically based on the file extension in the operation path.     |
| [FastraceLayer](https://docs.rs/opendal/latest/opendal/layers/struct.FastraceLayer.html)                 | [fastrace](https://github.com/fastracelabs/fastrace)                                        | Add fastrace for every operations.                                                    |
| [OtelMetricsLayer](https://docs.rs/opendal/latest/opendal/layers/struct.OtelMetricsLayer.html)           | \[opentelemetry::metrics\]                                                                  | Add opentelemetry::metrics for every operations.                                      |
| [OtelTraceLayer](https://docs.rs/opendal/latest/opendal/layers/struct.OtelTraceLayer.html)               | [opentelemetry::trace](https://docs.rs/opentelemetry/latest/opentelemetry/trace/index.html) | Add opentelemetry::trace for every operations.                                        |
| [PrometheusClientLayer](https://docs.rs/opendal/latest/opendal/layers/struct.PrometheusClientLayer.html) | [prometheus\_client](https://github.com/prometheus/client%5Frust)                           | Add prometheus metrics for every operations.                                          |
| [PrometheusLayer](https://docs.rs/opendal/latest/opendal/layers/struct.PrometheusLayer.html)             | [prometheus](https://github.com/tikv/rust-prometheus)                                       | Add prometheus metrics for every operations.                                          |
| [RetryLayer](https://docs.rs/opendal/latest/opendal/layers/struct.RetryLayer.html)                       | [backon](https://github.com/Xuanwo/backon)                                                  | Add retry for temporary failed operations.                                            |
| [ThrottleLayer](https://docs.rs/opendal/latest/opendal/layers/struct.ThrottleLayer.html)                 | [governor](https://github.com/boinkor-net/governor)                                         | Add a bandwidth rate limiter to the underlying services.                              |
| [TimeoutLayer](https://docs.rs/opendal/latest/opendal/layers/struct.TimeoutLayer.html)                   | [tokio](https://github.com/tokio-rs/tokio)                                                  | Add timeout for every operations to avoid slow or unexpected hang operations.         |
| [TracingLayer](https://docs.rs/opendal/latest/opendal/layers/struct.TracingLayer.html)                   | [tracing](https://github.com/tokio-rs/tracing)                                              | Add tracing for every operations.                                                     |

## Quickstart[​](#quickstart "Direct link to Quickstart")

```
use opendal::Result;
use opendal::layers::LoggingLayer;
use opendal::services;
use opendal::Operator;

#[tokio::main]
async fn main() -> Result<()> {
    // Pick a builder and configure it.
    let mut builder = services::S3::default();
    builder.bucket("test");

    // Init an operator
    let op = Operator::new(builder)?
        // Init with logging layer enabled.
        .layer(LoggingLayer::default())
        .finish();

    // Write data
    op.write("hello.txt", "Hello, World!").await?;

    // Read data
    let bs = op.read("hello.txt").await?;

    // Fetch metadata
    let meta = op.stat("hello.txt").await?;
    let mode = meta.mode();
    let length = meta.content_length();

    // Delete
    op.delete("hello.txt").await?;

    Ok(())
}

```

## Examples[​](#examples "Direct link to Examples")

| Name                                                                                             | Description                                                   |
| ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------- |
| [Basic](https://github.com/apache/opendal/blob/main/core/examples/basic)                         | Show how to use opendal to operate storage service.           |
| [Concurrent Upload](https://github.com/apache/opendal/blob/main/core/examples/concurrent-upload) | Show how to perform upload concurrently to a storage service. |
| [Multipart Upload](https://github.com/apache/opendal/blob/main/core/examples/multipart-upload)   | Show how to perform a multipart upload to a storage service.  |

## Contributing[​](#contributing "Direct link to Contributing")

Check out the [CONTRIBUTING](https://github.com/apache/opendal/blob/main/core/CONTRIBUTING.md) guide for more details on getting started with contributing to this project.

## Used by[​](#used-by "Direct link to Used by")

Check out the [users](https://github.com/apache/opendal/blob/main/core/users.md) list for more details on who is using OpenDAL.

## Branding[​](#branding "Direct link to Branding")

The first and most prominent mentions must use the full form: **Apache OpenDAL™** of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization.

For more details, see the [Apache Product Name Usage Guide](https://www.apache.org/foundation/marks/guide).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/download/
---
# Apache OpenDAL™ Downloads | Apache OpenDAL™

[Skip to main content](#%5F%5Fdocusaurus%5FskipToContent%5Ffallback)

[![Apache OpenDAL](/img/logo.svg)![Apache OpenDAL](/img/logo_dark.svg)](/)

[Docs](/)[Blog](/blog/)[Community](/community/)[Download](/download/)

[ASF](#)
* [Foundation](https://www.apache.org/)
* [License](https://www.apache.org/licenses/)
* [Events](https://www.apache.org/events/current-event.html)
* [Privacy](https://privacy.apache.org/policies/privacy-policy-public.html)
* [Security](https://www.apache.org/security/)
* [Sponsorship](https://www.apache.org/foundation/sponsorship.html)
* [Thanks](https://www.apache.org/foundation/thanks.html)
* [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)

[](https://github.com/apache/opendal)[](https://discord.gg/XQy8yGR2dg)

# Apache OpenDAL™ Downloads

The official Apache OpenDAL releases are provided as source artifacts.

## Releases[​](#releases "Direct link to Releases")

The latest source release is [0.54.1](https://www.apache.org/dyn/closer.lua/opendal/0.54.1/apache-opendal-core-0.54.1-src.tar.gz?action=download) ([asc](https://downloads.apache.org/opendal/0.54.1/apache-opendal-core-0.54.1-src.tar.gz.asc), [sha512](https://downloads.apache.org/opendal/0.54.1/apache-opendal-core-0.54.1-src.tar.gz.sha512)).

For older releases, please check the [archive](https://archive.apache.org/dist/opendal/).

For even older releases during the incubating phase, please check the [incubator archive](https://archive.apache.org/dist/incubator/opendal/).

## Notes[​](#notes "Direct link to Notes")

* When downloading a release, please verify the OpenPGP compatible signature (or failing that, check the SHA-512); these should be fetched from the main Apache site.
* The KEYS file contains the public keys used for signing release. It is recommended that (when possible) a web of trust is used to confirm the identity of these keys.
* Please download the [KEYS](https://downloads.apache.org/opendal/KEYS) as well as the .asc signature files.

### To verify the signature of the release artifact[​](#to-verify-the-signature-of-the-release-artifact "Direct link to To verify the signature of the release artifact")

You will need to download both the release artifact and the .asc signature file for that artifact. Then verify the signature by:

* Download the KEYS file and the .asc signature files for the relevant release artifacts.
* Import the KEYS file to your GPG keyring:

```
gpg --import KEYS

```

* Verify the signature of the release artifact using the following command:

```
gpg --verify <artifact>.asc <artifact>

```

### To verify the checksum of the release artifact[​](#to-verify-the-checksum-of-the-release-artifact "Direct link to To verify the checksum of the release artifact")

You will need to download both the release artifact and the .sha512 checksum file for that artifact. Then verify the checksum by:

```
shasum -a 512 -c <artifact>.sha512

```

* [Releases](#releases)
* [Notes](#notes)  
   * [To verify the signature of the release artifact](#to-verify-the-signature-of-the-release-artifact)  
   * [To verify the checksum of the release artifact](#to-verify-the-checksum-of-the-release-artifact)

[![Apache Software Foundation](/./img/asf_logo_wide.svg)![Apache Software Foundation](/./img/asf_logo_wide.svg)](https://www.apache.org/)

Copyright © 2022-2025, The Apache Software Foundation  
Apache OpenDAL, OpenDAL, Apache, the Apache feather and the Apache OpenDAL project logo are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/vision/
---
# Vision | Apache OpenDAL™

# Vision

## Charter[​](#charter "Direct link to Charter")

**One Layer, All Storage.**

## Principles[​](#principles "Direct link to Principles")

Principles are guiding principles. They guide how decisions are made for the whole project. Ideally, we do all of them all the time. In some cases, though, we may be forced to decide between slightly penalizing one goal or another. In that case, we tend to support those goals that come earlier in the list over those that come later (but every case is different).

### 0\. Open Community[​](#0-open-community "Direct link to 0. Open Community")

OpenDAL SHOULD be an **open** storage library.

OpenDAL is an ASF project governed by the OpenDAL PMC. At ASF, we believe in "Community Over Code" and adhere to [the Apache Way](https://www.apache.org/theapacheway/). We aim to develop OpenDAL to meet the needs of our community. We do not maintain private versions or include features that aren't useful to others.

For example, OpenDAL prefers to have clear and readable code, as this allows more people in the community to join the development.

### 1\. Solid Foundation[​](#1-solid-foundation "Direct link to 1. Solid Foundation")

OpenDAL SHOULD be a **solid** storage library.

OpenDAL is a solid foundation of user projects that users can trust OpenDAL to perform operations on real-world storage services. OpenDAL SHOULD always focus on building a Solid Foundation.

For example, OpenDAL performs additional error checks for AWS S3 complete multipart operations, as S3 may return an error in response with a 200 status code, even though this may add extra costs that conflict with "Fast Access.”

### 2\. Fast Access[​](#2-fast-access "Direct link to 2. Fast Access")

OpenDAL SHOULD be a **fast** storage library.

Its fast access ensures that OpenDAL implements storage support with zero overhead. Users can integrate with OpenDAL without concerns about additional costs. OpenDAL should be as fast as, or faster than, the SDK for any given storage service.

For example, OpenDAL uses Capability to describe the capabilities of different services and adopts native features of those services whenever possible.

### 3\. Object Storage First[​](#3-object-storage-first "Direct link to 3. Object Storage First")

OpenDAL SHOULD be an **object storage first** library.

OpenDAL supports many storage services, but it is usually optimized for modern storage services. At the time of writing, we can say OpenDAL is object storage first. When designing features, OpenDAL tends to prioritize optimization for object storage.

For example, OpenDAL's Buffer design is primarily optimized for HTTP-based services, helping to reduce extra allocation, in-memory copying, and memory usage.

### 4\. Extensible Architecture[​](#4-extensible-architecture "Direct link to 4. Extensible Architecture")

OpenDAL SHOULD be an extensible storage library.

OpenDAL can be extended to various languages, backends, and layers. Each is independent and does not depend on the others. Users can combine different layers, such as metrics, logging, tracing, and retry, and extend their own languages, backends, and layers.

For example, OpenDAL's core never relies on the behavior or dependency of a single layer. Users can stack as many layers as they want on a given operator.

## Use Cases[​](#use-cases "Direct link to Use Cases")

Who are typical OpenDAL _users_? How would they use OpenDAL?

### Infrastructure Builders[​](#infrastructure-builders "Direct link to Infrastructure Builders")

Examples:

* [Databend](https://github.com/databendlabs/databend)
* [RisingWave](https://github.com/risingwavelabs/risingwave)
* [GreptimeDB](https://github.com/GreptimeTeam/greptimedb)
* [Apache Iceberg Rust](https://github.com/apache/iceberg-rust)

Use Cases:

* Building storage systems like databases
* Developing data processing pipelines
* Creating backup and archive solutions

Primary Concerns:

* **Solid Foundation**: Need guaranteed consistency and predictability for storage operations
* **Fast Access**: Require minimal overhead and optimal performance
* _Why_: Infrastructure services demand both reliability and performance as foundational requirements

### Application Developers[​](#application-developers "Direct link to Application Developers")

Examples:

* [Sccache](https://github.com/mozilla/sccache)
* [Vector](https://github.com/vectordotdev/vector)
* [Rustic](https://github.com/rustic-rs/rustic)

Use Cases:

* Building end-user applications
* Developing CLI tools
* Creating web services

Primary Concerns:

* **Fast Access**: Need efficient integration and optimal performance
* **Object Storage First**: Benefit from optimizations for modern cloud storage
* _Why_: Modern applications commonly use object storage and require responsive performance

### Platform Developers[​](#platform-developers "Direct link to Platform Developers")

Examples:

* [Pants](https://github.com/pantsbuild/pants)
* [Zino](https://github.com/zino-rs/zino)
* [Shuttle](https://github.com/shuttle-hq/shuttle)

Use Cases:

* Building AI/ML platforms
* Developing cloud services
* Creating developer tools

Primary Concerns:

* **Extensible Architecture**: Need to customize and extend storage capabilities
* **Solid Foundation**: Require dependable storage operations
* _Why_: Platforms need flexibility to adapt to various use cases while maintaining reliability

---

_This documentation is inspired a lot by [hyper’s VISION document](https://hyper.rs/contrib/vision/)._

---

---
url: https://opendal.apache.org/apps/migration/
---
# Apps migration guide | Apache OpenDAL™

# Apps migration guide

This repository no longer maintains the applications Oli and Ofs.

What changed

* Oli moved to: <https://github.com/apache/opendal-oli>
* Ofs moved to: <https://github.com/apache/opendal-ofs>
* Oay has been removed.

Impact

* Crates remain the same (oli, ofs). Cargo users do not need to change dependency names.
* Source code, issue tracking and releases for Oli/Ofs are now in the new repositories.

How to migrate

* For issues or PRs regarding Oli/Ofs, open them in their new repositories.
* For building from source, clone the new repositories.

FAQ

* Why the move? To decouple release cadence and CI from the core project.
* Are there breaking changes? No API/CLI breaking changes are planned as part of the move.

Related

* Tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/apps/oay/
---
# Oay (removed) | Apache OpenDAL™

# Oay (removed)

This tool has been removed from the Apache OpenDAL repository.

If you relied on oay, please see the migration tracking issue and release notes for details:

* Migration tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/apps/ofs/
---
# Ofs (moved) | Apache OpenDAL™

# Ofs (moved)

Ofs has moved to a separate repository and is no longer maintained in this repository.

Links:

* Repository: <https://github.com/apache/opendal-ofs>
* Crate: <https://crates.io/crates/ofs>
* Migration tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/apps/oli/
---
# Oli (moved) | Apache OpenDAL™

# Oli (moved)

Oli has moved to a separate repository and is no longer maintained in this repository.

Links:

* Repository: <https://github.com/apache/opendal-oli>
* Crate: <https://crates.io/crates/oli>
* Migration tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/bindings/c/
---
# C 🚧 | Apache OpenDAL™

# C 🚧

## Apache OpenDAL™ C Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/c/)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Example[​](#example "Direct link to Example")

A simple read and write example

```
#include "assert.h"
#include "opendal.h"
#include "stdio.h"

int main()
{
    /* Initialize a operator for "memory" backend, with no options */
    opendal_result_operator_new result = opendal_operator_new("memory", 0);
    assert(result.operator_ptr != NULL);
    assert(result.error == NULL);

    /* Prepare some data to be written */
    opendal_bytes data = {
        .data = (uint8_t*)"this_string_length_is_24",
        .len = 24,
    };

    /* Write this into path "/testpath" */
    opendal_error *error = opendal_operator_write(op, "/testpath", &data);
    assert(error == NULL);

    /* We can read it out, make sure the data is the same */
    opendal_result_read r = opendal_operator_read(op, "/testpath");
    opendal_bytes read_bytes = r.data;
    assert(r.error == NULL);
    assert(read_bytes.len == 24);

    /* Lets print it out */
    for (int i = 0; i < 24; ++i) {
        printf("%c", read_bytes.data[i]);
    }
    printf("\n");

    /* the opendal_bytes read is heap allocated, please free it */
    opendal_bytes_free(&read_bytes);

    /* the operator_ptr is also heap allocated */
    opendal_operator_free(&op);
}

```

For more examples, please refer to `./examples`

## Prerequisites[​](#prerequisites "Direct link to Prerequisites")

To build OpenDAL C binding, the following is all you need:

* A compiler that supports **C11** and **C++14**, _e.g._ clang and gcc
* To format the code, you need to install **clang-format**  
   * The `opendal.h` is not formatted by hands when you contribute, please do not format the file. **Use `make format` only.**  
   * If your contribution is related to the files under `./tests`, you may format it before submitting your pull request. But notice that different versions of `clang-format` may format the files differently.
* (optional) **Doxygen** need to be installed to generate documentations.

For Ubuntu and Debian:

```
# install C/C++ toolchain
sudo apt install -y build-essential

# install clang-format
sudo apt install clang-format

# install and build GTest library under /usr/lib and softlink to /usr/local/lib
sudo apt-get install libgtest-dev

# install CMake
sudo apt-get install cmake

# install Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

```

## Makefile[​](#makefile "Direct link to Makefile")

* To **build the library and header file**.  
```  
mkdir -p build && cd build  
cmake ..  
make  
```  
   * The header file `opendal.h` is under `./include`  
   * The library is under `../../target/debug` after building.  
   * use `FEATURES` to enable services, like `cmake .. -DFEATURES="opendal/services-memory,opendal/services-fs"`
* To **clean** the build results.  
```  
cargo clean  
cd build && make clean  
```
* To build and run the **tests**. (Note that you need to install Valgrind and GTest)  
```  
cd build  
make tests && ./tests  
```
* To build the **examples**  
```  
cd build  
make basic error_handle  
```

## Documentation[​](#documentation "Direct link to Documentation")

The documentation index page source is under `./docs/doxygen/html/index.html`. If you want to build the documentations yourself, you could use

```
# this requires you to install doxygen
make doc

```

## Used by[​](#used-by "Direct link to Used by")

Check out the [users](https://github.com/apache/opendal/blob/main/bindings/c/users.md) list for more details on who is using OpenDAL.

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/cpp/
---
# Cpp 🚧 | Apache OpenDAL™

# Cpp 🚧

## Apache OpenDAL™ CPP Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/cpp/)

> **Note**: This C++ binding follows the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html) for consistent and maintainable code.

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

Documents: [![Documents](https://img.shields.io/badge/opendal-cpp-blue?logo=Apache&logoColor=red)](https://opendal.apache.org/docs/cpp/)

## Example[​](#example "Direct link to Example")

```
#include "opendal.hpp"
#include <vector>

int main() {
    auto op = opendal::Operator("memory");
    std::vector<uint8_t> data = {1, 2, 3, 4, 5};
    op.Write("test", data);
    auto result = op.Read("test");  // result == data
}

```

More examples can be found [here](../../examples/cpp).

## Using[​](#using "Direct link to Using")

### CMake[​](#cmake "Direct link to CMake")

You can use `FetchContent` to add OpenDAL to your project.

```
FetchContent_Declare(
  opendal-cpp
  GIT_REPOSITORY https://github.com/apache/opendal.git
  GIT_TAG        v0.40.0
  SOURCE_SUBDIR  bindings/cpp
)
FetchContent_MakeAvailable(opendal-cpp)

```

Or you can download the source code and add it to your project.

```
mkdir third_party
cd third_party
git clone https://github.com/apache/opendal.git
git checkout v0.40.0

```

```
add_subdirectory(third_party/opendal/bindings/cpp)

```

Now you can use OpenDAL in your project.

```
target_link_libraries(your_target opendal_cpp)

```

### Others[​](#others "Direct link to Others")

Support for more package managers is coming soon!

## Compiling[​](#compiling "Direct link to Compiling")

### Prerequisites[​](#prerequisites "Direct link to Prerequisites")

* CMake >= 3.22
* C++ compiler with C++17 support
* **Currently only Clang or AppleClang are supported**

### Build[​](#build "Direct link to Build")

```
mkdir build
cd build
# Add -DOPENDAL_DEV=ON to make development environment for OpenDAL
cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
make

```

### Dev Setup[​](#dev-setup "Direct link to Dev Setup")

We provide a default VSCode configuration in `.vscode/settings.json` at the project root. After installing the clangd extension in VSCode, restart the editor to enable proper code completion and IntelliSense support.

### Test[​](#test "Direct link to Test")

You should build the project with `OPENDAL_ENABLE_TESTING` option. Then run:

```
make test

```

### Docs[​](#docs "Direct link to Docs")

You should build the project with `OPENDAL_ENABLE_DOCUMENTATION` option. Then run:

```
make docs

```

### CMake Options[​](#cmake-options "Direct link to CMake Options")

* `OPENDAL_DEV`: Enable development environment for OpenDAL. It will enable most development options. With this option, you don't need to set other options. Default: `OFF`
* `OPENDAL_ENABLE_ADDRESS_SANITIZER`: Enable address sanitizer. Default: `OFF`
* `OPENDAL_ENABLE_DOCUMENTATION`: Enable documentation. Default: `OFF`
* `OPENDAL_DOCS_ONLY`: Only build documentation. Default: `OFF`
* `OPENDAL_ENABLE_TESTING`: Enable testing. Default: `OFF`
* `OPENDAL_ENABLE_ASYNC`: Enable async support. Requires Clang or AppleClang with C++20\. Default: `OFF`
* `OPENDAL_FEATURES`: Specify OpenDAL services to include, like `"opendal/services-s3,opendal/services-memory"`. Default: `""`

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/d/
---
# D 🚧 | Apache OpenDAL™

# D 🚧

## Apache OpenDAL™ D Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/d)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Build[​](#build "Direct link to Build")

To compile OpenDAL d binding from source code, you need:

* [dmd/ldc/gdc](https://dlang.org/download)

```
# Test a specific backend
export OPENDAL_TEST=memory
# build libopendal_c (underneath call make -C ../c)
dub build -b release
# build and run unit tests
dub test

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/dart/
---
# Dart 🚧 | Apache OpenDAL™

# Dart 🚧

## Apache OpenDAL™ Dart Binding (WIP)

## Useful Links[​](#useful-links "Direct link to Useful Links")

* [Examples](https://github.com/apache/opendal/blob/main/bindings/dart/examples)

## Usage[​](#usage "Direct link to Usage")

Api is designed to be like stdlib style.

This is stdlib

```
import 'dart:io';

void main() async {
  final file = File('file.txt');
  var is_exists = await file.exists();
  print(is_exists);
}

```

This is opendal

```
import 'package:opendal/opendal.dart';

void main() async {
  final storage = await Storage.init(schemeStr: "fs", map: {"root": "/tmp"});
  final File = storage.initFile();
  // drop-in
  final file = File('file.txt');
  var is_exists = await file.exists();
  print(is_exists);
}


```

## Test[​](#test "Direct link to Test")

```
dart run tests/opendal_test.dart

```

## Development[​](#development "Direct link to Development")

```
flutter pub get
flutter_rust_bridge_codegen generate
cd rust
cargo build -r --target x86_64-unknown-linux-gnu # change to your arch, refer to https://doc.rust-lang.org/beta/rustc/platform-support.html

```

## Update generated code[​](#update-generated-code "Direct link to Update generated code")

This binding uses <https://github.com/fzyzcjy/flutter%5Frust%5Fbridge>, when updating the codegen. First check `FLUTTER_RUST_BRIDGE_CODEGEN_VERSION`, then pin the version of `flutter_rust_bridge` in `pubspec.yaml` and `rust/Cargo.toml`. Make sure the runtime versions are matched.

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/dotnet/
---
# Dotnet 🚧 | Apache OpenDAL™

# Dotnet 🚧

## Apache OpenDAL™ .Net Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/dotnet)

This binding is currently under development. Please check back later.

## Build[​](#build "Direct link to Build")

To compile OpenDAL .NET binding from source code, you need:

* [.NET](https://dotnet.microsoft.com/en-us/download/dotnet) version 7.0

```
cargo build
dotnet build
dotnet test

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/go/
---
# Go | Apache OpenDAL™

# Go

## Apache OpenDAL™ Go Binding

[![](https://img.shields.io/badge/status-released-blue)](https://pkg.go.dev/github.com/apache/opendal/bindings/go) [![Go Reference](https://pkg.go.dev/badge/github.com/apache/opendal/bindings/go.svg)](https://pkg.go.dev/github.com/apache/opendal/bindings/go)

opendal-go is a **Native** support Go binding without CGO enabled and is built on top of opendal-c.

```
go get github.com/apache/opendal/bindings/go@latest

```

opendal-go requires **libffi** to be installed.

## Basic Usage[​](#basic-usage "Direct link to Basic Usage")

```
package main

import (
	"fmt"
	"github.com/apache/opendal-go-services/memory"
	opendal "github.com/apache/opendal/bindings/go"
)

func main() {
	// Initialize a new in-memory operator
	op, err := opendal.NewOperator(memory.Scheme, opendal.OperatorOptions{})
	if err != nil {
		panic(err)
	}
	defer op.Close()

	// Write data to a file named "test"
	err = op.Write("test", []byte("Hello opendal go binding!"))
	if err != nil {
		panic(err)
	}

	// Read data from the file "test"
	data, err := op.Read("test")
	if err != nil {
		panic(err)
	}
	fmt.Printf("Read content: %s\n", data)

	// List all entries under the root directory "/"
	lister, err := op.List("/")
	if err != nil {
		panic(err)
	}
	defer lister.Close()

	// Iterate through all entries
	for lister.Next() {
		entry := lister.Entry()

		// Get entry name (not used in this example)
		_ = entry.Name()

		// Get metadata for the current entry
		meta, _ := op.Stat(entry.Path())

		// Print file size
		fmt.Printf("Size: %d bytes\n", meta.ContentLength())

		// Print last modified time
		fmt.Printf("Last modified: %s\n", meta.LastModified())

		// Check if the entry is a directory or a file
		fmt.Printf("Is directory: %v, Is file: %v\n", meta.IsDir(), meta.IsFile())
	}

	// Check for any errors that occurred during iteration
	if err := lister.Error(); err != nil {
		panic(err)
	}

	// Copy a file
	op.Copy("test", "test_copy")

	// Rename a file
	op.Rename("test", "test_rename")

	// Delete a file
	op.Delete("test_rename")
}

```

## Run Tests[​](#run-tests "Direct link to Run Tests")

### Behavior Tests[​](#behavior-tests "Direct link to Behavior Tests")

```
cd tests/behavior_tests
# Test a specific backend
export OPENDAL_TEST=memory
# Run all tests
CGO_ENABLE=0 go test -v -run TestBehavior
# Run specific test
CGO_ENABLE=0 go test -v -run TestBehavior/Write
# Run synchronously
CGO_ENABLE=0 GOMAXPROCS=1 go test -v -run TestBehavior

```

### Benchmark[​](#benchmark "Direct link to Benchmark")

```
cd tests/behavior_tests
# Benchmark a specific backend
export OPENDAL_TEST=memory

go test -bench .

```

 A benchmark between OpenDAL Go binding and aws-sdk-go on minio S3 compatible storage

```
goos: linux
goarch: amd64
pkg: opendal_test
cpu: AMD EPYC 7763 64-Core Processor                
BenchmarkWrite
BenchmarkWrite/4KiB/OpenDAL
BenchmarkWrite/4KiB/OpenDAL-4         	     405	   3430652 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/OpenDAL-4         	     313	   3781825 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/OpenDAL-4         	     346	   3354802 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/OpenDAL-4         	     397	   3374467 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/OpenDAL-4         	     364	   6171386 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/OpenDAL-4         	     388	   3789795 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4KiB/AWS_S3
BenchmarkWrite/4KiB/AWS_S3-4          	     384	   3716060 ns/op	   62929 B/op	     312 allocs/op
BenchmarkWrite/4KiB/AWS_S3-4          	     402	   3145797 ns/op	   62077 B/op	     312 allocs/op
BenchmarkWrite/4KiB/AWS_S3-4          	     372	   3050911 ns/op	   61902 B/op	     312 allocs/op
BenchmarkWrite/4KiB/AWS_S3-4          	     400	   3081028 ns/op	   61556 B/op	     312 allocs/op
BenchmarkWrite/4KiB/AWS_S3-4          	     342	   3111741 ns/op	   61970 B/op	     312 allocs/op
BenchmarkWrite/4KiB/AWS_S3-4          	     464	   2933844 ns/op	   61617 B/op	     312 allocs/op
BenchmarkWrite/256KiB/OpenDAL
BenchmarkWrite/256KiB/OpenDAL-4       	     228	   6253966 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/OpenDAL-4       	     190	   5859882 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/OpenDAL-4       	     216	   6008253 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/OpenDAL-4       	     200	   5958440 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/OpenDAL-4       	     193	   5658798 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/OpenDAL-4       	     210	   6250594 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/256KiB/AWS_S3
BenchmarkWrite/256KiB/AWS_S3-4        	     208	   5665223 ns/op	   90323 B/op	     312 allocs/op
BenchmarkWrite/256KiB/AWS_S3-4        	     196	   5368602 ns/op	   88719 B/op	     312 allocs/op
BenchmarkWrite/256KiB/AWS_S3-4        	     218	   6108315 ns/op	   90784 B/op	     312 allocs/op
BenchmarkWrite/256KiB/AWS_S3-4        	     217	   5828966 ns/op	   90379 B/op	     312 allocs/op
BenchmarkWrite/256KiB/AWS_S3-4        	     210	   6447429 ns/op	   90981 B/op	     312 allocs/op
BenchmarkWrite/256KiB/AWS_S3-4        	     177	   6323915 ns/op	   91548 B/op	     313 allocs/op
BenchmarkWrite/4MiB/OpenDAL
BenchmarkWrite/4MiB/OpenDAL-4         	      62	  19049500 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/OpenDAL-4         	      54	  19271521 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/OpenDAL-4         	      69	  17849900 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/OpenDAL-4         	      73	  18117693 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/OpenDAL-4         	      74	  18249816 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/OpenDAL-4         	      62	  19556730 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/4MiB/AWS_S3
BenchmarkWrite/4MiB/AWS_S3-4          	      43	  29514084 ns/op	   92211 B/op	     320 allocs/op
BenchmarkWrite/4MiB/AWS_S3-4          	      39	  29297735 ns/op	   92514 B/op	     320 allocs/op
BenchmarkWrite/4MiB/AWS_S3-4          	      42	  28956593 ns/op	   92282 B/op	     320 allocs/op
BenchmarkWrite/4MiB/AWS_S3-4          	      42	  29218821 ns/op	   92282 B/op	     320 allocs/op
BenchmarkWrite/4MiB/AWS_S3-4          	      40	  28988214 ns/op	   91391 B/op	     320 allocs/op
BenchmarkWrite/4MiB/AWS_S3-4          	      43	  28668319 ns/op	   91242 B/op	     320 allocs/op
BenchmarkWrite/16MiB/OpenDAL
BenchmarkWrite/16MiB/OpenDAL-4        	      21	  53528117 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/OpenDAL-4        	      21	  55328986 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/OpenDAL-4        	      21	  54221620 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/OpenDAL-4        	      20	  54044030 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/OpenDAL-4        	      21	  53692610 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/OpenDAL-4        	      21	  53288370 ns/op	     384 B/op	      10 allocs/op
BenchmarkWrite/16MiB/AWS_S3
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  99294840 ns/op	   99850 B/op	     322 allocs/op
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  97405067 ns/op	   99850 B/op	     322 allocs/op
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  97906212 ns/op	   99848 B/op	     322 allocs/op
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  98766864 ns/op	   96378 B/op	     322 allocs/op
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  97967605 ns/op	   99850 B/op	     322 allocs/op
BenchmarkWrite/16MiB/AWS_S3-4         	      12	  97842268 ns/op	   96376 B/op	     322 allocs/op
BenchmarkRead
BenchmarkRead/4KiB/OpenDAL
BenchmarkRead/4KiB/OpenDAL-4          	     972	   1217197 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/OpenDAL-4          	     985	   1226752 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/OpenDAL-4          	     982	   1216827 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/OpenDAL-4          	     987	   1227682 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/OpenDAL-4          	     987	   1214420 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/OpenDAL-4          	     987	   1215074 ns/op	    4760 B/op	      15 allocs/op
BenchmarkRead/4KiB/AWS_S3
BenchmarkRead/4KiB/AWS_S3-4           	    1594	    759864 ns/op	   34988 B/op	     344 allocs/op
BenchmarkRead/4KiB/AWS_S3-4           	    1605	    751628 ns/op	   34990 B/op	     344 allocs/op
BenchmarkRead/4KiB/AWS_S3-4           	    1620	    744649 ns/op	   34991 B/op	     344 allocs/op
BenchmarkRead/4KiB/AWS_S3-4           	    1623	    752885 ns/op	   34994 B/op	     344 allocs/op
BenchmarkRead/4KiB/AWS_S3-4           	    1629	    742307 ns/op	   34991 B/op	     344 allocs/op
BenchmarkRead/4KiB/AWS_S3-4           	    1622	    750455 ns/op	   34992 B/op	     344 allocs/op
BenchmarkRead/256KiB/OpenDAL
BenchmarkRead/256KiB/OpenDAL-4        	     741	   1612259 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/OpenDAL-4        	     727	   1633753 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/OpenDAL-4        	     751	   1619770 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/OpenDAL-4        	     756	   1619435 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/OpenDAL-4        	     750	   1629211 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/OpenDAL-4        	     757	   1611646 ns/op	  262812 B/op	      15 allocs/op
BenchmarkRead/256KiB/AWS_S3
BenchmarkRead/256KiB/AWS_S3-4         	     736	   1655133 ns/op	 1209847 B/op	     365 allocs/op
BenchmarkRead/256KiB/AWS_S3-4         	     735	   1673714 ns/op	 1209874 B/op	     365 allocs/op
BenchmarkRead/256KiB/AWS_S3-4         	     735	   1653903 ns/op	 1209852 B/op	     365 allocs/op
BenchmarkRead/256KiB/AWS_S3-4         	     728	   1643222 ns/op	 1209855 B/op	     365 allocs/op
BenchmarkRead/256KiB/AWS_S3-4         	     726	   1674202 ns/op	 1209842 B/op	     365 allocs/op
BenchmarkRead/256KiB/AWS_S3-4         	     717	   1656092 ns/op	 1209876 B/op	     365 allocs/op
BenchmarkRead/4MiB/OpenDAL
BenchmarkRead/4MiB/OpenDAL-4          	     250	   4933426 ns/op	 4194991 B/op	      15 allocs/op
BenchmarkRead/4MiB/OpenDAL-4          	     255	   4874283 ns/op	 4194991 B/op	      15 allocs/op
BenchmarkRead/4MiB/OpenDAL-4          	     252	   4769956 ns/op	 4194992 B/op	      16 allocs/op
BenchmarkRead/4MiB/OpenDAL-4          	     244	   4800674 ns/op	 4194992 B/op	      16 allocs/op
BenchmarkRead/4MiB/OpenDAL-4          	     242	   4826974 ns/op	 4194992 B/op	      15 allocs/op
BenchmarkRead/4MiB/OpenDAL-4          	     254	   4882666 ns/op	 4194996 B/op	      16 allocs/op
BenchmarkRead/4MiB/AWS_S3
BenchmarkRead/4MiB/AWS_S3-4           	     122	  10379507 ns/op	21133764 B/op	     388 allocs/op
BenchmarkRead/4MiB/AWS_S3-4           	     100	  10838399 ns/op	21133778 B/op	     389 allocs/op
BenchmarkRead/4MiB/AWS_S3-4           	      92	  11831700 ns/op	21133738 B/op	     388 allocs/op
BenchmarkRead/4MiB/AWS_S3-4           	     100	  10002235 ns/op	21133764 B/op	     388 allocs/op
BenchmarkRead/4MiB/AWS_S3-4           	     100	  10416467 ns/op	21133731 B/op	     388 allocs/op
BenchmarkRead/4MiB/AWS_S3-4           	     100	  10452328 ns/op	21133719 B/op	     388 allocs/op
BenchmarkRead/16MiB/OpenDAL
BenchmarkRead/16MiB/OpenDAL-4         	      81	  14654347 ns/op	16777903 B/op	      15 allocs/op
BenchmarkRead/16MiB/OpenDAL-4         	      78	  14977822 ns/op	16777908 B/op	      16 allocs/op
BenchmarkRead/16MiB/OpenDAL-4         	      81	  14833921 ns/op	16777906 B/op	      16 allocs/op
BenchmarkRead/16MiB/OpenDAL-4         	      76	  14663855 ns/op	16777906 B/op	      16 allocs/op
BenchmarkRead/16MiB/OpenDAL-4         	      75	  14545209 ns/op	16777906 B/op	      16 allocs/op
BenchmarkRead/16MiB/OpenDAL-4         	      80	  14585250 ns/op	16777905 B/op	      16 allocs/op
BenchmarkRead/16MiB/AWS_S3
BenchmarkRead/16MiB/AWS_S3-4          	      52	  24826707 ns/op	102660545 B/op	     398 allocs/op
BenchmarkRead/16MiB/AWS_S3-4          	      46	  24588321 ns/op	102660529 B/op	     397 allocs/op
BenchmarkRead/16MiB/AWS_S3-4          	      44	  26526367 ns/op	102660527 B/op	     397 allocs/op
BenchmarkRead/16MiB/AWS_S3-4          	      44	  26996660 ns/op	102660522 B/op	     397 allocs/op
BenchmarkRead/16MiB/AWS_S3-4          	      42	  26319939 ns/op	102660552 B/op	     398 allocs/op
BenchmarkRead/16MiB/AWS_S3-4          	      45	  25286454 ns/op	102660542 B/op	     398 allocs/op
PASS
ok  	opendal_test	147.053s

```

**Diff** with [benchstat](https://pkg.go.dev/golang.org/x/perf/cmd/benchstat)

```
benchstat aws.txt opendal.txt
goos: linux
goarch: amd64
pkg: opendal_test
cpu: AMD EPYC 7763 64-Core Processor                
             │    aws.txt    │             opendal.txt              │
             │    sec/op     │    sec/op      vs base               │
Write/4KiB      3.096m ± 20%    3.606m ± 71%  +16.47% (p=0.015 n=6)
Write/256KiB    5.969m ± 10%    5.983m ±  5%        ~ (p=1.000 n=6)
Write/4MiB      29.10m ±  1%    18.65m ±  5%  -35.92% (p=0.002 n=6)
Write/16MiB     97.94m ±  1%    53.87m ±  3%  -45.00% (p=0.002 n=6)
Read/4KiB       751.0µ ±  1%   1217.0µ ±  1%  +62.04% (p=0.002 n=6)
Read/256KiB     1.656m ±  1%    1.620m ±  1%   -2.18% (p=0.002 n=6)
Read/4MiB      10.434m ± 13%    4.851m ±  2%  -53.51% (p=0.002 n=6)
Read/16MiB      25.80m ±  5%    14.66m ±  2%  -43.19% (p=0.002 n=6)
geomean         8.050m          6.461m        -19.73%

             │    aws.txt    │             opendal.txt             │
             │     B/op      │     B/op      vs base               │
Write/4KiB      61936.0 ± 2%     384.0 ± 0%  -99.38% (p=0.002 n=6)
Write/256KiB    90581.5 ± 2%     384.0 ± 0%  -99.58% (p=0.002 n=6)
Write/4MiB      92246.5 ± 1%     384.0 ± 0%  -99.58% (p=0.002 n=6)
Write/16MiB     99849.0 ± 3%     384.0 ± 0%  -99.62% (p=0.002 n=6)
Read/4KiB      34.171Ki ± 0%   4.648Ki ± 0%  -86.40% (p=0.002 n=6)
Read/256KiB    1181.5Ki ± 0%   256.7Ki ± 0%  -78.28% (p=0.002 n=6)
Read/4MiB      20.155Mi ± 0%   4.001Mi ± 0%  -80.15% (p=0.002 n=6)
Read/16MiB      97.90Mi ± 0%   16.00Mi ± 0%  -83.66% (p=0.002 n=6)
geomean         500.3Ki        14.12Ki       -97.18%

             │   aws.txt   │            opendal.txt            │
             │  allocs/op  │ allocs/op   vs base               │
Write/4KiB     312.00 ± 0%   10.00 ± 0%  -96.79% (p=0.002 n=6)
Write/256KiB   312.00 ± 0%   10.00 ± 0%  -96.79% (p=0.002 n=6)
Write/4MiB     320.00 ± 0%   10.00 ± 0%  -96.88% (p=0.002 n=6)
Write/16MiB    322.00 ± 0%   10.00 ± 0%  -96.89% (p=0.002 n=6)
Read/4KiB      344.00 ± 0%   15.00 ± 0%  -95.64% (p=0.002 n=6)
Read/256KiB    365.00 ± 0%   15.00 ± 0%  -95.89% (p=0.002 n=6)
Read/4MiB      388.00 ± 0%   15.50 ± 3%  -96.01% (p=0.002 n=6)
Read/16MiB     397.50 ± 0%   16.00 ± 6%  -95.97% (p=0.002 n=6)
geomean         343.6        12.40       -96.39%

```

## Capabilities[​](#capabilities "Direct link to Capabilities")

* OperatorInfo
* Stat  
   * Metadata
* IsExist
* Read  
   * Read  
   * Reader -- implement as `io.ReadSeekCloser`
* Write  
   * Write  
   * Writer -- implement as `io.WriteCloser`
* Delete
* CreateDir
* Lister  
   * Entry  
   * Metadata -- Need support from the C binding
* Copy
* Rename

## Development[​](#development "Direct link to Development")

The guide is based on Linux and Windows. For other platforms, please adjust the commands accordingly.

To develop the Go binding, you need to have the following dependencies installed:

* zstd
* Rust toolchain
* Go
* (Required for Windows) libffi-8.dll in the root of the workspace directory

We use `go workspace` to manage and build the dependencies. To set up the workspace, run the following commands:

 For Linux, macOS and Windows (MSVC)

  
```
mkdir opendal_workspace
cd opendal_workspace
git clone --depth 1 git@github.com:apache/opendal.git
git clone --depth 1 git@github.com:apache/opendal-go-services.git

go work init
go work use ./opendal/bindings/go
go work use ./opendal/bindings/go/tests/behavior_tests

cp opendal/bindings/go/Makefile .

cd -

```

To build and run tests, run the following commands:

```
cd opendal_workspace

# specify the backend to test
export OPENDAL_TEST=fs
export OPENDAL_FS_ROOT=/tmp/opendal

make tests

cd -

```

To run the benchmarks, you can use the following command:

```
make bench

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/haskell/
---
# Haskell 🚧 | Apache OpenDAL™

# Haskell 🚧

## Apache OpenDAL™ Haskell Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/haskell)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Example[​](#example "Direct link to Example")

Basic usage

```
import OpenDAL

main :: IO ()
main = do
  Right op <- newOperator "memory"
  runOp op operation
  where
    operation = do
      writeOp op "key1" "value1"
      writeOp op "key2" "value2"
      value1 <- readOp op "key1"
      value2 <- readOp op "key2"

```

Use logger

```
import OpenDAL
import Colog (simpleMessageAction)

main :: IO ()
main = do
  Right op <- newOperator "memory" {ocLogAction = Just simpleMessageAction}
  return ()

```

## Build[​](#build "Direct link to Build")

```
cabal build

```

## Test[​](#test "Direct link to Test")

```
cabal test

```

## Doc[​](#doc "Direct link to Doc")

To generate the documentation:

```
cabal haddock

```

If your `cabal` version is greater than `3.8`, you can use `cabal haddock --open` to open the documentation in your browser. Otherwise, you can visit the documentation from `dist-newstyle/build/$ARCH/ghc-$VERSION/opendal-$VERSION/doc/html/opendal/index.html`.

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/java/
---
# Java | Apache OpenDAL™

# Java

## Apache OpenDAL™ Java Bindings

[![](https://img.shields.io/badge/status-released-blue)](https://central.sonatype.com/search?q=opendal&smo=true) [![Maven Central](https://img.shields.io/maven-central/v/org.apache.opendal/opendal.svg?logo=Apache+Maven&logoColor=blue)](https://central.sonatype.com/search?q=opendal&smo=true) [![Website](https://img.shields.io/badge/opendal-OpenDAL_Website-red?logo=Apache&logoColor=red)](https://opendal.apache.org/docs/java/)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Useful Links[​](#useful-links "Direct link to Useful Links")

* [Documentation](https://opendal.apache.org/docs/java/)
* [Upgrade Guide](https://github.com/apache/opendal/blob/main/bindings/java/upgrade.md)

## Example[​](#example "Direct link to Example")

```
import java.util.HashMap;
import java.util.Map;
import org.apache.opendal.AsyncOperator;
import org.apache.opendal.Operator;

public class Main {
  public static void main(String[] args) {
    final Map<String, String> conf = new HashMap<>();
    conf.put("root", "/tmp");

    try (AsyncOperator op = AsyncOperator.of("fs", conf)) {
      op.write("/path/to/data", "Hello world").join();
      System.out.println(new String(op.read("/path/to/data").join()));
    }
  }
}

```

## Getting Started[​](#getting-started "Direct link to Getting Started")

This project is built upon the native OpenDAL lib. And it is released for multiple platforms that you can use a classifier to specify the platform you are building the application on.

### Maven[​](#maven "Direct link to Maven")

Generally, you can first add the `os-maven-plugin` for automatically detect the classifier based on your platform:

```
<build>
<extensions>
  <extension>
    <groupId>kr.motd.maven</groupId>
    <artifactId>os-maven-plugin</artifactId>
    <version>1.7.0</version>
  </extension>
</extensions>
</build>

```

Then add the dependency to `opendal` as following:

```
<dependencies>
  <dependency>
    <groupId>org.apache.opendal</groupId>
    <artifactId>opendal</artifactId>
    <version>${opendal.version}</version>
  </dependency>
  <dependency>
    <groupId>org.apache.opendal</groupId>
    <artifactId>opendal</artifactId>
    <version>${opendal.version}</version>
    <classifier>${os.detected.classifier}</classifier>
  </dependency>
</dependencies>

```

### Gradle[​](#gradle "Direct link to Gradle")

For Gradle, you can first add the `com.google.osdetector` for automatically detect the classifier based on your platform:

```
plugins {
    id "com.google.osdetector" version "1.7.3"
}

```

Then add the dependency to \`opendal as following:

```
dependencies {
    implementation "org.apache.opendal:opendal:$opendalVersion"
    implementation "org.apache.opendal:opendal:$opendalVersion:$osdetector.classifier"
}

```

### Classified library[​](#classified-library "Direct link to Classified library")

Note that the dependency without classifier ships all classes and resources except the "opendal\_java" shared library. And those with classifier bundle only the shared library.

For downstream usage, it's recommended:

* Depend on the one without classifier to write code;
* Depend on the classified ones with "test" for testing.

To load the shared library correctly, you can choose one of the following approaches:

* Append the classified JARs to the classpath at the runtime;
* Depend on the classified JARs and build a fat JAR (You may need to depend on all the provided classified JARs for running on multiple platforms);
* Build your own "opendal\_java" shared library and specify "-Djava.library.path" to the folder containing that shared library.

## Build[​](#build "Direct link to Build")

This project provides OpenDAL Java bindings with artifact name `opendal`. It depends on JDK 8 or later.

You can use Maven to build both Rust dynamic lib and JAR files with one command now:

```
./mvnw clean package -DskipTests=true

```

## Run tests[​](#run-tests "Direct link to Run tests")

Currently, all tests are written in Java.

You can run the base tests with the following command:

```
./mvnw clean verify

```

## Code style[​](#code-style "Direct link to Code style")

This project uses [spotless](https://github.com/diffplug/spotless) for code formatting so that all developers share a consistent code style without bikeshedding on it.

You can apply the code style with the following command::

```
./mvnw spotless:apply

```

## Run behavior tests[​](#run-behavior-tests "Direct link to Run behavior tests")

Services behavior tests read necessary configs from env vars or the `.env` file.

You can copy [.env.example](/.env.example) to `${project.rootdir}/.env` and change the values on need, or directly set env vars with `export KEY=VALUE`.

Take `fs` for example, we need to enable bench on `fs` on `/tmp/`:

```
OPENDAL_TEST=fs
OPENDAL_FS_ROOT=/tmp/

```

You can run service behavior tests of enabled with the following command:

```
./mvnw test -Dtest="behavior.*Test"

```

Remember to enable the necessary features via `-Dcargo-build.features=services-xxx` when running specific service test:

```
export OPENDAL_TEST=redis
export OPENDAL_REDIS_ENDPOINT=tcp://127.0.0.1:6379
export OPENDAL_REDIS_ROOT=/
export OPENDAL_REDIS_DB=0
./mvnw test -Dtest="behavior.*Test" -Dcargo-build.features=services-redis

```

## Used by[​](#used-by "Direct link to Used by")

Check out the [users](https://github.com/apache/opendal/blob/main/bindings/java/users.md) list for more details on who is using OpenDAL.

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/lua/
---
# Lua 🚧 | Apache OpenDAL™

# Lua 🚧

## Apache OpenDAL™ Lua Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/lua/)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Example[​](#example "Direct link to Example")

```
local opendal = require("opendal")

local op, err = opendal.operator.new("fs",{root="/tmp"})
if err ~= nil then
    print(err)
    return
end
op:write("test.txt","hello world")
print("read: ", op:read("test.txt"))

```

## Lua version[​](#lua-version "Direct link to Lua version")

You have to enable one of the features: lua54, lua53, lua52, lua51, luajit(52) or luau in `Cargo.toml`, according to the chosen Lua version. Default Lua version is 5.2.

## Build from source[​](#build-from-source "Direct link to Build from source")

1. Build OpenDAL Lua Interface

```
$ cd bindings/lua
$ cargo build --package opendal-lua --release

```

1. Install opendal Lua library

```
# copy to lua share library directory
# default lua5.2 share library directory is /usr/lib/lua/5.2
$ cp ../../target/release/libopendal_lua.so /usr/lib/lua/5.2/opendal.so

```

## Install from LuaRocks[​](#install-from-luarocks "Direct link to Install from LuaRocks")

```
$ luarocks make

```

## Usage[​](#usage "Direct link to Usage")

```
$ lua5.2 example/fs.lua
read:   hello world

```

## Test[​](#test "Direct link to Test")

```
$ busted -o gtest test/opendal_test.lua
[==========] Running tests from scanned files.
[----------] Global test environment setup.
[----------] Running tests from test/opendal_test.lua
[ RUN      ] test/opendal_test.lua @ 24: opendal unit test opendal fs schema operator function in fs schema
[       OK ] test/opendal_test.lua @ 24: opendal unit test opendal fs schema operator function in fs schema (1.52 ms)
[ RUN      ] test/opendal_test.lua @ 36: opendal unit test opendal fs schema meta function in fs schema
[       OK ] test/opendal_test.lua @ 36: opendal unit test opendal fs schema meta function in fs schema (0.24 ms)
[----------] 2 tests from test/opendal_test.lua (3.47 ms total)

[----------] Global test environment teardown.
[==========] 2 tests from 1 test file ran. (3.54 ms total)
[  PASSED  ] 2 tests.

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/nodejs/
---
# Node.js | Apache OpenDAL™

# Node.js

## Apache OpenDAL™ Node.js Binding

[![](https://img.shields.io/badge/status-released-blue)](https://www.npmjs.com/package/opendal) [![npm](https://img.shields.io/npm/v/opendal.svg?logo=npm)](https://www.npmjs.com/package/opendal) [![Website](https://img.shields.io/badge/opendal-OpenDAL_Website-red?logo=Apache&logoColor=red)](https://opendal.apache.org/docs/nodejs/)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Useful Links[​](#useful-links "Direct link to Useful Links")

* [Documentation](https://opendal.apache.org/docs/nodejs/)
* [Upgrade Guide](https://github.com/apache/opendal/blob/main/bindings/nodejs/upgrade.md)

## Installation[​](#installation "Direct link to Installation")

```
npm install opendal

```

## Docs[​](#docs "Direct link to Docs")

To build the docs locally, please run the following commands:

```
# Only need to run once unless you want to update the docs theme
pnpm run build:theme

# Build the docs
pnpm run docs

```

## Tests[​](#tests "Direct link to Tests")

Services behavior tests read necessary configs from env vars or the `.env` file.

You can copy [.env.example](/.env.example) to `$(pwd)/.env` and change the values on need, or directly set env vars with `export KEY=VALUE`.

Take `fs` for example, we need to enable bench on `fs` on `/tmp`:

```
OPENDAL_TEST=fs
OPENDAL_FS_ROOT=/tmp

```

You can run service behavior tests of enabled with the following command:

```
pnpm build && pnpm test

```

## Usage[​](#usage "Direct link to Usage")

```
import { Operator } from "opendal";

async function main() {
  const op = new Operator("fs", { root: "/tmp" });
  await op.write("test", "Hello, World!");
  const bs = await op.read("test");
  console.log(new TextDecoder().decode(bs));
  const meta = await op.stat("test");
  console.log(`contentLength: ${meta.contentLength}`);
}

main();

```

## Usage with Next.js[​](#usage-with-nextjs "Direct link to Usage with Next.js")

Config automatically be bundled by [Next.js](https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages).

```
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ["opendal"],
};

module.exports = nextConfig;

```

## Contributing[​](#contributing "Direct link to Contributing")

* Start with [Contributing Guide](CONTRIBUTING.md).
* Submit [Issues](https://github.com/apache/opendal/issues/new) for bug report or feature requests.
* Asking questions in the [Discussions](https://github.com/apache/opendal/discussions/new?category=q-a).  
   * Talk to community at [Discord](https://opendal.apache.org/discord).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/ocaml/
---
# OCaml 🚧 | Apache OpenDAL™

# OCaml 🚧

## Apache OpenDAL™ OCaml Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/ocaml)

## Requirements[​](#requirements "Direct link to Requirements")

* OCaml version > 4.03 and < 5.0.0

## Contributing[​](#contributing "Direct link to Contributing")

### Setup[​](#setup "Direct link to Setup")

We recommend using `OPAM the OCaml Package Manager` to install and manage the OCaml environment.

#### Install OPAM[​](#install-opam "Direct link to Install OPAM")

The quickest way to get the latest opam up and working is to run this script:

```
bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"

```

Similarly, you can also use your distribution's package manager to install

##### Arch[​](#arch "Direct link to Arch")

```
pacman -S opam

```

##### Debian | Ubuntu[​](#debian--ubuntu "Direct link to Debian | Ubuntu")

```
apt-get install opam

```

#### macOS[​](#macos "Direct link to macOS")

```
brew install opam

```

#### Init OPAM[​](#init-opam "Direct link to Init OPAM")

_Do not put sudo in front of any opam commands. That would break your OCaml installation._

After Installing OPAM, we need to initialize it

For the general case, we can execute

```
opam init --bare -a -y

```

If you are using WSL1 on windows, run:

```
opam init --bare -a -y --disable-sandboxing

```

#### Create OPAM Switch[​](#create-opam-switch "Direct link to Create OPAM Switch")

Using opam, we can have multiple versions of ocaml at the same time; this is called switch.

Due to the upstream `ocaml-rs`, we currently do not support OCaml5, and recommend using the latest version of OCaml4 We can create use this command:

```
opam switch create opendal-ocaml4.14 ocaml-base-compiler.4.14.0

eval $(opam env)

```

#### Install OPAM Package[​](#install-opam-package "Direct link to Install OPAM Package")

OpenDAL does not depend on opam package except `ounit2` for testing. However, to facilitate development in an IDE such as vscode, it is usually necessary to install the following content

```
opam install -y utop odoc ounit2 ocaml-lsp-server ocamlformat ocamlformat-rpc

```

### Build[​](#build "Direct link to Build")

```
cd bindings/ocaml
dune build

```

### Test[​](#test "Direct link to Test")

To execute unit tests, we can simply use the following command:

```
cd bindings/ocaml
dune test

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/php/
---
# PHP 🚧 | Apache OpenDAL™

# PHP 🚧

## Apache OpenDAL™ PHP Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/php/)

## Example[​](#example "Direct link to Example")

```
use OpenDAL\Operator;

$op = new Operator("fs", ["root" => "/tmp"]);
$op->write("test.txt", "hello world");

echo $op->read("test.txt"); // hello world

```

## Requirements[​](#requirements "Direct link to Requirements")

* PHP 8.1+
* Composer

## Install Extension[​](#install-extension "Direct link to Install Extension")

We use [ext-php-rs](https://github.com/davidcole1340/ext-php-rs) to build PHP extensions natively in Rust, it's different from the traditional PHP extension development and cannot be installed using `pecl` or `phpize`. Before installing the extension, it is necessary to install Rust and Cargo. For instructions on how to install them, please refer to [Rust's website](https://www.rust-lang.org/tools/install).

1. Clone the repository

```
git clone git@github.com:apache/opendal.git

```

1. Build the opendal-php extension

```
cd opendal/bindings/php
cargo build

```

> don't forget to add `--release` flag for production use.

1. Enable extension for PHP Manually

```
cd opendal

# Linux
cp target/debug/libopendal_php.so $(php -r "echo ini_get('extension_dir');")/libopendal_php.so
echo "extension=libopendal_php.so" >> $(php -r "echo php_ini_loaded_file();")

# macOS
cp target/debug/libopendal_php.dylib $(php -r "echo ini_get('extension_dir');")/libopendal_php.dylib
echo "extension=libopendal_php.dylib" >> $(php -r "echo php_ini_loaded_file();")

# Windows
cp target/debug/libopendal_php.dll $(php -r "echo ini_get('extension_dir');")/libopendal_php.dll
echo "extension=libopendal_php.dll" >> $(php -r "echo php_ini_loaded_file();")

```

1. Enable extension for PHP using cargo-php

You can also use cargo-php directly to install the extension, see [cargo-php](https://davidcole1340.github.io/ext-php-rs/getting-started/cargo-php.html) for more details.

```
cargo install cargo-php
cd opendal/bindings/php
cargo php install

```

This command will automatically build the extension and copy it to the extension directory of the current PHP version.

1. Test

use `php -m` to check if the extension is installed successfully.

```
php -m | grep opendal-php

```

Composer test:

```
cd opendal/bindings/php

composer install
composer test

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/python/
---
# Python | Apache OpenDAL™

# Python

## Apache OpenDAL™ Python Binding

[![Status](https://img.shields.io/badge/status-released-blue)](https://pypi.org/project/opendal/) [![PyPI](https://img.shields.io/pypi/v/opendal.svg?logo=PyPI)](https://pypi.org/project/opendal/) [![Website](https://img.shields.io/badge/opendal-OpenDAL_Website-red?logo=Apache&logoColor=red)](https://opendal.apache.org/docs/python/)

This package provides a native Python binding for **Apache OpenDAL™**, a data access layer that allows you to access various storage services in a unified way.

![OpenDAL Python Usage Demo](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Useful Links[​](#useful-links "Direct link to Useful Links")

* [Documentation](https://opendal.apache.org/docs/python/)
* [Examples](https://github.com/apache/opendal/blob/main/bindings/python/docs/examples)
* [Upgrade Guide](https://github.com/apache/opendal/blob/main/bindings/python/upgrade.md)

---

## Features[​](#features "Direct link to Features")

* **Unified API**: Access S3, GCS, Azure Blob, HDFS, FTP, and more with the same set of commands.
* **Native Performance**: Built in Rust for high performance and safety.
* **Async Support**: First-class `async` API for modern Python applications.
* **Easy to Use**: Simple and intuitive API design.

---

## Installation[​](#installation "Direct link to Installation")

Install the package directly from PyPI:

```
pip install opendal

```

---

## Usage[​](#usage "Direct link to Usage")

Here are a few examples of how to use OpenDAL with different storage backends.

### Local Filesystem (`fs`)[​](#local-filesystem-fs "Direct link to local-filesystem-fs")

```
import opendal

# Initialize the operator for the local filesystem
op = opendal.Operator("fs", root="/tmp")

# Write data to a file
op.write("test.txt", b"Hello World")

# Read data from the file
content = op.read("test.txt")
print(op.read("test.txt"))

# Get metadata
metadata = op.stat("test.txt")
print(f"Content length: {metadata.content_length}") # Output: 11

```

### Amazon S3[​](#amazon-s3 "Direct link to Amazon S3")

The API remains the same—just change the scheme and credentials.

```
import opendal

# Initialize the operator for S3
op = opendal.Operator(
    "s3",
    bucket="your_bucket_name",
    region="your_region",
    root="/path/to/root"
)

op.write("test.txt", b"Hello World")
print(op.read("test.txt"))
print(op.stat("test.txt").content_length)

```

### Async Usage (`s3`)[​](#async-usage-s3 "Direct link to async-usage-s3")

OpenDAL also provides a fully asynchronous API.

```
import asyncio
import opendal

async def main():
    # Use AsyncOperator for async operations
    op = opendal.AsyncOperator("s3", root="/tmp", bucket="your_bucket_name", region="your_region")

    await op.write("test.txt", b"Hello World")
    print(await op.read("test.txt"))

asyncio.run(main())

```

---

## Development[​](#development "Direct link to Development")

This project uses [just](https://github.com/casey/just) as a command runner to simplify the development workflow.

1. **Clone the repository and set up the environment:**  
```  
# This will create a virtual environment and install all dependencies  
just setup  
```
2. **Run tests:**  
```  
# Example: Run tests for the 'fs' operator  
OPENDAL_TEST=fs OPENDAL_FS_ROOT=/tmp just test  
```

For a complete guide on building, testing, and contributing, please see our**[CONTRIBUTING.md](https://github.com/apache/opendal/blob/main/bindings/python/CONTRIBUTING.md)** file.

---

## Used By[​](#used-by "Direct link to Used By")

Check out the [users list](https://github.com/apache/opendal/blob/main/bindings/python/users.md) for more details on who is using OpenDAL.

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0:<http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/ruby/
---
# Ruby | Apache OpenDAL™

# Ruby

## Apache OpenDAL™ Ruby Binding

[![Gem Version](https://img.shields.io/gem/v/opendal)](https://rubygems.org/gems/opendal) [![Gem Downloads (for latest version)](https://img.shields.io/gem/dtv/opendal)](https://rubygems.org/gems/opendal)

OpenDAL's Ruby [gem](https://rubygems.org/gems/opendal).

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

Read OpenDAL's [ruby](https://opendal.apache.org/docs/ruby/) documentation.

You can find Rust documentation [here](https://docs.rs/opendal/latest/opendal/index.html).

## Get started[​](#get-started "Direct link to Get started")

### Installation[​](#installation "Direct link to Installation")

Install gem:

```
bundle add opendal

```

or add it in Gemfile:

```
# Gemfile

source "https://rubygems.org"

gem 'opendal'

```

### Examples[​](#examples "Direct link to Examples")

#### File operations with an in-memory storage[​](#file-operations-with-an-in-memory-storage "Direct link to File operations with an in-memory storage")

```
require 'opendal'

op = OpenDal::Operator.new("memory", {})
op.write("file", "hello world")
puts op.read("file") # => "hello world"
puts ""

puts "List:", op.list("").map { |e| e.path }
puts ""

puts "Stat"
puts op.stat("file").inspect # => #<OpenDal::Metadata mode: File,         content_type: ,         content_length: 11>
puts ""

puts "Deleting 'file'"
op.delete("/file")
puts ""

puts "Exist?", op.exist?("/file") # => false
puts ""

puts "Info:", op.info.inspect # => #<OpenDal::OperatorInfo scheme: "memory", root: "/">

```

#### A S3 operator[​](#a-s3-operator "Direct link to A S3 operator")

```
require 'opendal'

op = OpenDal::Operator.new("s3", {
  "endpoint" => "http://localhost:9000",
  "access_key_id" => "minioadmin" ,
  "secret_access_key" => "minioadmin",
  "bucket" => "test",
  "region" => "us-east-1",
})
op.write("file", "hello world")
puts op.read("file") # => "hello world"
puts ""

puts "List:", op.list("").map { |e| e.path }
puts ""

puts "Stat"
puts op.stat("file").inspect # => #<OpenDal::Metadata mode: File,         content_type: binary/octet-stream,         content_length: 11>
puts ""

puts "Deleting 'file'"
op.delete("file")
puts ""

puts "Exist?", op.exist?("file") # => false
puts ""

puts "Info:", op.info.inspect # => #<OpenDal::OperatorInfo scheme: "s3", root: "/">

```

#### Use middleware[​](#use-middleware "Direct link to Use middleware")

```
require 'opendal'

op = OpenDal::Operator.new("s3", {
  "endpoint" => "http://localhost:9000",
  "access_key_id" => "minioadmin" ,
  "secret_access_key" => "minioadmin",
  "bucket" => "test",
  "region" => "us-east-1",
})

op.middleware(OpenDal::Middleware::ConcurrentLimit.new(5))
op.middleware(OpenDal::Middleware::Retry.new)
op.middleware(OpenDal::Middleware::Timeout.new(1, 2))

op.list("/").map do |e|
  puts e.inspect
end

```

## Documentation[​](#documentation "Direct link to Documentation")

More detailed documentation is a work in progress.

* OpenDAL's [ruby](https://opendal.apache.org/docs/ruby/) documentation
* Rust [documentation](https://docs.rs/opendal/latest/opendal/index.html)
* Rust documentation for [services](https://docs.rs/opendal/latest/opendal/services/index.html)
* Rust documentation for [layers](https://docs.rs/opendal/latest/opendal/layers/index.html) (middlewares in Ruby)

## Development[​](#development "Direct link to Development")

Install gem and its dependencies:

```
bundle

```

Build bindings:

```
bundle exec rake compile

```

Run tests:

```
bundle exec rake test

```

Run linters:

```
bundle exec rake standard:fix
rustfmt --config-path ../../rustfmt.toml src/*.rs # Run rustfmt for Rust files
cargo clippy --fix --all-targets # Run rust linter clippy

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/swift/
---
# Swift 🚧 | Apache OpenDAL™

# Swift 🚧

## Apache OpenDAL™ Swift Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/swift/)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Using the Package[​](#using-the-package "Direct link to Using the Package")

### Build C Dependencies[​](#build-c-dependencies "Direct link to Build C Dependencies")

The Swift binding depends on the C binding to OpenDAL. Before using this package, you need to build the C library first:

```
cd bindings/swift
make build-c

```

To check whether the package is ready to use, simply run the test:

```
make test

```

### Add Dependency to Your Project[​](#add-dependency-to-your-project "Direct link to Add Dependency to Your Project")

The package manifest is not located at the root directory of its repository. To use it, add the path of this package to the `Package.swift` manifest of your project:

```
// swift-tools-version:5.7
import PackageDescription

let package = Package(
  name: "MyTool",
  dependencies: [
    .package(path: "/path/to/opendal/bindings/swift/OpenDAL"),
  ],
  targets: [
    .target(name: "MyTool", dependencies: [
      .product(name: "OpenDAL", package: "OpenDAL"),
    ]),
  ]
)

```

## Example[​](#example "Direct link to Example")

The demo below shows how to write a key to the memory storage, and read it back:

```
import OpenDAL

// Create an operator with `memory` backend.
let op = try Operator(scheme: "memory")

// Write some data into path `/demo`.
let someData = Data([1, 2, 3, 4])
try op.blockingWrite(someData, to: "/demo")

// Read the data back.
let readData = try op.blockingRead("/demo")

// You can use the read data here.
print(readData!)

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/bindings/zig/
---
# Zig 🚧 | Apache OpenDAL™

# Zig 🚧

## Apache OpenDAL™ Zig Binding (WIP)

[![](https://img.shields.io/badge/status-unreleased-red)](https://opendal.apache.org/bindings/zig)

![](https://github.com/apache/opendal/assets/5351546/87bbf6e5-f19e-449a-b368-3e283016c887)

## Build[​](#build "Direct link to Build")

To compile OpenDAL Zig binding from source code, you need:

* [Zig](https://ziglang.org/download) 0.14.0 or higher

```
# build libopendal_c (underneath call make -C ../c)
zig build libopendal_c
# build and run unit tests
zig build test --summary all

```

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/category/applications/
---
# Applications Overview | Apache OpenDAL™

[Skip to main content](#%5F%5Fdocusaurus%5FskipToContent%5Ffallback)

[![Apache OpenDAL](/img/logo.svg)![Apache OpenDAL](/img/logo_dark.svg)](/)

[Docs](/)[Blog](/blog/)[Community](/community/)[Download](/download/)

[ASF](#)
* [Foundation](https://www.apache.org/)
* [License](https://www.apache.org/licenses/)
* [Events](https://www.apache.org/events/current-event.html)
* [Privacy](https://privacy.apache.org/policies/privacy-policy-public.html)
* [Security](https://www.apache.org/security/)
* [Sponsorship](https://www.apache.org/foundation/sponsorship.html)
* [Thanks](https://www.apache.org/foundation/thanks.html)
* [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)

[](https://github.com/apache/opendal)[](https://discord.gg/XQy8yGR2dg)

* [Overview](/)
* [Vision](/vision/)
* [Core](/core/)
* [Bindings](/category/bindings/)  
   * [C 🚧](/bindings/c/)  
   * [Cpp 🚧](/bindings/cpp/)  
   * [D 🚧](/bindings/d/)  
   * [Dart 🚧](/bindings/dart/)  
   * [Dotnet 🚧](/bindings/dotnet/)  
   * [Go](/bindings/go/)  
   * [Haskell 🚧](/bindings/haskell/)  
   * [Java](/bindings/java/)  
   * [Lua 🚧](/bindings/lua/)  
   * [Node.js](/bindings/nodejs/)  
   * [OCaml 🚧](/bindings/ocaml/)  
   * [PHP 🚧](/bindings/php/)  
   * [Python](/bindings/python/)  
   * [Ruby](/bindings/ruby/)  
   * [Swift 🚧](/bindings/swift/)  
   * [Zig 🚧](/bindings/zig/)
* [Integrations](/category/integrations/)  
   * [Cloud Filter (removed)](/integrations/cloud%5Ffilter/)  
   * [Dav Server](/integrations/dav%5Fserver/)  
   * [Fuse3 (removed)](/integrations/fuse3/)  
   * [Object Store](/integrations/object%5Fstore/)  
   * [Parquet](/integrations/parquet/)  
   * [Spring](/integrations/spring/)  
   * [Unftp Sbe](/integrations/unftp%5Fsbe/)
* [Applications](/category/applications/)  
   * [Apps migration guide](/apps/migration/)  
   * [Oay (removed)](/apps/oay/)  
   * [Ofs (moved)](/apps/ofs/)  
   * [Oli (moved)](/apps/oli/)

* Applications

# Applications Overview

[📄️ Apps migration guideThis repository no longer maintains the applications Oli and Ofs.](/apps/migration/)

[📄️ Oay (removed)This tool has been removed from the Apache OpenDAL repository.](/apps/oay/)

[📄️ Ofs (moved)Ofs has moved to a separate repository and is no longer maintained in this repository.](/apps/ofs/)

[📄️ Oli (moved)Oli has moved to a separate repository and is no longer maintained in this repository.](/apps/oli/)

[PreviousUnftp Sbe](/integrations/unftp%5Fsbe/)[NextApps migration guide](/apps/migration/)

[![Apache Software Foundation](/./img/asf_logo_wide.svg)![Apache Software Foundation](/./img/asf_logo_wide.svg)](https://www.apache.org/)

Copyright © 2022-2025, The Apache Software Foundation  
Apache OpenDAL, OpenDAL, Apache, the Apache feather and the Apache OpenDAL project logo are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/category/bindings/
---
# Bindings Overview | Apache OpenDAL™

[Skip to main content](#%5F%5Fdocusaurus%5FskipToContent%5Ffallback)

[![Apache OpenDAL](/img/logo.svg)![Apache OpenDAL](/img/logo_dark.svg)](/)

[Docs](/)[Blog](/blog/)[Community](/community/)[Download](/download/)

[ASF](#)
* [Foundation](https://www.apache.org/)
* [License](https://www.apache.org/licenses/)
* [Events](https://www.apache.org/events/current-event.html)
* [Privacy](https://privacy.apache.org/policies/privacy-policy-public.html)
* [Security](https://www.apache.org/security/)
* [Sponsorship](https://www.apache.org/foundation/sponsorship.html)
* [Thanks](https://www.apache.org/foundation/thanks.html)
* [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)

[](https://github.com/apache/opendal)[](https://discord.gg/XQy8yGR2dg)

* [Overview](/)
* [Vision](/vision/)
* [Core](/core/)
* [Bindings](/category/bindings/)  
   * [C 🚧](/bindings/c/)  
   * [Cpp 🚧](/bindings/cpp/)  
   * [D 🚧](/bindings/d/)  
   * [Dart 🚧](/bindings/dart/)  
   * [Dotnet 🚧](/bindings/dotnet/)  
   * [Go](/bindings/go/)  
   * [Haskell 🚧](/bindings/haskell/)  
   * [Java](/bindings/java/)  
   * [Lua 🚧](/bindings/lua/)  
   * [Node.js](/bindings/nodejs/)  
   * [OCaml 🚧](/bindings/ocaml/)  
   * [PHP 🚧](/bindings/php/)  
   * [Python](/bindings/python/)  
   * [Ruby](/bindings/ruby/)  
   * [Swift 🚧](/bindings/swift/)  
   * [Zig 🚧](/bindings/zig/)
* [Integrations](/category/integrations/)  
   * [Cloud Filter (removed)](/integrations/cloud%5Ffilter/)  
   * [Dav Server](/integrations/dav%5Fserver/)  
   * [Fuse3 (removed)](/integrations/fuse3/)  
   * [Object Store](/integrations/object%5Fstore/)  
   * [Parquet](/integrations/parquet/)  
   * [Spring](/integrations/spring/)  
   * [Unftp Sbe](/integrations/unftp%5Fsbe/)
* [Applications](/category/applications/)  
   * [Apps migration guide](/apps/migration/)  
   * [Oay (removed)](/apps/oay/)  
   * [Ofs (moved)](/apps/ofs/)  
   * [Oli (moved)](/apps/oli/)

* Bindings

# Bindings Overview

[📄️ C 🚧](/bindings/c/)

[📄️ Cpp 🚧](/bindings/cpp/)

[📄️ D 🚧](/bindings/d/)

[📄️ Dart 🚧](/bindings/dart/)

[📄️ Dotnet 🚧](/bindings/dotnet/)

[📄️ Go](/bindings/go/)

[📄️ Haskell 🚧](/bindings/haskell/)

[📄️ Java](/bindings/java/)

[📄️ Lua 🚧](/bindings/lua/)

[📄️ Node.js](/bindings/nodejs/)

[📄️ OCaml 🚧](/bindings/ocaml/)

[📄️ PHP 🚧](/bindings/php/)

[📄️ Python](/bindings/python/)

[📄️ Ruby](/bindings/ruby/)

[📄️ Swift 🚧](/bindings/swift/)

[📄️ Zig 🚧](/bindings/zig/)

[PreviousCore](/core/)[NextC 🚧](/bindings/c/)

[![Apache Software Foundation](/./img/asf_logo_wide.svg)![Apache Software Foundation](/./img/asf_logo_wide.svg)](https://www.apache.org/)

Copyright © 2022-2025, The Apache Software Foundation  
Apache OpenDAL, OpenDAL, Apache, the Apache feather and the Apache OpenDAL project logo are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/category/integrations/
---
# Integrations Overview | Apache OpenDAL™

[Skip to main content](#%5F%5Fdocusaurus%5FskipToContent%5Ffallback)

[![Apache OpenDAL](/img/logo.svg)![Apache OpenDAL](/img/logo_dark.svg)](/)

[Docs](/)[Blog](/blog/)[Community](/community/)[Download](/download/)

[ASF](#)
* [Foundation](https://www.apache.org/)
* [License](https://www.apache.org/licenses/)
* [Events](https://www.apache.org/events/current-event.html)
* [Privacy](https://privacy.apache.org/policies/privacy-policy-public.html)
* [Security](https://www.apache.org/security/)
* [Sponsorship](https://www.apache.org/foundation/sponsorship.html)
* [Thanks](https://www.apache.org/foundation/thanks.html)
* [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)

[](https://github.com/apache/opendal)[](https://discord.gg/XQy8yGR2dg)

* [Overview](/)
* [Vision](/vision/)
* [Core](/core/)
* [Bindings](/category/bindings/)  
   * [C 🚧](/bindings/c/)  
   * [Cpp 🚧](/bindings/cpp/)  
   * [D 🚧](/bindings/d/)  
   * [Dart 🚧](/bindings/dart/)  
   * [Dotnet 🚧](/bindings/dotnet/)  
   * [Go](/bindings/go/)  
   * [Haskell 🚧](/bindings/haskell/)  
   * [Java](/bindings/java/)  
   * [Lua 🚧](/bindings/lua/)  
   * [Node.js](/bindings/nodejs/)  
   * [OCaml 🚧](/bindings/ocaml/)  
   * [PHP 🚧](/bindings/php/)  
   * [Python](/bindings/python/)  
   * [Ruby](/bindings/ruby/)  
   * [Swift 🚧](/bindings/swift/)  
   * [Zig 🚧](/bindings/zig/)
* [Integrations](/category/integrations/)  
   * [Cloud Filter (removed)](/integrations/cloud%5Ffilter/)  
   * [Dav Server](/integrations/dav%5Fserver/)  
   * [Fuse3 (removed)](/integrations/fuse3/)  
   * [Object Store](/integrations/object%5Fstore/)  
   * [Parquet](/integrations/parquet/)  
   * [Spring](/integrations/spring/)  
   * [Unftp Sbe](/integrations/unftp%5Fsbe/)
* [Applications](/category/applications/)  
   * [Apps migration guide](/apps/migration/)  
   * [Oay (removed)](/apps/oay/)  
   * [Ofs (moved)](/apps/ofs/)  
   * [Oli (moved)](/apps/oli/)

* Integrations

# Integrations Overview

[📄️ Cloud Filter (removed)This integration has been removed from the Apache OpenDAL repository.](/integrations/cloud%5Ffilter/)

[📄️ Dav Server](/integrations/dav%5Fserver/)

[📄️ Fuse3 (removed)This integration has been removed from the Apache OpenDAL repository.](/integrations/fuse3/)

[📄️ Object Store](/integrations/object%5Fstore/)

[📄️ Parquet](/integrations/parquet/)

[📄️ Spring](/integrations/spring/)

[📄️ Unftp Sbe](/integrations/unftp%5Fsbe/)

[PreviousZig 🚧](/bindings/zig/)[NextCloud Filter (removed)](/integrations/cloud%5Ffilter/)

[![Apache Software Foundation](/./img/asf_logo_wide.svg)![Apache Software Foundation](/./img/asf_logo_wide.svg)](https://www.apache.org/)

Copyright © 2022-2025, The Apache Software Foundation  
Apache OpenDAL, OpenDAL, Apache, the Apache feather and the Apache OpenDAL project logo are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/integrations/cloud_filter/
---
# Cloud Filter (removed) | Apache OpenDAL™

# Cloud Filter (removed)

This integration has been removed from the Apache OpenDAL repository.

Related:

* Tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/integrations/dav_server/
---
# Dav Server | Apache OpenDAL™

# Dav Server

## Apache OpenDAL™ dav-server integration

[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_integration_dav_server.yml?branch=main)](https://github.com/apache/opendal/actions?query=branch%3Amain) [![Latest Version](https://img.shields.io/crates/v/dav-server-opendalfs.svg)](https://crates.io/crates/dav-server-opendalfs) [![Crate Downloads](https://img.shields.io/crates/d/dav-server-opendalfs.svg)](https://crates.io/crates/dav-server-opendalfs) [![chat](https://img.shields.io/discord/1081052318650339399)](https://opendal.apache.org/discord)

`dav-server-opendalfs` is an [dav-server](https://github.com/messense/dav-server-rs) implementation using opendal.

This crate can help you to access ANY storage services with the same webdav API.

## Useful Links[​](#useful-links "Direct link to Useful Links")

* Documentation: [release](https://docs.rs/dav-server-opendalfs/) | [dev](https://opendal.apache.org/docs/dav-server-opendalfs/dav%5Fserver%5Fopendalfs/)

## Examples[​](#examples "Direct link to Examples")

```
use anyhow::Result;
use dav_server::davpath::DavPath;
use dav_server_opendalfs::OpendalFs;
use opendal::services::Memory;
use opendal::Operator;

#[tokio::test]
async fn test() -> Result<()> {
 let op = Operator::new(Memory::default())?.finish();

 let webdavfs = OpendalFs::new(op);

 let metadata = webdavfs
     .metadata(&DavPath::new("/").unwrap())
     .await
     .unwrap();
 println!("{}", metadata.is_dir());

 Ok(())
}

```

## Branding[​](#branding "Direct link to Branding")

The first and most prominent mentions must use the full form: **Apache OpenDAL™** of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization.

For more details, see the [Apache Product Name Usage Guide](https://www.apache.org/foundation/marks/guide).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/integrations/fuse3/
---
# Fuse3 (removed) | Apache OpenDAL™

# Fuse3 (removed)

This integration has been removed from the Apache OpenDAL repository.

Related:

* Tracking: <https://github.com/apache/opendal/issues/6689>

---

---
url: https://opendal.apache.org/integrations/object_store/
---
# Object Store | Apache OpenDAL™

# Object Store

## Apache OpenDAL™ object\_store integration

[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_integration_object_store.yml?branch=main)](https://github.com/apache/opendal/actions?query=branch%3Amain) [![Latest Version](https://img.shields.io/crates/v/object_store_opendal.svg)](https://crates.io/crates/object%5Fstore%5Fopendal) [![Crate Downloads](https://img.shields.io/crates/d/object_store_opendal.svg)](https://crates.io/crates/object%5Fstore%5Fopendal) [![chat](https://img.shields.io/discord/1081052318650339399)](https://opendal.apache.org/discord)

`object_store_opendal` is an [object\_store](https://crates.io/crates/object%5Fstore) implementation using [opendal](https://github.com/apache/opendal).

This crate can help you to access 30 more storage services with the same object\_store API.

## Useful Links[​](#useful-links "Direct link to Useful Links")

* Documentation: [release](https://docs.rs/object%5Fstore%5Fopendal/) | [dev](https://opendal.apache.org/docs/object-store-opendal/object%5Fstore%5Fopendal/)

## Examples[​](#examples "Direct link to Examples")

`opendal_store_opendal` depends on the `opendal` crate. Please make sure to always use the latest versions of both.

latest `object_store_opendal` ![Crate](https://img.shields.io/crates/v/object_store_opendal.svg)

latest `opendal` ![Crate](https://img.shields.io/crates/v/opendal.svg)

### 1\. using `object_store` API to access S3[​](#1-using-object%5Fstore-api-to-access-s3 "Direct link to 1-using-object_store-api-to-access-s3")

Add the following dependencies to your `Cargo.toml` with correct version:

```
[dependencies]
object_store = "0.11.0"
object_store_opendal =  "xxx"   # see the latest version above
opendal = { version = "xxx", features = ["services-s3"] }  # see the latest version above

```

Build `OpendalStore` via `opendal::Operator`:

```
use std::sync::Arc;

use bytes::Bytes;
use object_store::path::Path;
use object_store::ObjectStore;
use object_store_opendal::OpendalStore;
use opendal::services::S3;
use opendal::{Builder, Operator};

#[tokio::main]
async fn main() {
    let builder = S3::from_map(
        vec![
            ("access_key".to_string(), "my_access_key".to_string()),
            ("secret_key".to_string(), "my_secret_key".to_string()),
            ("endpoint".to_string(), "my_endpoint".to_string()),
            ("region".to_string(), "my_region".to_string()),
        ]
        .into_iter()
        .collect(),
    ).unwrap();

    // Create a new operator
    let operator = Operator::new(builder).unwrap().finish();

    // Create a new object store
    let object_store = Arc::new(OpendalStore::new(operator));

    let path = Path::from("data/nested/test.txt");
    let bytes = Bytes::from_static(b"hello, world! I am nested.");

    object_store.put(&path, bytes.clone().into()).await.unwrap();

    let content = object_store
        .get(&path)
        .await
        .unwrap()
        .bytes()
        .await
        .unwrap();

    assert_eq!(content, bytes);
}

```

### 2\. querying data in a S3 bucket using DataFusion[​](#2-querying-data-in-a-s3-bucket-using-datafusion "Direct link to 2. querying data in a S3 bucket using DataFusion")

Add the following dependencies to your `Cargo.toml` with correct version:

```
[dependencies]
object_store = "0.11.0"
object_store_opendal = "xxx" # see the latest version above
opendal = { version = "xxx", features = ["services-s3"] } # see the latest version above
datafusion = "44.0.0"
url = "2.5.2"

```

Build `OpendalStore` via `opendal::Operator` and register it to `DataFusion`:

```
use datafusion::error::DataFusionError;
use datafusion::error::Result;
use datafusion::prelude::*;
use opendal::services::S3;
use opendal::Operator;
use std::sync::Arc;
use url::Url;


#[tokio::main]
async fn main() -> Result<()> {
    let ctx = SessionContext::new();

    // Configure OpenDAL for S3
    let region = "my_region";
    let bucket_name = "my_bucket";
    let builder = S3::default()
        .endpoint("my_endpoint")
        .bucket(bucket_name)
        .region(region)
        .access_key_id("my_access_key")
        .secret_access_key("my_secret_key");
    let op = Operator::new(builder)
        .map_err(|err| DataFusionError::External(Box::new(err)))?
        .finish();
    let store = object_store_opendal::OpendalStore::new(op);

    // Register the object store
    let path = format!("s3://{bucket_name}");
    let s3_url = Url::parse(&path).unwrap();
    ctx.register_object_store(&s3_url, Arc::new(store));

    // Register CSV file as a table
    let path = format!("s3://{bucket_name}/csv/data.csv");
    ctx.register_csv("trips", &path, CsvReadOptions::default())
        .await?;

    // Execute the query
    let df = ctx.sql("SELECT * FROM trips LIMIT 10").await?;
    // Print the results
    df.show().await?;

    // Dynamic query using the file path directly
    let ctx = ctx.enable_url_table();
    let df = ctx
        .sql(format!(r#"SELECT * FROM '{}' LIMIT 10"#, &path).as_str())
        .await?;
    // Print the results
    df.show().await?;

    Ok(())
}

```

## WASM support[​](#wasm-support "Direct link to WASM support")

To build with `wasm32-unknown-unknown` target, you need to enable the `send_wrapper` feature:

```
cargo build --target wasm32-unknown-unknown --features send_wrapper

```

## Branding[​](#branding "Direct link to Branding")

The first and most prominent mentions must use the full form: **Apache OpenDAL™** of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization.

For more details, see the [Apache Product Name Usage Guide](https://www.apache.org/foundation/marks/guide).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/integrations/parquet/
---
# Parquet | Apache OpenDAL™

# Parquet

## Apache OpenDAL™ parquet integration

[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_integration_parquet.yml?branch=main)](https://github.com/apache/opendal/actions?query=branch%3Amain) [![Latest Version](https://img.shields.io/crates/v/parquet_opendal.svg)](https://crates.io/crates/parquet%5Fopendal) [![Crate Downloads](https://img.shields.io/crates/d/parquet_opendal.svg)](https://crates.io/crates/parquet%5Fopendal) [![chat](https://img.shields.io/discord/1081052318650339399)](https://opendal.apache.org/discord)

`parquet_opendal` provides [parquet](https://crates.io/crates/parquet) efficient IO utilities.

## Useful Links[​](#useful-links "Direct link to Useful Links")

* Documentation: [release](https://docs.rs/parquet%5Fopendal/) | [dev](https://opendal.apache.org/docs/object-store-opendal/parquet%5Fopendal/)

## Examples[​](#examples "Direct link to Examples")

Add the following dependencies to your `Cargo.toml` with correct version:

```
[dependencies]
parquet_opendal = "0.0.1"
opendal = { version = "0.48.0", features = ["services-s3"] }

```

```
use std::sync::Arc;

use arrow::array::{ArrayRef, Int64Array, RecordBatch};

use futures::StreamExt;
use opendal::{services::S3Config, Operator};
use parquet::arrow::{AsyncArrowWriter, ParquetRecordBatchStreamBuilder};
use parquet_opendal::{AsyncReader, AsyncWriter};

#[tokio::main]
async fn main() {
    let mut cfg = S3Config::default();
    cfg.access_key_id = Some("my_access_key".to_string());
    cfg.secret_access_key = Some("my_secret_key".to_string());
    cfg.endpoint = Some("my_endpoint".to_string());
    cfg.region = Some("my_region".to_string());
    cfg.bucket = "my_bucket".to_string();

    // Create a new operator
    let operator = Operator::from_config(cfg).unwrap().finish();
    let path = "/path/to/file.parquet";

    // Create an async writer
    let writer = AsyncWriter::new(
        operator
            .writer_with(path)
            .chunk(32 * 1024 * 1024)
            .concurrent(8)
            .await
            .unwrap(),
    );

    let col = Arc::new(Int64Array::from_iter_values([1, 2, 3])) as ArrayRef;
    let to_write = RecordBatch::try_from_iter([("col", col)]).unwrap();
    let mut writer = AsyncArrowWriter::try_new(writer, to_write.schema(), None).unwrap();
    writer.write(&to_write).await.unwrap();
    writer.close().await.unwrap();

    /// `gap(512 * 1024)` - Sets the maximum gap size (in bytes) to merge small byte ranges
    ///   to 512 KB.
    /// `chunk(16 * 1024 * 1024)` - Sets the chunk size (in bytes) for reading data to 16 MB.
    /// `concurrent(16)` - Sets the number of concurrent fetch operations to 16.
    let reader = operator
        .reader_with(path)
        .gap(512 * 1024)
        .chunk(16 * 1024 * 1024)
        .concurrent(16)
        .await
        .unwrap();

    let content_len = operator.stat(path).await.unwrap().content_length();
    // `with_prefetch_footer_size(512 * 1024)` - Sets the prefetch footer size to 512 KB.
    let reader = AsyncReader::new(reader, content_len).with_prefetch_footer_size(512 * 1024);
    let mut stream = ParquetRecordBatchStreamBuilder::new(reader)
        .await
        .unwrap()
        .build()
        .unwrap();
    let read = stream.next().await.unwrap().unwrap();
    assert_eq!(to_write, read);
}

```

## Branding[​](#branding "Direct link to Branding")

The first and most prominent mentions must use the full form: **Apache OpenDAL™** of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization.

For more details, see the [Apache Product Name Usage Guide](https://www.apache.org/foundation/marks/guide).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/integrations/spring/
---
# Spring | Apache OpenDAL™

# Spring

## Apache OpenDAL™ Spring Integrations

Apache OpenDAL™ Spring Integrations provide seamless integration between the Apache OpenDAL library and Spring applications. This project offers both synchronous and asynchronous configurations tailored to different Spring environments.

## Overview[​](#overview "Direct link to Overview")

This project includes three primary modules:

* opendal-spring: Core integration module for [Spring](https://spring.io/) applications.
* opendal-spring-boot-starter: Synchronous starter for [Spring WebMVC](https://docs.spring.io/spring-framework/reference/web/webmvc.html).
* opendal-spring-boot-starter-reactive: Asynchronous starter for [Spring WebFlux](https://docs.spring.io/spring-framework/reference/web/webflux.html).

## Features[​](#features "Direct link to Features")

* SpringBoot autoconfiguration support for an OpenDALTemplate/ReactiveOpenDALTemplate instance.

## Prerequisites[​](#prerequisites "Direct link to Prerequisites")

This project requires JDK 17 or later and supports Spring 6 and Spring Boot 3.

## Getting Started With Spring Boot Starter[​](#getting-started-with-spring-boot-starter "Direct link to Getting Started With Spring Boot Starter")

Below is a brief example demonstrating how to use the OpenGemini Spring Boot Starter in a Java application.

### Maven Configuration[​](#maven-configuration "Direct link to Maven Configuration")

Add the following dependency to your project's `pom.xml`:

```
<dependency>
    <groupId>org.apache.opendal</groupId>
    <artifactId>opendal-spring-boot-starter</artifactId>
    <version>${version}</version>
</dependency>

```

### SpringBoot Application Configuration[​](#springboot-application-configuration "Direct link to SpringBoot Application Configuration")

Following properties can be used in your `application.yaml`:

```
spring:
  opendal:
    schema: "fs"
    conf:
      root: "/tmp"

```

## Getting Started With Spring Boot Reactive Starter[​](#getting-started-with-spring-boot-reactive-starter "Direct link to Getting Started With Spring Boot Reactive Starter")

Below is a brief example demonstrating how to use the OpenGemini Spring Boot Starter in a Java application.

### Maven Configuration[​](#maven-configuration-1 "Direct link to Maven Configuration")

Add the following dependency to your project's `pom.xml`:

```
<dependency>
    <groupId>org.apache.opendal</groupId>
    <artifactId>opendal-spring-boot-starter-reactive</artifactId>
    <version>${version}</version>
</dependency>

```

### SpringBoot Reactive Application Configuration[​](#springboot-reactive-application-configuration "Direct link to SpringBoot Reactive Application Configuration")

Following properties can be used in your `application.yaml`:

```
spring:
  opendal:
    schema: "fs"
    conf:
      root: "/tmp"

```

---

---
url: https://opendal.apache.org/integrations/unftp_sbe/
---
# Unftp Sbe | Apache OpenDAL™

# Unftp Sbe

## Apache OpenDAL™ unftp Integration

[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_integration_unftp_sbe.yml?branch=main)](https://github.com/apache/opendal/actions?query=branch%3Amain) [![Latest Version](https://img.shields.io/crates/v/unftp-sbe-opendal.svg)](https://crates.io/crates/unftp-sbe-opendal) [![Crate Downloads](https://img.shields.io/crates/d/unftp-sbe-opendal.svg)](https://crates.io/crates/unftp-sbe-opendal) [![chat](https://img.shields.io/discord/1081052318650339399)](https://opendal.apache.org/discord)

`unftp-sbe-opendal` is an [unftp](https://crates.io/crates/unftp) `StorageBackend` implementation using opendal.

This crate can help you to access ANY storage services with the same FTP API.

## Useful Links[​](#useful-links "Direct link to Useful Links")

* Documentation: [release](https://docs.rs/unftp-sbe-opendal/) | [dev](https://opendal.apache.org/docs/unftp-sbe-opendal/unftp%5Fsbe%5Fopendal/)

## Examples[​](#examples "Direct link to Examples")

```
use anyhow::Result;
use opendal::Operator;
use opendal::Scheme;
use opendal::services;
use unftp_sbe_opendal::OpendalStorage;

#[tokio::main]
async fn main() -> Result<()> {
    // Create any service desired
    let op = opendal::Operator::from_map::<services::S3>(
        [
            ("bucket".to_string(), "my_bucket".to_string()),
            ("access_key".to_string(), "my_access_key".to_string()),
            ("secret_key".to_string(), "my_secret_key".to_string()),
            ("endpoint".to_string(), "my_endpoint".to_string()),
            ("region".to_string(), "my_region".to_string()),
        ]
            .into_iter()
            .collect(),
    )?.finish();

    // Wrap the operator with `OpendalStorage`
    let backend = OpendalStorage::new(op);

    // Build the actual unftp server
    let server = libunftp::ServerBuilder::new(Box::new(move || backend.clone())).build()?;

    // Start the server
    server.listen("0.0.0.0:0").await?;

    Ok(())
}

```

## Branding[​](#branding "Direct link to Branding")

The first and most prominent mentions must use the full form: **Apache OpenDAL™** of the name for any individual usage (webpage, handout, slides, etc.) Depending on the context and writing style, you should use the full form of the name sufficiently often to ensure that readers clearly understand the association of both the OpenDAL project and the OpenDAL software product to the ASF as the parent organization.

For more details, see the [Apache Product Name Usage Guide](https://www.apache.org/foundation/marks/guide).

## License and Trademarks[​](#license-and-trademarks "Direct link to License and Trademarks")

Licensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>

Apache OpenDAL, OpenDAL, and Apache are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/blog/2025/09/15/apache-opendal-reqsign/
---
# reqsign is now Apache OpenDAL Reqsign

I’m happy to announce that my personal project has been donated to the ASF and accepted by the Apache OpenDAL PMC as a subproject: [Apache OpenDAL Reqsign](https://github.com/apache/opendal-reqsign). This means Reqsign will now be governed by the Apache OpenDAL PMC under [the Apache Way](https://www.apache.org/theapacheway/).

## What is Reqsign?[​](https://opendal.apache.org/blog/2025/09/15/apache-opendal-reqsign/#what-is-reqsign "Direct link to What is Reqsign?")

Reqsign stands for `Request Signing`. Its goal is to make signing API requests simple. Many APIs look straightforward, but they quickly become complicated once hidden behind complex abstractions.

One major challenge is authentication. For example, AWS V4 requires users to build a signature from the request and sign it using HMAC with a secret key. Another challenge is credential loading. Cloud providers like AWS, Azure, and GCP support various types of credentials and loading methods to balance security and ease of use.

All these features together make simple APIs feel complex. To send a single `GetObject` call, you often need to rely on many AWS crates and go through deep abstraction layers.

Reqsign's goal is to bring simplicity back: build, sign, send.

In general, Reqsign provides three main parts for different services:

* `ProvideCredential`: Lets users provide credentials in different ways such as environment variables, profiles, `IMDS`, `OIDC`, and more. Reqsign also provides a default chain for every service so it works out of the box without extra configuration.
* `SignRequest`: Implements the signing logic so that requests are correctly signed with the given provider credentials.
* `Context`: Offers a pluggable context mechanism that supports HTTP send, command execution, and environment access. This allows users to configure the runtime context as they wish and makes Reqsign available in WASM.

For example:

```
use anyhow::Result;
use reqsign::aws;

#[tokio::main]
async fn main() -> Result<()> {
    // Create a default signer for S3 in us-east-1
    // 
    // This will automatically:
    // - Load credentials from environment variables, config files, or IAM roles
    // - Set up the default HTTP client and file reader
    let signer = aws::default_signer("s3", "us-east-1");
    
    // Build your request
    let mut req = http::Request::builder()
        .method("GET")
        .uri("https://s3.amazonaws.com/testbucket")
        .body(())
        .unwrap()
        .into_parts()
        .0;
    
    // Sign the request
    signer.sign(&mut req, None).await?;
    
    // Send the request with your preferred HTTP client
    println!("Request has been signed!");
    Ok(())
}

```

Currently, Reqsign supports Aliyun OSS, AWS V4, Azure Storage, Google, Huawei Cloud OBS, Oracle, and Tencent COS. The community is working on adding more services so that users do not need to reimplement them.

## What has changed and what has not?[​](https://opendal.apache.org/blog/2025/09/15/apache-opendal-reqsign/#what-has-changed-and-what-has-not "Direct link to What has changed and what has not?")

After this donation, Reqsign has become a subproject of Apache OpenDAL. The Apache OpenDAL PMC will govern the project under the Apache Way. The repository has been transferred from `Xuanwo/reqsign` to `apache/opendal-reqsign`. All Reqsign committers are now OpenDAL committers.

Reqsign is licensed under Apache 2.0\. Joining the ASF strengthens this license and makes it permanent. Everyone can now use Reqsign in a safe and trusted way. The community will dedicate more effort to fixing bugs and adding new features to help Reqsign grow into a mature project.

## What’s next?[​](https://opendal.apache.org/blog/2025/09/15/apache-opendal-reqsign/#whats-next "Direct link to What’s next?")

The OpenDAL community is working to make Reqsign ready as a mature ASF project and integrate it with Reqsign v1.0\. We also plan to move some existing service implementations into Reqsign for better maintainability.

Welcome to join us!

---

---
url: https://opendal.apache.org/blog/2025/03/01/2025-roadmap/
---
# Apache OpenDAL 2025 Roadmap: Perfecting Production Adoption

Hi everyone, long time no see. Although we have been actively developing OpenDAL and consistently releasing updates, we haven’t provided a clear overview of where OpenDAL is heading. This post aims to address that. Here, we will discuss OpenDAL's current position and the future directions we are moving toward.

I hope this post serves as a guide for our development, encourages more people to contribute, and ultimately helps achieve the vision of OpenDAL.

## What's OpenDAL?[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#whats-opendal "Direct link to What's OpenDAL?")

Apache OpenDAL (`/ˈoʊ.pən.dæl/`, pronounced "OH-puhn-dal") is an Open Data Access Layer that enables seamless interaction with diverse storage services. Our VISION is [**One Layer, All Storage**](https://opendal.apache.org/vision), and our core principles are Open Community, Solid Foundation, Fast Access, Object Storage First, and Extensible Architecture.

We are building:

* [A core library built in Rust](https://crates.io/crates/opendal) that supports all services at zero cost and offers unified retry, concurrency, logging, tracing, metrics, timeout and more layers.
* Language bindings for [Python](https://pypi.org/project/opendal/), [Java](https://central.sonatype.com/artifact/org.apache.opendal/opendal), [Node.js](https://www.npmjs.com/package/opendal), C/C++, and more.
* Integrations with various frameworks, including [Parquet](https://crates.io/crates/parquet-opendal), [FUSE](https://crates.io/crates/fuse3%5Fopendal), [DAV server](https://github.com/messense/dav-server-rs), and others.
* Binaries for different use cases, such as [CLI](https://crates.io/crates/oli) and [FUSE](https://crates.io/crates/ofs).

In short, through OpenDAL, users can access ALL storage services within ONE layer.

## Where's OpenDAL?[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#wheres-opendal "Direct link to Where's OpenDAL?")

OpenDAL's rust core has already released 143 versions, has [67 reverse dependencies](https://crates.io/crates/opendal/reverse%5Fdependencies) listed on [crates.io](http://crates.io/), and is used by [612 projects](https://github.com/apache/opendal/network/dependents) as recorded on GitHub.

OpenDAL's production users include databases such as [Databend](https://github.com/databendlabs/databend), [GreptimeDB](https://github.com/GreptimeTeam/greptimedb), and [RisingWave](https://github.com/risingwavelabs/risingwave), as well as tools like [Loco](https://loco.rs/), [sccache](https://github.com/mozilla/sccache), and [Vector](https://vector.dev/).

![](https://opendal.apache.org/assets/images/opendal-rust-downloads-8f5b499b4cd72f80bd63ad4f34500f78.png)

Apart from OpenDAL's Rust core, its various language bindings have also seen significant growth over the past year. Take python binding as an example. [Dify](https://github.com/langgenius/dify/), an LLM app development platform, is using OpenDAL to access different storage services.

![](https://opendal.apache.org/assets/images/opendal-python-downloads-c5d552b37aa69309d8b3c032b686dc98.png)

## What's next for OpenDAL?[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#whats-next-for-opendal "Direct link to What's next for OpenDAL?")

The following is the famous technology adoption lifecycle curve. If I were to indicate the position of OpenDAL, I would say it is at the end of the Innovators stage and moving toward the Early Adopters stage.

![](https://opendal.apache.org/assets/images/adoption-curve-d76b6c9b5a8c14661c9800fc4b4ec239.png)(picture from TechTarget [technology adoption lifecycle](https://www.techtarget.com/searchcio/definition/technology-adoption-lifecycle))

Innovators are adopting OpenDAL. Projects like Databend, RisingWave, GreptimeDB, and sccache have been using OpenDAL in production for years. However, early adopters are still hesitant to use OpenDAL—and they have valid reasons.

For examples:

* OpenDAL hasn't reached version 1.0 yet and still introduces breaking changes from time to time, sometimes even requiring code modifications for an OpenDAL upgrade. This also creates a burden for libraries that depend on OpenDAL, as every breaking change affects them as well.
* OpenDAL lacks comprehensive documentation, particularly for its bindings in Python and Java. Users need to invest significant effort and love to integrate OpenDAL bindings into their projects.
* OpenDAL lacks some important features, such as checksum support, caching, metrics of underlying http requests and initialization from a URI.

I believe we should perfect production adoption in 2025 to get OpenDAL ready for early adopters. Only in this way can we implement our vision: **One Layer, All Storage.**

## What to do in 2025?[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#what-to-do-in-2025 "Direct link to What to do in 2025?")

Our plans for 2025 include the following:

### Features Needed in Production[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#features-needed-in-production "Direct link to Features Needed in Production")

In 2025, we plan to implement the following features that are importmant for production adoption:

* [Context](https://github.com/apache/opendal/issues/5480): Introduce context in OpenDAL so that services and layers can share the same context. This enables users to gain deeper insights into OpenDAL's internal operations by incorporating metrics, logging, and tracing into the underlying HTTP client we use.
* [Versioning](https://github.com/apache/opendal/issues/2611): Introduce full file versioning support in OpenDAL, enabling users to read, write, delete, list, and restore versioned files. This functionality will allow users to recover mistakenly deleted files and facilitate disaster recovery.
* [Checksum](https://github.com/apache/opendal/issues/5549): Introduce end-to-end checksum support in OpenDAL, enabling users to perform checksums during reading and writing without worrying about bit flips in memory or over the network.
* [Caching](https://github.com/apache/opendal/issues/5678): Provide high-quality built-in cache support in OpenDAL while ensuring users have the flexibility to implement their own caching logic.
* [Initialization From URI](https://github.com/apache/opendal/issues/3022): Allow users to initialize OpenDAL from a URI string, making it easier to configure and use OpenDAL in various environments.

### Improvements Needed for Production[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#improvements-needed-for-production "Direct link to Improvements Needed for Production")

In 2025, we plan to improve the following aspects of OpenDAL to ensure users can confidently use it in production.

* Documentation: Improve the documentation for OpenDAL, particularly for bindings like Python, Node.js, and Java. The first step is to generate well-structured documentation for the configuration values of each service.
* Communitation: Bring Back Our Community Meetings. OpenDAL used to hold regular tri-weekly meetings, but we have been unable to maintain them in the last year. We now plan to revive these meetings and encourage more face-to-face discussions in the coming years.

## Conclusion[​](https://opendal.apache.org/blog/2025/03/01/2025-roadmap/#conclusion "Direct link to Conclusion")

2025 marks the third year of the OpenDAL community. A huge thanks to all OpenDAL contributors and users for helping us reach this milestone. There's still a long way to go to achieve our vision, and we invite you all to join us on this incredible journey!

[Discuss about this post here](https://github.com/apache/opendal/discussions/5679)

---

---
url: https://opendal.apache.org/blog/2024/09/09/apache-opendal-meetup-beijing-1st/
---
# Apache OpenDAL™ Beijing Meetup 1st

Hello, everyone!

On behalf of the OpenDAL community, I'm pleased to announce that the first Apache OpenDAL™ Beijing Meetup will be held on September 14th.

You are welcome to register for this event at: <https://docs.qq.com/form/page/DYnpJWFFsSWVFeGRj>

The event will take place at [北京市朝阳区北辰西路 8 号北辰世纪中心A座12层1215房间（国家会议中心西面的写字楼）](https://maps.app.goo.gl/4Tr7JCJ5HdCoVGdeA) on the afternoon of September 14th.

## Agenda[​](https://opendal.apache.org/blog/2024/09/09/apache-opendal-meetup-beijing-1st/#agenda "Direct link to Agenda")

* 12:00 - 13:00: Lunch / Networking (food provided)
* 13:00 - 14:00: Welcome / Introductions
* 14:00 - 15:00: Talks
* 15:00 - 15:30: Coffee / Email Break
* 15:30 - 16:30: Breakouts / Discussions
* 16:30 - 17:00: Close / Conclusion

## Welcome[​](https://opendal.apache.org/blog/2024/09/09/apache-opendal-meetup-beijing-1st/#welcome "Direct link to Welcome")

Brief introductory remarks, thank to the sponsor, outline of the day, participant introductions (name, github handle, optional affiliation, optional reason you came to the meetup)

## Talks[​](https://opendal.apache.org/blog/2024/09/09/apache-opendal-meetup-beijing-1st/#talks "Direct link to Talks")

Five 10-15 minute talks about opendal.

* [@tisonkun](https://github.com/tisonkun/) about OpenDAL Community Growth
* [@WenyXu](https://github.com/WenyXu/) for using OpenDAL in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb)
* [@wcy-fdu](https://github.com/wcy-fdu/) for using OpenDAL in [RisingWave](https://github.com/risingwavelabs/risingwave)
* [@drmingdrmer](https://github.com/wcy-fdu/) for using OpenDAL in [OpenRaft](https://github.com/datafuselabs/openraft)
* [@Xuanwo](https://github.com/Xuanwo/) about OpenDAL Core 1.0

## Breakouts / Discussions[​](https://opendal.apache.org/blog/2024/09/09/apache-opendal-meetup-beijing-1st/#breakouts--discussions "Direct link to Breakouts / Discussions")

The idea is that we will break into small groups for 3 x 20 minute sessions. I will ring a gong or something similar every 20 minutes and you should find a new group to discuss.

Potential seed topics (but obviously feel free to discuss anything):

* How do we make it easier for people to build systems on OpenDAL? What are the current barriers to community growth as you see them?
* How do we make it easier for people to contribute back to OpenDAL? What are the current barriers to contribution
* What features would you like to see / not see

Ideally, in each session, one or more people would volunteer to write up any insights they got from the discussions, and post them to the overall ticket.

---

Looking forward to meet you in this meetup!

---

---
url: https://opendal.apache.org/blog/apache-opendal-participates-in-ospp-2024/
---
# Apache OpenDAL™ participates in Open Source Promotion Plan 2024

Hello, everyone!

We're writing this blog post to announce that the Apache OpenDAL™ Project will be participating in [Open Source Promotion Plan (OSPP) 2024](https://summer-ospp.ac.cn/). If you're not eligible or interested in participating in OSPP, then most of this post likely isn't relevant to you; if you are, this should contain some useful information and links.

Open Source Promotion Plan is a summer program organized by the Institute of Software Chinese Academy of Sciences and long-term supported by the Open Source Software Supply Chain Promotion Plan. It aims to encourage college students to actively participate in the maintenance and development of open source software, promote the vigorous development of open source software communities, and build the open source software supply chain together.

The OSPP applicants now have several weeks to send project proposals to organizations that appeal to them. If their project proposal is accepted, they will embark on a 12-week journey during which they will try to complete their proposed project under the guidance of an assigned mentor.

We have prepared [a list of project ideas](https://github.com/apache/opendal/issues/4554) that can serve as inspiration for potential OSPP contributors that would like to send a project proposal to the OpenDAL project. You can try to find mentors on the [maillist](mailto:dev@opendal.apache.org) or [Discord](https://discord.gg/XQy8yGR2dg). We have also prepared [a proposal guide](https://opendal.apache.org/community/events/ospp-proposal-guide) that should help you with preparing your project proposals.

You can start discussing the project ideas with OpenDAL Project maintainers immediately. The project proposal application period starts on April 30, 2024, and ends on June 4, 2024\. Take note of that deadline, as there will be no extensions!

If you are interested in contributing to the OpenDAL Project, we encourage you to check out our project idea list and send us a OSPP project proposal! Of course, you are also free to discuss these projects and/or try to move them forward even if you do not intend to (or cannot) participate in OSPP. We welcome all contributors to OpenDAL, as there is always enough work to do.

We are excited about this event. Hoping you all feel the same way!

> This announcement is inspired a lot by the [Rust participates in Google Summer of Code 2024](https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html).

---

---
url: https://opendal.apache.org/blog/apache-opendal-participates-in-gsoc-2024/
---
# Apache OpenDAL™ participates in Google Summer of Code 2024

Hello, everyone!

We're writing this blog post to announce that the Apache OpenDAL™ Project will be participating in [Google Summer of Code (GSoC) 2024](https://summerofcode.withgoogle.com/). If you're not eligible or interested in participating in GSoC, then most of this post likely isn't relevant to you; if you are, this should contain some useful information and links.

Google Summer of Code (GSoC) is an annual global program organized by Google that aims to bring new contributors to the world of open-source. The program pairs organizations (such as the OpenDAL Project) with contributors (usually students), with the goal of helping the participants make meaningful open-source contributions under the guidance of experienced mentors.

Google is sponsoring the [2024 Summer of Code](https://summerofcode.withgoogle.com/) and [The Apache Software Foundation](https://www.apache.org/) (ASF) registered as a mentoring organization. The GSoC applicants now have several weeks to send project proposals to organizations that appeal to them. If their project proposal is accepted, they will embark on a 12-week journey during which they will try to complete their proposed project under the guidance of an assigned mentor.

We have prepared [a list of project ideas](https://github.com/apache/opendal/issues/4131) that can serve as inspiration for potential GSoC contributors that would like to send a project proposal to the OpenDAL project. However, applicants can also come up with their own project ideas. You can discuss project ideas or try to find mentors on the [maillist](mailto:dev@opendal.apache.org) or [Discord](https://discord.gg/XQy8yGR2dg). We have also prepared [a proposal guide](https://opendal.apache.org/community/events/gsoc-proposal-guide) that should help you with preparing your project proposals.

You can start discussing the project ideas with OpenDAL Project maintainers immediately. The project proposal application period starts on March 18, 2024, and ends on April 2, 2024 at 18:00 UTC. Take note of that deadline, as there will be no extensions!

If you are interested in contributing to the OpenDAL Project, we encourage you to check out our project idea list and send us a GSoC project proposal! Of course, you are also free to discuss these projects and/or try to move them forward even if you do not intend to (or cannot) participate in GSoC. We welcome all contributors to OpenDAL, as there is always enough work to do.

We are excited about this event. Hoping you all feel the same way!

> This announcement is inspired a lot by the [Rust participates in Google Summer of Code 2024](https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html).

---

---
url: https://opendal.apache.org/blog/apache-opendal-graduated/
---
# Apache OpenDAL™ is now Graduated

Hello, everyone! I'm happy to announce that [Apache OpenDAL™](https://opendal.apache.org/) has graduated from the [Apache Incubator](https://incubator.apache.org/) to become a Top-Level Project of [the Apache Software Foundation](https://apache.org/).

## What's Apache OpenDAL?[​](https://opendal.apache.org/blog/apache-opendal-graduated/#whats-apache-opendal "Direct link to What's Apache OpenDAL?")

**Apache OpenDAL** is a data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way. Our VISION is **access data freely**.

OpenDAL could be used as a **better** SDK for your storage services: A SDK with native integration of [retry](https://opendal.apache.org/docs/rust/opendal/layers/struct.RetryLayer.html), [logging](https://opendal.apache.org/docs/rust/opendal/layers/struct.LoggingLayer.html), [metrics](https://opendal.apache.org/docs/rust/opendal/layers/struct.MetricsLayer.html), [tracing](https://opendal.apache.org/docs/rust/opendal/layers/struct.TracingLayer.html), [timeout](https://opendal.apache.org/docs/rust/opendal/layers/struct.TimeoutLayer.html), [throttle](https://opendal.apache.org/docs/rust/opendal/layers/struct.ThrottleLayer.html), and [more](https://opendal.apache.org/docs/rust/opendal/layers/index.html).

OpenDAL could be used as a **super** connector for your storage services: A connector that supports all kinds of storage services from Object Storage (s3, gcs, azblob), File Storage (fs, azdls, hdfs), Consumer Cloud Storage (gdrive, onedrive), Key-Value Storage (rocksdb, sled) to Cache Storage (memcached, moka).

OpenDAL could be used as an **elegant** client for your storage services: A client with well designed API and many language bindings: [Rust](https://crates.io/crates/opendal), C, Cpp, Dotnet, Go, Haskell, [Java](https://mvnrepository.com/artifact/org.apache.opendal/opendal-java), Lua, [Node.js](https://www.npmjs.com/package/opendal), OCaml, PHP, [Python](https://pypi.org/project/opendal/), Ruby, Swift and Zig.

Need to access data? Give OpenDAL a try!

```
async fn main() -> Result<()> {
    // Init s3 service.
    let mut builder = services::S3::default();
    builder.bucket("test");

    // Init an operator
    let op = Operator::via_map(builder)?
        // Add logging
        .layer(LoggingLayer::default())
        .finish();

    // Write data
    op.write("hello.txt", "Hello, World!").await?;

    // Read data
    let bs = op.read("hello.txt").await?;

    // Fetch metadata
    let meta = op.stat("hello.txt").await?;
    let mode = meta.mode();
    let length = meta.content_length();

    // Delete
    op.delete("hello.txt").await?;

    Ok(())
}

```

## What's the ASF?[​](https://opendal.apache.org/blog/apache-opendal-graduated/#whats-the-asf "Direct link to What's the ASF?")

The Apache Software Foundation (ASF) is a nonprofit corporation to support a number of open-source software projects. The Apache Software Foundation exists to provide software for the public good. We believe in the power of community over code, known as The Apache Way. Thousands of people around the world contribute to ASF open source projects every day.

The OpenDAL Community believes [the apache way](https://www.apache.org/theapacheway/) that:

* _Earned Authority_: all individuals are given the opportunity to participate, but their influence is based on publicly earned merit – what they contribute to the community.
* _Community of Peers_: individuals participate at the ASF, not organizations.
* _Open Communications_: as a virtual organization, the ASF requires all communications related to code and decision-making to be publicly accessible to ensure asynchronous collaboration, as necessitated by a globally-distributed community.
* _Consensus Decision Making_: Apache Projects are overseen by a self-selected team of active volunteers who are contributing to their respective projects.
* _Responsible Oversight_: The ASF governance model is based on trust and delegated oversight.

The original creators [Databend](https://github.com/datafuselabs/databend/) chosen to contribute OpenDAL to the ASF, embracing the Apache way through [joining the incubator program](https://opendal.apache.org/blog/opendal-entered-apache-incubator).

## What's graduation?[​](https://opendal.apache.org/blog/apache-opendal-graduated/#whats-graduation "Direct link to What's graduation?")

In the [Apache Incubator](https://incubator.apache.org/), the OpenDAL community is learning the Apache Way through daily development activities, growing its community and producing Apache releases.

During the incubation, we:

* Consist of 19 committers, including mentors, with 12 serving as PPMC members.
* Boast 164 contributors.
* Made 9 releases—averaging at least one per month.
* Had 7 different release managers to date.
* Used by 10 known entities and is a dependency for 263 GitHub projects and 18 crates.io packages.
* Opened 1,200+ issues with 1,100+ successfully resolved.
* Submitted a total of 2,400+ PRs, most of them have been merged or closed.

The graduation signifies that the OpenDAL Community is recognized as a [mature](https://opendal.apache.org/community/maturity) community, which entails:

* CODE: OpenDAL is an [Apache 2.0 licensed](https://github.com/apache/opendal/blob/main/LICENSE) open-source project with [accessible, buildable code](https://github.com/apache/opendal) on GitHub, featuring [a traceable history and authenticated code provenance](https://github.com/apache/opendal/commits/main/).
* LICENSE: OpenDAL maintains [open-source compliance](https://github.com/apache/opendal/blob/main/DEPENDENCIES.md) for all code and dependencies, requires contributor agreements, and clearly documents copyright ownership.
* Releases: OpenDAL offers standardized, committee-approved [source code releases](https://downloads.apache.org/opendal/) with secure signatures, provides convenience binaries, and has [a well-documented, repeatable release process](https://opendal.apache.org/community/committers/release).
* Quality: OpenDAL is committed to code quality transparency, prioritizes security with quick issue responses, ensures backward compatibility with clear documentation, and actively addresses bug reports in a timely manner.
* Community: OpenDAL offers [a comprehensive homepage](https://opendal.apache.org/), welcomes diverse contributions, promotes a meritocratic approach for active contributors, operates on community consensus, and ensures timely responses to user queries through various channels.
* Consensus: OpenDAL has a [public list of key decision-makers](https://projects.apache.org/committee.html?opendal) and uses a consensus approach for decisions, documented on its [main communication channel](https://lists.apache.org/list.html?dev@opendal.apache.org). It follows standard voting rules and records all important discussions in writing.
* Independence: OpenDAL is independent, with contributors from various companies acting on their own, not as representatives of any organization.

## What's next?[​](https://opendal.apache.org/blog/apache-opendal-graduated/#whats-next "Direct link to What's next?")

After graduation, OpenDAL Community will continue to focus on the following aspects under the VISION: **access data freely**.

### More Stable Services[​](https://opendal.apache.org/blog/apache-opendal-graduated/#more-stable-services "Direct link to More Stable Services")

OpenDAL now supports 59 services, although only some of them are _stable_.

_stable_ for OpenDAL means that

* Have integration tests covered.
* Have at least one production user.

The _stable_ service established a feedback loop between the OpenDAL community and its users. Users can submit bug reports or feature requests to the OpenDAL community, which in turn can enhance the service using this feedback while ensuring existing features remain intact.

After graduation, the OpenDAL community will focus on improving the stability of current services instead of just expanding our offerings.

We plan to:

* Add features users wanted to services like [file version](https://github.com/apache/opendal/issues/2611), [concurrently list](https://github.com/apache/opendal/issues/3977) and [glob pattern](https://github.com/apache/opendal/issues/1251).
* Add integration tests for newly added services.

### More Useful Documents[​](https://opendal.apache.org/blog/apache-opendal-graduated/#more-useful-documents "Direct link to More Useful Documents")

OpenDAL have good docs for its rust core, but not for other language bindings.

The lack of comprehensive documentation makes OpenDAL challenging for users to operate in Java or Python. Without user feedback, the community is unable to enhance this documentation, leading to a detrimental cycle that must be broken.

After graduation, the OpenDAL community will improve the documentation of other language bindings.

We plan to:

* Introduce code generation to automatically create documentation for the service builder due to its numerous configurations.
* Add more API Docs and examples for other language bindings.

OpenDAL have good docs for its public API, but not for its internal design.

OpenDAL is proud of its elegant design, but it is not well documented. This makes it difficult for new contributors to understand the codebase and make contributions.

After graduation, the OpenDAL community will improve the documentation of its internal design.

We plan to:

* Optimize the codebase to make it easier to understand.
* Add more blog posts to explain the design of OpenDAL.

### More Production Users[​](https://opendal.apache.org/blog/apache-opendal-graduated/#more-production-users "Direct link to More Production Users")

OpenDAL requires more production users, as they are vital to the success of our project. Increased user production leads to more valuable feedback, a more engaged contributor base, and a stronger community. We've started the initial loop; let's expand it!

After graduation, the OpenDAL community will focus on attracting more production users.

We plan to:

* Optimize the feature set for adoption like [uri initiation](https://github.com/apache/opendal/issues/3022) and [config](https://github.com/apache/opendal/issues/3240).
* Expand more ways to use OpenDAL via [fuse](https://github.com/apache/opendal/tree/main/bin/ofs), [cli](https://github.com/apache/opendal/tree/main/bin/oli), [S3/WebDAV API](https://github.com/apache/opendal/tree/main/bin/oli), [object\_store binding](https://github.com/apache/opendal/tree/main/integrations/object%5Fstore).

## Conclusion[​](https://opendal.apache.org/blog/apache-opendal-graduated/#conclusion "Direct link to Conclusion")

The OpenDAL Community aims to create a world where users can freely access data across any storage service in any manner they choose. Graduation is just the beginning—let's work together to make our VISION a reality!

---

---
url: https://opendal.apache.org/blog/owo-1/
---
# OwO #1: The v0.40 Release

> OwO (Outcome, Working, Outlook) is an Apache OpenDAL™ release blog series, where we share the current work status and future plans.

Hello! It's been a while since our last update. We've been hard at work determining the optimal way to implement new features and improvements. We're thrilled to announce that we'll soon be releasing v0.40.

This post is structured into three main sections:

* Outcome (1st `O` in `OwO`): Summarizes the key accomplishments in the v0.40 release.
* Working (the `w` in `OwO`): Provides an update on our current work.
* Outlook (2nd `O` in `OwO`): Discusses what lies ahead for OpenDAL.

## Outcome[​](https://opendal.apache.org/blog/owo-1/#outcome "Direct link to Outcome")

OpenDAL now comprises four primary components:

* Core: The core library written in Rust.
* Bindings: Language bindings powered by the OpenDAL Rust core.
* Applications: Applications built using the OpenDAL Rust core.
* Integrations: Collaborations with other projects.

### Core[​](https://opendal.apache.org/blog/owo-1/#core "Direct link to Core")

#### Unifying Append and Write Functions[​](https://opendal.apache.org/blog/owo-1/#unifying-append-and-write-functions "Direct link to Unifying Append and Write Functions")

OpenDAL has supported `append` operations since `v0.36`. We've found, however, that this led to significant duplication between append and write. As a result, we've streamlined the two functionalities into a single write function. Our users can now:

```
let mut w = op.writer_with("test.txt").append(true).await?;
w.write(content_a).await?;
w.write(content_b).await?;
w.close().await?;

```

This way, users can reuse the `Writer` in their own logic without handling `append` separately.

#### New Lister API[​](https://opendal.apache.org/blog/owo-1/#new-lister-api "Direct link to New Lister API")

To improve API consistency, we've made some adjustments to our listing functions. We've added `list` and `list_with` methods that perform single operations and renamed the original `list` to `lister` and `lister_with`.

```
// Old API
let lister: Lister = op.list("dir").await?;

// New API
let entries: Vec<Entry> = op.list("dir").await?;
let lister: Lister = op.lister("dir").await?;

```

This brings uniformity to our API offerings.

#### List With Metakey[​](https://opendal.apache.org/blog/owo-1/#list-with-metakey "Direct link to List With Metakey")

To speed up list operations, OpenDAL can now fetch and store metadata during the listing process. This eliminates the need for separate metadata calls:

```
let entries: Vec<Entry> = op
  .list_with("dir/")
  .metakey(Metakey::ContentLength | Metakey::ContentType).await?;

// Use the metadata directly!
let meta: &Metadata = entries[0].metadata();

```

This makes metadata retrieval more intuitive.

#### Buffered Writer[​](https://opendal.apache.org/blog/owo-1/#buffered-writer "Direct link to Buffered Writer")

We've added general buffer support to optimize writing operations.

```
let w = op.writer_with("path/to/file").buffer(8 * 1024 * 1024).await?

```

#### Others[​](https://opendal.apache.org/blog/owo-1/#others "Direct link to Others")

Other improvements in the core library can be found in our [CHANGELOG](https://github.com/apache/opendal/blob/main/CHANGELOG.md).

### Bindings[​](https://opendal.apache.org/blog/owo-1/#bindings "Direct link to Bindings")

#### C++[​](https://opendal.apache.org/blog/owo-1/#c "Direct link to C++")

[opendal-cpp](https://github.com/apache/opendal/tree/main/bindings/cpp) is ready for its first release! Welcome to check it out and give us some feedback.

#### Haskell[​](https://opendal.apache.org/blog/owo-1/#haskell "Direct link to Haskell")

[opendal-hs](https://github.com/apache/opendal/tree/main/bindings/haskell) is ready for its first release! Welcome to check it out and give us some feedback.

#### Java[​](https://opendal.apache.org/blog/owo-1/#java "Direct link to Java")

[opendal-java](https://github.com/apache/opendal/tree/main/bindings/java) enabled more available services in this release, allowing user to visit services like `redis` that not enabled by default in rust core. And `opendal-java` enabled blocking layer to allow users visit services like `s3` in blocking way.

Welcome to integrate `opendal-java` into your project and give us some feedback.

#### New bindings![​](https://opendal.apache.org/blog/owo-1/#new-bindings "Direct link to New bindings!")

* [opendal-dotnet](https://github.com/apache/opendal/tree/main/bindings/dotnet)
* [opendal-php](https://github.com/apache/opendal/tree/main/bindings/php)

### Applications[​](https://opendal.apache.org/blog/owo-1/#applications "Direct link to Applications")

#### oay[​](https://opendal.apache.org/blog/owo-1/#oay "Direct link to oay")

[oay](https://github.com/apache/opendal/tree/main/bin/oay) is OpenDAL Gateway that allows users to access OpenDAL services via existing protocols like `s3` and `webdav`. It works like a proxy that forwarding requests to OpenDAL services.

In this release, we implement basic `webdav` support. Users can convert any storage services to a webdav server!

#### oli[​](https://opendal.apache.org/blog/owo-1/#oli "Direct link to oli")

[oli](https://github.com/apache/opendal/tree/main/bin/oay) is OpenDAL CLI that allows users to access storage services via CLI like `s3cmd` and `gcloud` does.

We fixed some experience issues in this release and improved some docs. Welcome to try it out and give us some feedback.

### Integrations[​](https://opendal.apache.org/blog/owo-1/#integrations "Direct link to Integrations")

#### object\_store[​](https://opendal.apache.org/blog/owo-1/#object%5Fstore "Direct link to object_store")

[object\_store](https://github.com/apache/opendal/tree/main/integrations/object%5Fstore) instead to implement [object\_store](https://github.com/apache/arrow-rs/tree/master/object%5Fstore)'s trait over OpenDAL Operator so that users can use OpenDAL as a backend for `object_store`.

`object_store` is mostly functional, but there are some edge use cases that OpenDAL has yet to support.

So far, this release hasn't seen progress in this area; we are awaiting the resolution of the issue [Allow list paths that do not end with /](https://github.com/apache/opendal/issues/2762).

## Working[​](https://opendal.apache.org/blog/owo-1/#working "Direct link to Working")

We are working on the following things:

* `object_store` support: Make `object_store` integration works and find a user for it.
* Remove the `/` limitation for path, so we can list a path without ending with `/`.
* Expand the `start-after` support to more services (Address [#2786](https://github.com/apache/opendal/issues/2786)).

## Outlook[​](https://opendal.apache.org/blog/owo-1/#outlook "Direct link to Outlook")

We are exploring some innovative ideas:

* [OpenDAL REST/gRPC API](https://github.com/apache/opendal/discussions/2951): A REST/gRPC Server for OpenDAL.
* [OpenDAL Cache](https://github.com/apache/opendal/discussions/2953): OpenDAL native cache libs that allowing users to access data more efficiently.
* [OpenDAL File System](https://github.com/apache/opendal/discussions/2952): A read-only file system that built upon OpenDAL in rust!
* [kio-opendal](https://github.com/apache/opendal/discussions/3042): A kio plugin powered by OpenDAL that allows users to visit different storage services in [KDE Dolphin](https://apps.kde.org/dolphin/).
* gvfs-opendal: A gvfs plugin powered by OpenDAL that allows users to visit different storage services in [GNOME Files](https://wiki.gnome.org/Apps/Files)

Feel free to join in the discussion!

## Summary[​](https://opendal.apache.org/blog/owo-1/#summary "Direct link to Summary")

This marks our first OpenDAL `OwO` post. We welcome your feedback.

---

---
url: https://opendal.apache.org/blog/how-opendal-read-data/
---
# Apache OpenDAL™ Internal: Data Reading

As the Apache OpenDAL™ community continues to grow, new abstractions are constantly being added, which has brought some burdens to new contributors participating in development. Many maintainers hope to have a deeper understanding of OpenDAL's internal implementation. At the same time, OpenDAL's core design has not changed significantly for a long time, making it possible to write a series on internal implementation. I believe now is the time to write a series of articles on OpenDAL's internal implementation, to explain from the maintainer's perspective how OpenDAL is designed, implemented, and how it can be expanded. With the impending release of OpenDAL v0.40, I hope this series of articles will better help the community understand the past, master the present, and shape the future.

The first article will discuss OpenDAL's most commonly used data reading function. I will start from the outermost interface and then gradually unfold according to the calling sequence of OpenDAL. Let's get started!

## Overall Framework[​](https://opendal.apache.org/blog/how-opendal-read-data/#overall-framework "Direct link to Overall Framework")

Before starting to introduce the specific OpenDAL interface, let's first get familiar with the OpenDAL project.

[OpenDAL](https://github.com/apache/opendal) is an Apache Incubator project aimed at helping users access data from various storage services in a unified, convenient, and efficient way. Its project [vision](https://opendal.apache.org/vision) is "free access to data":

* Free from services: Any service can be accessed freely through native interfaces
* Free from implementations: No matter how the underlying implementation is, it can be called in a unified way
* Free to integrate: Able to freely integrate with various services and languages
* Free to zero cost: Users don't have to pay for features they don't use

On this philosophical foundation, OpenDAL Rust Core can be mainly divided into the following components:

* Operator: The outer interface exposed to users
* Layers: Specific implementation of different middleware
* Services: Specific implementation of different services

From a macroscopic perspective, OpenDAL's data reading call stack would look like this:

![](https://opendal.apache.org/assets/images/1-0b02956a3da2b4329eab11ea4779711c.png)

All Layers and Services have implemented a unified Accessor interface, erasing all type information when building the Operator. For the Operator, regardless of what services are used or how many middleware are added, all call logic is consistent. This design splits OpenDAL's API into Public API and Raw API, where the Public API is directly exposed to users, providing convenient top-level interfaces, and Raw API is provided to OpenDAL internal developers, maintaining a unified internal interface and providing some convenient implementation.

## Operator[​](https://opendal.apache.org/blog/how-opendal-read-data/#operator "Direct link to Operator")

OpenDAL's Operator API will adhere to a consistent calling paradigm as much as possible, reducing users' learning and usage costs. For example, OpenDAL offers the following APIs for `read`:

* `op.read(path)`: Reads the entire content of the specified file
* `op.reader(path)`: Creates a Reader for streaming reading
* `op.read_with(path).range(1..1024)`: Reads file content using specified parameters, such as range
* `op.reader_with(path).range(1..1024)`: Creates a Reader for streaming reading with specified parameters

It's not hard to see that `read` is more like syntactic sugar, allowing users to quickly read files without considering various traits like `AsyncRead`. The `reader` provides more flexibility, implementing widely-used community traits like `AsyncSeek`, `AsyncRead`, allowing more flexible data reading. `read_with` and `reader_with` assist users in specifying various parameters in a more natural way through Future Builder functions.

The internal logic of the Operator would look like this:

![](https://opendal.apache.org/assets/images/2-3b83ca1ebfbdd77770566a80131846bd.png)

Its main job is to encapsulate the interface for the user:

* Completing the construction of `OpRead`: the args for read operation.
* Calling the `read` function provided by `Accessor`
* Wrapping the returned value as `Reader` and implementing interfaces like `AsyncSeek`, `AsyncRead`, etc., based on `Reader`

## Layers[​](https://opendal.apache.org/blog/how-opendal-read-data/#layers "Direct link to Layers")

A little secret here is that OpenDAL will automatically apply some Layers to the Service to implement some internal logic. As of the completion of this article, OpenDAL's automatically added Layers include:

* `ErrorContextLayer`: Injects context information, such as `scheme`, `path`, etc., into all returned errors of Operation
* `CompleteLayer`: Adds necessary capabilities to services, such as adding seek support to s3
* `TypeEraseLayer`: Implements type erasure, uniformly erasing associated types in `Accessor`, so users don't need to carry generic parameters when using it

Here, `ErrorContextLayer` and `TypeEraseLayer` are relatively simple and won't be elaborated on. The focus is on `CompleteLayer`, aimed at adding `seek` or `next` support to OpenDAL's returned `Reader` in a zero-cost way, so users don't have to re-implement it. OpenDAL initially returned `Reader` and `SeekableReader` through different function calls in early versions, but the actual user feedback was not very good; almost all users were using `SeekableReader`. Therefore, OpenDAL subsequently added seek support as the first priority to the internal `Read` trait during the refactor:

```
pub trait Read: Unpin + Send + Sync {
    /// Read bytes asynchronously.
    fn poll_read(&mut self, cx: &mut Context<'_>, buf: &mut [u8]) -> Poll<Result<usize>>;

    /// Seek asynchronously.
    ///
    /// Returns `Unsupported` error if underlying reader doesn't support seek.
    fn poll_seek(&mut self, cx: &mut Context<'_>, pos: io::SeekFrom) -> Poll<Result<u64>>;

    /// Stream [`Bytes`] from underlying reader.
    ///
    /// Returns `Unsupported` error if underlying reader doesn't support stream.
    ///
    /// This API exists for avoiding bytes copying inside async runtime.
    /// Users can poll bytes from underlying reader and decide when to
    /// read/consume them.
    fn poll_next(&mut self, cx: &mut Context<'_>) -> Poll<Option<Result<Bytes>>>;
}

```

To implement a service's reading capability in OpenDAL, one needs to implement this trait, which is an internal interface and will not be directly exposed to users. Among them:

* `poll_read` is the most basic requirement; all services must implement this interface.
* When the service natively supports `seek`, `poll_seek` can be implemented, and OpenDAL will correctly dispatch, such as local fs;
* When the service natively supports `next`, meaning it returns streaming Bytes, `poll_next` can be implemented, like HTTP-based services, where the underlying layer is a TCP Stream, and hyper will encapsulate it as a bytes stream.

Through the `Read` trait, OpenDAL ensures that all services can expose their native support capabilities as much as possible, thereby achieving efficient reading for different services.

Based on this trait, OpenDAL will complete according to the capabilities supported by each service:

* Both seek/next are supported: Direct return
* No support for next: Encapsulate using `StreamableReader` to simulate next support
* No support for seek: Encapsulate using `ByRangeSeekableReader` to simulate seek support
* Neither seek/next supported: Encapsulate using both methods

> `ByRangeSeekableReader` mainly utilizes the service's ability to support range read, dropping the current reader when the user seeks and initiating a new request at the specified location.

OpenDAL exposes a unified Reader implementation through `CompleteLayer`, so users don't have to worry about whether the underlying service supports seek; OpenDAL will always choose the optimal way to initiate the request.

## Services[​](https://opendal.apache.org/blog/how-opendal-read-data/#services "Direct link to Services")

After the completion of the Layers, it's time to call the specific implementation of the Service. Here, the most common services `fs` and `s3` are used as examples to explain how data is read.

### Service fs[​](https://opendal.apache.org/blog/how-opendal-read-data/#service-fs "Direct link to Service fs")

`tokio::fs::File` implements `tokio::AsyncRead` and `tokio::AsyncSeek`. Using `async_compat::Compat`, we have transformed it into `futures::AsyncRead` and `futures::AsyncSeek`. Based on this, we provide a built-in function `oio::into_read_from_file` to transform it into a type that implements `oio::Read`.

There's nothing particularly complex in the implementation of `oio::into_read_from_file`; read and seek are mostly calling the functions provided by the incoming File type. The tricky part is about the correct handling of seek and range: seeking to the right side of the range is allowed, and this will not cause an error, and reading will only return empty, but seeking to the left side of the range is illegal, and the Reader must return `InvalidInput` for proper upper-level handling.

> Interesting history: there was [an issue](https://github.com/apache/opendal/issues/2717) in the initial implementation of this part, discovered during fuzz testing.

### Services s3[​](https://opendal.apache.org/blog/how-opendal-read-data/#services-s3 "Direct link to Services s3")

S3 is an HTTP-based service, and opendal provides a lot of HTTP-based wrappers to help developers reuse logic; they only need to build a request and return a well-constructed Body. OpenDAL Raw API encapsulates a set of reqwest-based interfaces, and the HTTP GET interface returns a `Response<IncomingAsyncBody>`:

```
/// IncomingAsyncBody carries the content returned by remote servers.
pub struct IncomingAsyncBody {
    /// # TODO
    ///
    /// hyper returns `impl Stream<Item = crate::Result<Bytes>>` but we can't
    /// write the types in stable. So we will box here.
    ///
    /// After [TAIT](https://rust-lang.github.io/rfcs/2515-type_alias_impl_trait.html)
    /// has been stable, we can change `IncomingAsyncBody` into `IncomingAsyncBody<S>`.
    inner: oio::Streamer,
    size: Option<u64>,
    consumed: u64,
    chunk: Option<Bytes>,
}

```

The stream contained in this body is the bytes stream returned by reqwest, and opendal implements content length checks and read support on this basis.

Here's an extra note about a small pitfall with reqwest/hyper: reqwest and hyper do not check the returned content length, so an illegal server may return a data volume that does not match the expected content length instead of an error, leading to unexpected data behavior. OpenDAL specifically added checks here, returning `ContentIncomplete` when data is insufficient and `ContentTruncated` when data exceeds expectations, avoiding users receiving illegal data.

## Conclusion[​](https://opendal.apache.org/blog/how-opendal-read-data/#conclusion "Direct link to Conclusion")

This article introduces from top to bottom how OpenDAL implements data reading:

* Operator is responsible for exposing user-friendly interfaces
* Layers are responsible for completing the capabilities of the services
* Services are responsible for the specific implementation of different services

Throughout the entire chain, OpenDAL adheres as much as possible to the principle of zero cost, prioritizing the use of native service capabilities, then considering simulation through other methods, and finally returning unsupported errors. Through this three-tier design, users don't need to understand the details of the underlying service, nor do they need to integrate different service SDKs to easily call `op.read(path)` to access data in any storage service.

This is: How **OpenDAL** read data freely!

---

---
url: https://opendal.apache.org/blog/opendal-access-data-freely/
---
# Apache OpenDAL™: Access Data Freely

If you're committed to building cloud-native, cross-cloud-first applications and services, or you want to support configurable storage backends to meet complex data access needs, or if you're tired of juggling various SDKs and hoping for a unified abstraction and development experience, Apache OpenDAL™ will be your perfect partner.

![OpenDAL Arch](https://opendal.apache.org/assets/images/opendal-arch-a614dff17a53ecef1fdbedb43be31c13.png)

## What is OpenDAL?[​](https://opendal.apache.org/blog/opendal-access-data-freely/#what-is-opendal "Direct link to What is OpenDAL?")

**OpenDAL** is a data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way.

**Data Access Layer** means: OpenDAL is in a critical position in the data read-write process. We shield the implementation details of different storage backends and provide a set of unified interface abstractions externally.

Next, let's try to answer _"What OpenDAL is not"_ and deconstruct OpenDAL from another perspective:

### Opendal Is Not a Proxy Service[​](https://opendal.apache.org/blog/opendal-access-data-freely/#opendal-is-not-a-proxy-service "Direct link to Opendal Is Not a Proxy Service")

OpenDAL is provided in the form of a library, not as a service or application that proxies various storage backends.

If you want to integrate OpenDAL into an existing project, you need to call OpenDAL's interface directly through the bindings supported by OpenDAL to access the storage services.

### Opendal Is Not an SDK Aggregator[​](https://opendal.apache.org/blog/opendal-access-data-freely/#opendal-is-not-an-sdk-aggregator "Direct link to Opendal Is Not an SDK Aggregator")

Although OpenDAL replaces various SDKs in the application architecture, it is not implemented as an SDK aggregator.

In other words, OpenDAL does not simply call various storage service SDKs. We have developed our own docking with various storage services based on a unified Rust core to ensure that the differences between services are smoothed out.

For example, for S3, OpenDAL manually constructs HTTP requests and parses HTTP responses to ensure that all behaviors comply with API specifications and are fully under the control of OpenDAL. Due to OpenDAL's native takeover of the data access process, we can easily implement unified retry and logging mechanisms for various storage backends and ensure behavioral consistency.

For compatible services with S3, due to the limitations of native storage services and differences in API implementation, compatibility and behavioral details may differ from S3\. For example, OSS needs to set an independent header to ensure consistent behavior for `Range`. In addition to docking with native storage services, OpenDAL will also perform targeted processing for compatible services to ensure users' data access experience.

## Advantages of OpenDAL[​](https://opendal.apache.org/blog/opendal-access-data-freely/#advantages-of-opendal "Direct link to Advantages of OpenDAL")

OpenDAL is not the only project dedicated to providing data access abstraction, but compared to other similar projects, OpenDAL has the following advantages:

### Rich Service Support[​](https://opendal.apache.org/blog/opendal-access-data-freely/#rich-service-support "Direct link to Rich Service Support")

OpenDAL supports dozens of storage services, covering a wide range of scenarios and supporting on-demand selection:

* Standard Storage Protocols: FTP, HTTP, SFTP, WebDAV, etc.
* Object Storage Services: azblob, gcs, obs, oss, s3, etc.
* File Storage Services: fs, azdls, hdfs, webhdfs, ipfs, etc.
* Consumer Cloud Storage Service: Google Drive, OneDrive, Dropbox, etc.
* Key-Value Storage Service: Memory, Redis, Rocksdb, etc.
* Cache Storage Service: Ghac, Memcached, etc.

### Complete Cross-Language Bindings[​](https://opendal.apache.org/blog/opendal-access-data-freely/#complete-cross-language-bindings "Direct link to Complete Cross-Language Bindings")

With Rust as the core, OpenDAL now provides binding support for multiple languages such as Python/Node.js/Java/C and is also actively developing bindings for other languages.

Cross-language bindings not only provide unified storage access abstractions for other languages but also follow naming conventions and development habits that are common in various languages as much as possible to pave the way for quick use.

### Powerful Middleware Support[​](https://opendal.apache.org/blog/opendal-access-data-freely/#powerful-middleware-support "Direct link to Powerful Middleware Support")

OpenDAL offers native layer support, enabling users to implement middleware or intercept for all operations.

* Error Retry: OpenDAL supports fine-grained error retry capabilities. In addition to common request retries, it supports breakpoint resumable transmission without having to re-read the entire file.
* Observability: OpenDAL implements logging,tracing,and metrics support for all operations. Turning on middleware can directly obtain observability capabilities for storage.
* Concurrency control, flow control, fuzz testing, and more.

### Easy to Use[​](https://opendal.apache.org/blog/opendal-access-data-freely/#easy-to-use "Direct link to Easy to Use")

OpenDAL's API has been well designed and polished in actual use. The documentation covers everything and is easy to get started with. Here's an example of using Python bindings to access HDFS:

```
import opendal
    
op = opendal.Operator("hdfs", name_node="hdfs://192.16.8.10.103")
op.read("path/to/file")

```

### Use Cases of OpenDAL[​](https://opendal.apache.org/blog/opendal-access-data-freely/#use-cases-of-opendal "Direct link to Use Cases of OpenDAL")

Currently, OpenDAL is widely used in various scenarios that require cloud-native capabilities, including but not limited to databases, data pipelines, and caches. The main user cases include:

* [Databend](https://github.com/datafuselabs/databend/): A modern Elasticity and Performance cloud data warehouse. Using OpenDAL to read and write persistent data (s3, azblob, gcs, hdfs, etc.) and cache data (fs, redis, rocksdb, moka, etc.).
* [GreptimeDB](https://github.com/GreptimeTeam/greptimedb): An open-source, cloud-native, distributed time-series database. Using OpenDAL to read and write persistent data (s3, azblob, etc.).
* [mozilla/sccache](https://github.com/mozilla/sccache/): `sccache` is [ccache](https://github.com/ccache/ccache) with cloud storage. Using OpenDAL to read and write cache data (s3 and ghac, etc.).
* [RisingWave](https://github.com/risingwavelabs/risingwave): A Distributed SQL Database for Stream Processing. Using OpenDAL to read and write persistent data (s3, azblob, hdfs, etc.).
* [Vector](https://github.com/vectordotdev/vector): A high-performance observability data pipeline. Using OpenDAL to write persistent data (currently mainly using hdfs).

## Future Plans of OpenDAL[​](https://opendal.apache.org/blog/opendal-access-data-freely/#future-plans-of-opendal "Direct link to Future Plans of OpenDAL")

In addition to further meeting the needs of cloud-native data access, OpenDAL will continue to expand user scenarios and actively explore its use in data science and mobile applications. At the same time, OpenDAL will continue to polish its existing implementations and bindings to provide users with a better integration experience.

OpenDAL will also explore how to improve users' workflows in data management and service integration:

* Polish the `oli` command-line tool to help users manage data painlessly.
* Implement the `oay` proxy service to provide users with high-quality compatible APIs.

In addition, since OpenDAL is currently a cross-language project, we also plan to write a series of introductory tutorials to help everyone learn OpenDAL from scratch while learning the language.

---

---
url: https://opendal.apache.org/blog/opendal-entered-apache-incubator/
---
# Way to Go: OpenDAL successfully entered Apache Incubator

![OpenDAL successfully entered Apache Incubator](https://opendal.apache.org/assets/images/opendal-entered-apache-879d5165e27d370849e904ef8d65be25.png)

On February 27th, 2023, the [OpenDAL](https://github.com/apache/opendal) project achieved a milestone by winning the approval to join the incubator of the [Apache Software Foundation](https://www.apache.org/) (ASF), the world's leading open source software organization. On March 15th, the OpenDAL project was officially transferred to the Apache Software Foundation.

This is a significant moment for [Databend](https://github.com/datafuselabs/databend), as it means that OpenDAL's technology and vision have received wider recognition and support from the open source community.

> The Apache Incubator was established in October 2002 to provide a path for projects and codebases that aspire to become part of the Apache Software Foundation. Incubating projects need to follow ASF's governance and operational practices, and use ASF's infrastructure and resources. Incubating projects need to go through a series of stages and evaluations before they can graduate to become top-level projects (TLPs) of ASF.

![Apache OpenDAL Project Incubation Status - Apache Incubator](https://opendal.apache.org/assets/images/incubator-project-opendal-095982818f2f177cfd4cd267c8f282c4.png)

_<https://incubator.apache.org/projects/opendal.html>_

## What is OpenDAL?[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#what-is-opendal "Direct link to What is OpenDAL?")

Data is one of the most important assets in the future, and data access is the key for realizing data value.

There are various kinds of storage services in the market, each with its own unique interfaces and features, which bring a lot of complexity and inconvenience to data access.

OpenDAL provides a unified, simple, efficient, reliable, and observable data access layer that allows developers to seamlessly use different storage services and enjoy the best user experience.

![M*N to M+N with OpenDAL](https://opendal.apache.org/assets/images/opendal-power-549a25c15039d5ff165b082cf2fd7476.png)

OpenDAL simplifies the process of interfacing different storage services, and provides features such as automatic retry, request optimization, and observability. With OpenDAL, developers can directly access a bunch of storage services, without having to understand and master the details of specific SDKs.

OpenDAL's features include but are not limited to:

* Support for dozens of storage services, including local file system, HDFS, S3, OSS, etc.
* Provide a unified data access interface, without worrying about the underlying storage details.
* Support for various common data operations, including `read`, `write`, `list`, etc.
* Support for automatic retry, request optimization, and observability mechanisms.
* Zero cost, directly mapped to API calls.
* Cross-language bindings: Python, Node.js, C (being worked on), etc.

## The Story about OpenDAL[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#the-story-about-opendal "Direct link to The Story about OpenDAL")

### Born for Universal Data Access[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#born-for-universal-data-access "Direct link to Born for Universal Data Access")

OpenDAL originated from the vision of creating a universal, unified and user-friendly data access layer. It came into being in late 2021, initially as a component of the Databend project.

* On December 21, 2021, [Xuanwo](http://github.com/Xuanwo) embarked on the design and re-implementation of Databend's storage access layer, [dal2: Add basic operations of read, write, stat, delete](https://github.com/datafuselabs/databend/pull/3575).
* On December 27, 2021, the [proposal: Vision of Databend DAL](https://github.com/datafuselabs/databend/discussions/3662) was put forward and discussed. On December 29th, dal2's implementation was integrated into Databend.
* On February 14th 2022 , dal2 officially separated from Databend's code repository and became a standalone top-level project. It was formally renamed OpenDAL.

### From One to Multiple[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#from-one-to-multiple "Direct link to From One to Multiple")

Thanks to Xuanwo, [ClSlaid](https://github.com/ClSlaid) and many other contributors, OpenDAL quickly became a data access layer that supports mainstream storage services such as AWS S3 / Azure Blob / GCS / HDFS, and provided cross-cloud native storage and access support for Databend's `COPY INTO`, Stage, Storage.

[GreptimeDB](https://github.com/GreptimeTeam/greptimedb) was the first large-scale Rust database project to actively use OpenDAL after Databend. Later, with Xuanwo's efforts, [sccache](https://github.com/mozilla/sccache) under Mozilla also tried to use OpenDAL to take over the storage layer. In order to provide more comprehensive support, OpenDAL soon added support for GitHub Action Cache.

Then, [RisingWave](https://github.com/risingwavelabs/risingwave) and [Vector](https://github.com/vectordotdev/vector) were supported as well. The number of OpenDAL users started to grow. More and more users choose OpenDAL as their storage access layer.

### Sky's the Limit[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#skys-the-limit "Direct link to Sky's the Limit")

OpenDAL has established a small community and formed a product matrix. In addition to the [Rust - opendal](https://crates.io/crates/opendal), it also provides [Python - opendal](https://pypi.org/project/opendal/) and [Node.js - opendal](https://www.npmjs.com/package/opendal) bindings.

OpenDAL has released 99 versions since its open source, with 700+ GitHub stars, 349K downloads, and 48 developers. The project has been actively updated. We sincerely thank every contributor for their efforts and dedication.

Being a part of Apache incubator is an important milestone in OpenDAL's development history. We hope to leverage ASF's platform and resources to let OpenDAL focus on providing a neutral, vendor-free, painless, and efficient storage access layer, and better serve the developers.

We expect OpenDAL to be widely used in the following application scenarios:

* Data analysis: OpenDAL can help data analysts quickly read or write data from different storage services, and perform various format conversions and operations.
* Data science: OpenDAL can help data scientists easily get or save data from different storage services, and perform various preprocessing and postprocessing.
* Data engineering: OpenDAL can help data engineers efficiently build and manage data pipelines between different storage services, and perform various monitoring and tuning.

## Acknowledgements[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#acknowledgements "Direct link to Acknowledgements")

**_From Xuanwo_**

Hello everyone, I'm Xuanwo, the Committer of Apache OpenDAL.

The OpenDAL project embodies my personal dream. Now it has entered the Apache incubator with the collaboration of the community. I feel very happy at this moment. Thank you all contributors for your contributions, thank Databend Labs for your support, thank Champion tison for your guidance, thank Mentors ningjiang, wusheng, tedliu and hexiaoqiao for your advice.

Let us follow the guidance of Apache Way to build a community together and create value for users by providing free, painless and efficient data access experience!

## Join Apache OpenDAL Community[​](https://opendal.apache.org/blog/opendal-entered-apache-incubator/#join-apache-opendal-community "Direct link to Join Apache OpenDAL Community")

We welcome developers and users who are interested in participating in OpenDAL project to join OpenDAL community and follow OpenDAL's latest news. You can get more information through the following ways:

* Visit OpenDAL official website: [https://opendal.apache.org](https://opendal.apache.org/)
* Explore OpenDAL GitHub repository: <https://github.com/apache/opendal>
* Join OpenDAL Discord channel: <https://opendal.apache.org/discord>
* Subscribe to OpenDAL mailing list: [dev@opendal.apache.org](mailto:dev@opendal.apache.org)

---

---
url: https://opendal.apache.org/community/committers/onboarding
---
# Onboarding

This document primarily serves as a guide for new committers to Apache OpenDAL™.

Upon receiving an invitation email from OpenDAL PMC, a new committer should consider whether accepting.
If they decide in favor, they should select "Reply All" and express their decision.

## Submit CLA

1. Download the ICLA from https://www.apache.org/licenses/contributor-agreements.html#clas. If a corporation assigns employees to work on an Apache project, please download the CCLA.
2. Complete the ICLA based on your particulars. Please note:
    - The address field should be filled out accurately and in detail.
    - You need to choose a unique ApacheID that hasn't been taken. Check https://people.apache.org/committer-index.html to see which IDs are still available.
3. Sign the document by hand or by electronic signature
    - Manually sign a printed copy, then scan it to produce a pdf.
    - Digitally draw a signature on the document: [Detail Instruction](https://www.apache.org/licenses/cla-faq.html#printer).
    - Sign the document using PGP: [Detail Instruction](https://www.apache.org/licenses/contributor-agreements.html#submitting).
4. Send your icla.pdf (and icla.pdf.asc if PGP-signed) to [secretary@apache.org](mailto:secretary@apache.org).

After waiting for some time, you will receive an email notifying you that your CLA has been successfully recorded.

## Setup ASF Account

When receiving an email with the subject "Welcome to the Apache Software Foundation" from root@apache.org, we can begin setting up an ASF account.

### Setup LDAP Password

1. Go to https://id.apache.org/reset/enter and enter your ApacheID.
2. Check your email and click the provided link to reset your password.

### Link ASF Account to GitHub

1. Navigate to https://gitbox.apache.org/boxer/ and enter your ApacheID and password.
2. Click "Authenticate with GitHub" and follow the given instructions to link your ASF account to GitHub.
3. Check your email titled "[GitHub] @asfgit has invited you to join the @apache organization" and accept the invitation.
4. Wait momentarily, and the website will refresh on its own.
5. (If you do not enable 2FA on GitHub) Please follow the [instruction](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication).

Your ApacheID and GitHub ID will now both appear on https://gitbox.apache.org/boxer/. Congrats on successfully linking your ASF account to GitHub!

## Email Settings

Note: Apache does not provide a mailbox directly.

### Receive Email

You can change your forwarding email address at [Apache Account Utility Platform](https://id.apache.org/)

### Send Email 

To send emails using your apache.org address, configure your email client to leverage the `mail-relay` service. For specifics, refer to [this guide](https://infra.apache.org/committer-email.html).

Here's an illustration for Gmail users:

1. Open Gmail settings and select "See all settings".
2. Navigate to "Accounts and Import", then locate "Send mail as".
3. Click "Add another email address" and enter your name and apache.org email address.
4. Input the SMTP server information:
    - SMTP Server: mail-relay.apache.org
    - Port: 587
    - Username: your apacheID
    - Password: your apacheID password
    - Secured connection using TLS
5. Click "Add account" and you will receive an email from Gmail that need to confirm.

![Gmail Settings](gmail-smtp-setting.jpg)

### Subscribe to Mailing List

1. Send email to [dev-subscribe@opendal.apache.org](mailto:dev-subscribe@opendal.apache.org)
2. You will receive an email with the subject "confirm subscribe to dev@opendal.apache.org"
3. Reply to the email with "Confirm" in the body

If you receive an email with the subject "WELCOME to dev@opendal.apache.org", you have successfully subscribed to the mailing list.

## Setup 1password

OpenDAL offers a 1Password open-source team license for conducting local integration tests (Thanks to 1Password!). Once you have been added to OpenDAL's committer list, one of the PMC members will invite you to join the team.

Please download your preferred clients to begin using it. You can create your own vault that is accessible only by yourself. Neither the 1password team nor OpenDAL PMC members can access it unless you choose to share it.

---

---
url: https://opendal.apache.org/community/committers/request_for_adding_secrets
---
# Request for adding secrets

OpenDAL's behavior tests depend on the secrets stored in 1password.

If you want to sponsor any service,
please email private@opendal.apache.org with the subject line `Request to Add Secrets for <service>`.
Our PMC will review the request and reply to you.

After the request is approved,
you can use the secrets in the behavior tests when they are running on the GitHub Actions
(You need to be a committer of OpenDAL).

The email should also include the following information:

- The name of the service
- The secrets in key-value pairs

If the secrets have expiration dates, please also include the expiration dates.
We may need you to update the secrets in the future.

If the secrets are not under your control, please also include the contact information of the owner of the secrets.

And finally, thank you for your support!

---

---
url: https://opendal.apache.org/community/events/gsoc-proposal-guide
---
# GSoC Project Proposal Guidance

This document contains a short guide on how to structure your OpenDAL Google Summer of Code (GSoC) project proposal and how to increase the chance of your project proposal being accepted.

## Choosing a project

You should start by deciding on which project do you want to work on. You can use our [list of project ideas](https://github.com/apache/opendal/issues/4131)
as an inspiration, or you can come up with your own project idea. However, you should keep in mind that each GSoC project needs at least one mentor available. Therefore, if you come up with a completely new project idea, you should also try to find someone from the OpenDAL community who could mentor you on the project.

If you decide to propose your own project idea, you're most likely to be able to find a mentor if you can describe clearly the utility of the project to OpenDAL community.

We encourage you to think of your own interesting project ideas! There are plenty of things that can be done within the OpenDAL project and contributors are generally happy to discuss and help you narrow down your thoughts into a concrete proposal. Don't be shy!

## Interacting with the OpenDAL community

If you want to discuss our suggested project ideas or your own idea, you can do so on the [maillist](mailto:dev@opendal.apache.org) or [Discord](https://opendal.apache.org/discord). Make sure to listen to the feedback of the mentors, and try to incorporate it in your project proposal.

When communicating on the OpenDAL mail list or discord (and when interacting with the OpenDAL community in general), please remember to be polite and uphold the [ASF Code of Conduct](https://www.apache.org/foundation/policies/conduct). Keep in mind that most OpenDAL contributors (and GSoC OpenDAL project mentors) are volunteers, and work on OpenDAL in their free time, so please treat them with respect and avoid spamming.

## Creating the project proposal

Ultimately, the project proposal is the main deciding factor on whether your project will be accepted or not, so make sure that you put energy into making it as good as possible.

The proposal should contain (at least) the following things:
1) A descriptive title of the project that you want to work on
2) Information about yourself, including:
  - Description of your programming experience, attained education, university and study programme that you're currently studying, etc. (a short CV would be ideal)
  - Link to a portfolio of projects that you have worked on (e.g. a GitHub profile or a personal website)
  - Your knowledge of OpenDAL, since most projects will probably require at least some OpenDAL knowledge
  - Your existing open-source contribution experience. If you have already contributed to some open-source repositories, make sure to include a link to these contributions in your proposal!
  - Your preferred time zone (for communicating with the mentor(s))
  - Contact information
3) **Information about your proposed project**. This should be as detailed as possible, see more details [below](#project-information-and-timeline).
4) Information about other commitments that might affect your ability to work on the project during the GSoC period. These can include vacations, exams, other jobs or internships etc. It's not necessarily an issue to have other commitments, but it would be great to know about them in advance, if possible.

## Project information and timeline

This is the most important part of your project proposal. You should include an abstract that explains your project in one or two paragraphs, and then a very detailed description that explains what exactly do you want to achieve in the proposed project. The proposal should also clearly state the designated mentor(s) for your project (you should get in touch with them before submitting the proposal).

In addition to describing what do you intend to work on in the project, you should also specify the size of the project, according to the GSoC [documentation](https://google.github.io/gsocguides/student/time-management-for-students):
- Small: ~90 hours
- Medium: ~175 hours
- Large: ~350 hours

You should also create an approximate weekly plan of work and a list of deliverables. Recall that the default project duration is 12 weeks, but it can be [extended](https://google.github.io/gsocguides/student/time-management-for-students) (for medium and large projects) by up to 22 weeks.

- Describe a brief outline of the work that you plan to do, and try to estimate how will the work be split in the individual weeks of the project.
- Define milestones that you intend to achieve in specific weeks (e.g. finish X in week 4, deliver Y in the middle of the project, have a final version prepared one week before the end of the project, etc.).
  - You should focus specifically on the midterm point (week 6), because your mentor(s) will evaluate your progress at this time. You should be slightly more than half done at this moment, and have something reasonable to show.
  - In week 11 (one week before the end of the project), you should consider doing a "code freeze", and spend the last week to polish tests and documentation.

Of course, it is quite difficult to predict this timeline exactly in advance, and it is not a problem to modify it while the project runs, but try to guesstimate it to the best of your ability.

Furthermore, let us know what is your intended time commitment for working on the project. How many hours per day can you work on it? Are there specific days of the week when you can work on it? Is there some period of time from May to August where you know in advance that you won't be able to work on it? Please include this information in the proposal.

There is a [Community bonding](https://google.github.io/gsocguides/student/how-gsoc-works) period before the contributors start working on their projects. It is designed to help you learn about the community that you're going to contribute to, and to start familiarizing yourself with the code and/or technology of your project. Please include a short description of preparatory work that you intend to work on during this community bonding period (should your project be accepted).

## How to increase your chance of being accepted?

You can demonstrate your dedication (and ability) to work on the selected project proposal by contributing something related to it before your proposal is evaluated. This can encompass e.g. sending a pull request to the relevant repository, fixing a bug, writing documentation, etc. There is no specific template for these kinds of contributions, and it might not be possible to do for all types of projects. You can coordinate with the project mentors to find out if they can suggest some entry-level task for you.

You can also tell us more about your motivation in your proposal. Why did you choose OpenDAL for a GSoC project specifically? Do you like the OpenDAL language? Is the specific project that you want to work on sympathetic to you for some reason? We would like to know!

## Don't forget to submit!

You will need to submit your project proposal through the [Google Summer of Code](https://summerofcode.withgoogle.com/) website. Please keep the **deadline** (**2nd April 2024**) in mind, as there will be no extensions!

Good luck! :)

## How to decrease your chance of being accepted?

There are some actions and behaviours that will make it much less likely that your application will be considered, so you should avoid these. For example:

- Spamming or harassing mentors or other members of the OpenDAL community.
- Letting AI automatically generate your project proposal (you should put effort in it, don't be lazy!).
- Suggesting unreasonably grandiose project proposals, e.g. adding a garbage collector to OpenDAL.
- Suggesting unreasonably trivial project proposals, e.g. fixing a typo in the OpenDAL documentation. Remember that even the smallest [project size](https://google.github.io/gsocguides/student/time-management-for-students) should take about 90 hours!

> This guide was inspired by https://github.com/rust-lang/google-summer-of-code/blob/main/proposal-guide.md.

---

---
url: https://opendal.apache.org/community/events/ospp-proposal-guide
---
# OSPP Project Proposal Guidance

This document contains a short guide on how to structure your OpenDAL Open Source Promotion Plan (OSPP) project proposal and how to increase the chance of your project proposal being accepted.

## Choosing a project

You should start by deciding on which project do you want to work on. You can use our [list of project ideas](https://github.com/apache/opendal/issues/4554) as an inspiration.

## Interacting with the OpenDAL community

If you want to discuss our suggested project ideas, you can do so on the [maillist](mailto:dev@opendal.apache.org) or [Discord](https://opendal.apache.org/discord). Make sure to listen to the feedback of the mentors, and try to incorporate it in your project proposal.

When communicating on the OpenDAL mail list or discord (and when interacting with the OpenDAL community in general), please remember to be polite and uphold the [ASF Code of Conduct](https://www.apache.org/foundation/policies/conduct). Keep in mind that most OpenDAL contributors (and OSPP OpenDAL project mentors) are volunteers, and work on OpenDAL in their free time, so please treat them with respect and avoid spamming.

## Creating the project proposal

Ultimately, the project proposal is the main deciding factor on whether your project will be accepted or not, so make sure that you put energy into making it as good as possible.

- Please carefully read the [Project Application Suggestions](https://summer-ospp.ac.cn/help/en/proj_apply/).
- Prepare relevant materials based on the project requirements and refer to the [Project Application Template](https://summer-ospp.ac.cn/help/en/assets/Project-Application-Template.pdf).
- The quality of the project application is the primary criterion for the committee to evaluate whether the student's application is approved or not.
- This is the time to understand the project details and to become familiar with the community operation and etiquette.

## Project information and timeline

This is the most important part of your project proposal. You should include an abstract that explains your project in one or two paragraphs, and then a very detailed description that explains what exactly do you want to achieve in the proposed project. The proposal should also clearly state the designated mentor(s) for your project (you should get in touch with them before submitting the proposal).

- Describe a brief outline of the work that you plan to do, and try to estimate how will the work be split in the individual weeks of the project.
- Define milestones that you intend to achieve in specific weeks (e.g. finish X in week 4, deliver Y in the middle of the project, have a final version prepared one week before the end of the project, etc.).
    - You should focus specifically on the midterm point (week 6), because your mentor(s) will evaluate your progress at this time. You should be slightly more than half done at this moment, and have something reasonable to show.
    - In week 11 (one week before the end of the project), you should consider doing a "code freeze", and spend the last week to polish tests and documentation.

Of course, it is quite difficult to predict this timeline exactly in advance, and it is not a problem to modify it while the project runs, but try to guesstimate it to the best of your ability.

Furthermore, let us know what is your intended time commitment for working on the project. How many hours per day can you work on it? Are there specific days of the week when you can work on it? Is there some period of time from May to August where you know in advance that you won't be able to work on it? Please include this information in the proposal.
  
There is a Community bonding period before the contributors start working on their projects. It is designed to help you learn about the community that you're going to contribute to, and to start familiarizing yourself with the code and/or technology of your project. Please include a short description of preparatory work that you intend to work on during this community bonding period (should your project be accepted).

## How to increase your chance of being accepted?

You can demonstrate your dedication (and ability) to work on the selected project proposal by contributing something related to it before your proposal is evaluated. This can encompass e.g. sending a pull request to the relevant repository, fixing a bug, writing documentation, etc. There is no specific template for these kinds of contributions, and it might not be possible to do for all types of projects. You can coordinate with the project mentors to find out if they can suggest some entry-level task for you.

You can also tell us more about your motivation in your proposal. Why did you choose OpenDAL for a OSPP project specifically? Do you like the OpenDAL language? Is the specific project that you want to work on sympathetic to you for some reason? We would like to know!

## Don't forget to submit!

You will need to submit your project proposal through the [Open Source Promotion Plan](https://summer-ospp.ac.cn/) website. Please keep the **deadline** (**4th Jun 2024**) in mind, as there will be no extensions!

Good luck! :)

## How to decrease your chance of being accepted?

There are some actions and behaviours that will make it much less likely that your application will be considered, so you should avoid these. For example:

- Spamming or harassing mentors or other members of the OpenDAL community.
- Letting AI automatically generate your project proposal (you should put effort in it, don't be lazy!).
- Suggesting unreasonably grandiose project proposals, e.g. adding a garbage collector to OpenDAL.
- Suggesting unreasonably trivial project proposals, e.g. fixing a typo in the OpenDAL documentation.

> This guide was inspired by https://github.com/rust-lang/google-summer-of-code/blob/main/proposal-guide.md.

---

---
url: https://opendal.apache.org/community/category/committers
---
# Community

[Skip to main content](#%5F%5Fdocusaurus%5FskipToContent%5Ffallback)

[![Apache OpenDAL](/img/logo.svg)![Apache OpenDAL](/img/logo_dark.svg)](/)

[Docs](/)[Blog](/blog/)[Community](/community/)[Download](/download/)

[ASF](#)
* [Foundation](https://www.apache.org/)
* [License](https://www.apache.org/licenses/)
* [Events](https://www.apache.org/events/current-event.html)
* [Privacy](https://privacy.apache.org/policies/privacy-policy-public.html)
* [Security](https://www.apache.org/security/)
* [Sponsorship](https://www.apache.org/foundation/sponsorship.html)
* [Thanks](https://www.apache.org/foundation/thanks.html)
* [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)

[](https://github.com/apache/opendal)[](https://discord.gg/XQy8yGR2dg)

* [Community](/community/)
* [Maturity](/community/maturity/)
* [Security](/community/security/)
* [Events](/community/category/events/)
* [Release](/community/category/release/)  
   * [Create a release](/community/release/)  
   * [Verify a release candidate](/community/release/verify/)  
   * [Reference](/community/category/reference/)
* [Committers](/community/category/committers/)  
   * [Onboarding](/community/committers/onboarding/)  
   * [Request for adding secrets](/community/committers/request%5Ffor%5Fadding%5Fsecrets/)
* [PMC Members](/community/category/pmc-members/)  
   * [Onboarding](/community/pmc%5Fmembers/onboarding/)  
   * [Nominate Committer](/community/pmc%5Fmembers/nominate-committer/)  
   * [Nominate PMC Member](/community/pmc%5Fmembers/nominate-pmc-member/)  
   * [Board reporting](/community/pmc%5Fmembers/board-reporting/)

* Committers

# Committers

[📄️ OnboardingThis document primarily serves as a guide for new committers to Apache OpenDAL™.](/community/committers/onboarding/)

[📄️ Request for adding secretsOpenDAL's behavior tests depend on the secrets stored in 1password.](/community/committers/request%5Ffor%5Fadding%5Fsecrets/)

[PreviousSetup GPG key](/community/release/reference/setup%5Fgpg/)[NextOnboarding](/community/committers/onboarding/)

[![Apache Software Foundation](/./img/asf_logo_wide.svg)![Apache Software Foundation](/./img/asf_logo_wide.svg)](https://www.apache.org/)

Copyright © 2022-2025, The Apache Software Foundation  
Apache OpenDAL, OpenDAL, Apache, the Apache feather and the Apache OpenDAL project logo are either registered trademarks or trademarks of the Apache Software Foundation.

---

---
url: https://opendal.apache.org/community/maturity
---
# Maturity Assessment for Apache OpenDAL™

The goals of this maturity model are to describe how Apache projects operate in a concise and high-level way, and to provide a basic framework that projects may choose to use to evaluate themselves.

More details can be found [here](https://community.apache.org/apache-way/apache-project-maturity-model.html).

## Status of this assessment

This assessment is evaluated during OpenDAL's graduation, which is finished on 2024-01-18.

## Maturity model assessment

The following table is filled according to the [Apache Maturity Model](https://community.apache.org/apache-way/apache-project-maturity-model.html). Mentors and community members are welcome to comment and modify it.

### CODE

| **ID**   | **Description**                                                                                                                                                                                                                                                | **Status**                                                                                                                                                                                                          |
| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **CD10** | The project produces Open Source software for distribution to the public, at no charge.                                                                                                                                                                        | **YES** The project source code is licensed under the `Apache License 2.0`.                                                                                                                                         |
| **CD20** | Anyone can easily discover and access the project's code..                                                                                                                                                                                                     | **YES** The [official website](https://opendal.apache.org/) includes `GitHub` link which can access the project's repository on GitHub directly.                                                                    |
| **CD30** | Anyone using standard, widely-available tools, can build the code in a reproducible way.                                                                                                                                                                       | **YES**  Apache OpenDAL provide `how-to-build` document for every component to tell user how to compile on bare metal, such as the [core's](https://github.com/apache/opendal/blob/main/core/CONTRIBUTING.md).      |
| **CD40** | The full history of the project's code is available via a source code control system, in a way that allows anyone to recreate any released version.                                                                                                            | **YES** It depends on git, and anyone can view the full history of the project via commit logs.                                                                                                                     |
| **CD50** | The source code control system establishes the provenance of each line of code in a reliable way, based on strong authentication of the committer. When third parties contribute code, commit messages provide reliable information about the code provenance. | **YES** The project uses GitHub and managed by Apache Infra, it ensuring provenance of each line of code to a committer. And the third-party contributions are accepted in accordance with the contributing guides. |

### LICENSE

| **ID**   | **Description**                                                                                                                                                                   | **Status**                                                                                                                                                                             |
| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **LC10** | The Apache License, version 2.0, covers the released code.                                                                                                                        | **YES** The [LICENSE](https://github.com/apache/opendal/blob/main/LICENSE) is in GitHub repository. And all source files are with APLv2 header, checked by `korandoru/hawkeye@v3.6.0`. |
| **LC20** | Libraries that are mandatory dependencies of the project's code do not create more restrictions than the Apache License does.                                                     | **YES** All dependencies are listed.                                                                                                                                                   |
| **LC30** | The libraries mentioned in LC20 are available as Open Source software.                                                                                                            | **YES** All dependencies are listed are available as Open Source software                                                                                                              |
| **LC40** | Committers are bound by an Individual Contributor Agreement (the "Apache iCLA") that defines which code they may commit and how they need to identify code that is not their own. | **YES** All committers have iCLAs.                                                                                                                                                     |
| **LC50** | The project clearly defines and documents the copyright ownership of everything that the project produces.                                                                        | **YES** And all source files are with APLv2 header, checked by `korandoru/hawkeye@v3.6.0`.                                                                                             |

### Releases

| **ID**   | **Description**                                                                                                                                                        | **Status**                                                                                                                                                                               |
| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **RE10** | Releases consist of source code, distributed using standard and open archive formats that are expected to stay readable in the long term.                              | **YES** Source release is distributed via [dist.apache.org](https://dist.apache.org/repos/dist/release/opendal/) and linked from [download page](https://opendal.apache.org/download/).  |
| **RE20** | The project's PPMC (Project Management Committee, see CS10) approves each software release in order to make the release an act of the Foundation.                      | **YES** All releases have been voted at dev@opendal.apache.org and general@incubator.apache.org, and have at least 3 PPMC member's votes.                                                |
| **RE30** | Releases are signed and/or distributed along with digests that anyone can reliably use to validate the downloaded archives.                                            | **YES** All releases are signed, and the [KEYS](https://dist.apache.org/repos/dist/release/opendal/KEYS) are available.                                                                  |
| **RE40** | The project can distribute convenience binaries alongside source code, but they are not Apache Releases, they are provided with no guarantee.                          | **YES** User can easily build binaries from source code, and we do not provide binaries as Apache Releases.                                                                              |
| **RE50** | The project documents a repeatable release process so that someone new to the project can independently generate the complete set of artifacts required for a release. | **YES** We can follow the [Release guide](https://opendal.apache.org/community/committers/release) to make a new Apache OpenDAL release, and so far we had 6 different release managers. |

### Quality

| **ID**   | **Description**                                                                                                                                                                               | **Status**                                                                                                                                                                             |
| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **QU10** | The project is open and honest about the quality of its code. Various levels of quality and maturity for various modules are natural and acceptable as long as they are clearly communicated. | **YES** We encourage user to [report issues](https://github.com/apache/opendal/issues).                                                                                                |
| **QU20** | The project puts a very high priority on producing secure software.                                                                                                                           | **YES** All security issues will be addressed within 3 days.                                                                                                                           |
| **QU30** | The project provides a well-documented, secure and private channel to report security issues, along with a documented way of responding to them.                                              | **Yes** The official website provides a [security page](https://opendal.apache.org/community/security)                                                                                 |
| **QU40** | The project puts a high priority on backwards compatibility and aims to document any incompatible changes and provide tools and documentation to help users transition to new features.       | **Yes** We follow semantic versions. As long as it's within one major version, it's backward compatible. And when any breaking changes added, we provide corresponding upgrade guides. |
| **QU50** | The project strives to respond to documented bug reports in a timely manner.                                                                                                                  | **YES** The project has resolved 1000+ issues and 2300+ pull requests so far, with very prompt response.                                                                               |

### Community

| **ID**   | **Description**                                                                                                                                                        | **Status**                                                                                                                                                                                            |
| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **CO10** | The project has a well-known homepage that points to all the information required to operate according to this maturity model.                                         | **YES** The [official website](https://opendal.apache.org/) includes all information user need to run Apache OpenDAL.                                                                                 |
| **CO20** | The community welcomes contributions from anyone who acts in good faith and in a respectful manner, and who adds value to the project.                                 | **Yes** We provide contributing guides for every component. And we also have a [general contributing guide](https://github.com/apache/opendal/blob/main/CONTRIBUTING.md)                              |
| **CO30** | Contributions include source code, documentation, constructive bug reports, constructive discussions, marketing and generally anything that adds value to the project. | **YES** All good contributions including code and non-code are welcomed.                                                                                                                              |
| **CO40** | The community strives to be meritocratic and gives more rights and responsibilities to contributors who, over time, add value to the project.                          | **YES** The community has elected 2 new PPMC members and 7 new committers so far.                                                                                                                     |
| **CO50** | The project documents how contributors can earn more rights such as commit access or decision power, and applies these principles consistently.                        | **YES** The community has clear docs on nominating committers and PPMC members                                                                                                                        |
| **CO60** | The community operates based on consensus of its members (see CS10) who have decision power. Dictators, benevolent or not, are not welcome in Apache projects.         | **YES** All decisions are made after vote by community members.                                                                                                                                       |
| **CO70** | The project strives to answer user questions in a timely manner.                                                                                                       | **YES** We use dev@opendal.apache.org, [GitHub issue](https://github.com/apache/opendal/issues) and [GitHub discussion](https://github.com/apache/opendal/discussions) to do this in a timely manner. |

### Consensus

| **ID**   | **Description**                                                                                                                                                                                                           | **Status**                                                                                                 |
| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |
| **CS10** | The project maintains a public list of its contributors who have decision power. The project's PPMC (Project Management Committee) consists of those contributors.                                                        | **Yes** See [members](https://opendal.apache.org/community/#people) with all PPMC members and committers.  |
| **CS20** | Decisions require a consensus among PPMC members and are documented on the project's main communications channel. The PPMC takes community opinions into account, but the PPMC has the final word.                        | **YES** All decisions are made by votes on dev@opendal.apache.org, and with at least 3 +1 votes from PPMC. |
| **CS30** | The project uses documented voting rules to build consensus when discussion is not sufficient.                                                                                                                            | **YES** The project uses the standard ASF voting rules.                                                    |
| **CS40** | In Apache projects, vetoes are only valid for code commits. The person exercising the veto must justify it with a technical explanation, as per the Apache voting rules defined in CS30.                                  | **YES** Apache OpenDAL community has not used the veto power yet except for code commits.                  |
| **CS50** | All "important" discussions happen asynchronously in written form on the project's main communications channel. Offline, face-to-face or private discussions that affect the project are also documented on that channel. | **YES** All important discussions and conclusions are recorded in written form.                            |

### Independence

| **ID**   | **Description**                                                                          | **Status**                                                                                                                                                               |
| -------- | ---------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **IN10** | The project is independent from any corporate or organizational influence.               | **YES**  The PPMC members and committer of Apache OpenDAL are from several different companies, and majority of them are NOT From the company that donated this project. |
| **IN20** | Contributors act as themselves, not as representatives of a corporation or organization. | **YES** The contributors act on their own initiative without representing a corporation or organization.                                                                 |

---

---
url: https://opendal.apache.org/community/pmc_members/board-reporting
---
# Board reporting

Apache PMC members are responsible for reporting the status of their projects to the Apache Board of Directors. This page provides guidance on how to prepare and submit reports for Apache OpenDAL™.

### Frequency of Reporting

New graduates from the Apache Incubator are required to report monthly for the first three months, then quarterly.

**The current reporting frequency for Apache OpenDAL™ is once per quarter.** 

### Report Preparation

It's recommended to discuss the report on dev@opendal.apache.org ([subscribe](mailto:dev-subscribe@opendal.apache.org)), inviting all members to contribute. Here are the critical points your report should address:

- Any concerns that require the attention of the ASF Board.
- Legal, infrastructure, cross-project, or personal issues that need addressing.
- Achievements (releases, milestones, etc.) since the last report.
- Any other significant points or thoughts you think should be included.

You can discuss the issues based on the template or refer to [previous reports](https://hackmd.io/@opendal/asf-board-report-2024-04) for preparation.

### Report Writing and Submission

The report should be written in Markdown format and submitted to the Apache Board of Directors via the [Board Reporting Service](https://reporter.apache.org/).

---

---
url: https://opendal.apache.org/community/pmc_members/nominate-committer
---
# Nominate Committer

This document mainly introduces how a PMC member nominates a new committer.

## Start vote about the candidate

Start a vote about the candidate via sending email to: <private@opendal.apache.org>:

- candidate_name: The full name of the candidate.
- candidate_github_id: The GitHub id of the candidate.

Title:

```
[VOTE] Add candidate ${candidate_name} as a new committer
```

Content:

```
Hi, All OpenDAL PMC members.
  
I'd like to take this chance to call the vote for inviting committed
contributor ${candidate_name} (GitHub id: ${candidate_github_id}) as a new committer of Apache 
OpenDAL.

${candidate_contributions}

${candidate_name}'s great contributions can be found:

- GitHub Account: https://github.com/${candidate_github_id}
- GitHub Pull Requests: https://github.com/apache/opendal/pulls?q=is%3Apr+author%3A${candidate_github_id}
- GitHub Issues: https://github.com/apache/opendal/issues?q=is%3Aissue+involves%3A${candidate_github_id}

Please make your valuable evaluation on whether we could invite ${candidate_name} as a
committer:

[ +1 ] Agree to add ${candidate_name} as a committer of OpenDAL.
[  0 ] Have no sense.
[ -1 ] Disagree to add ${candidate_name} as a committer of OpenDAL, because .....

This vote starts from the moment of sending and will be open for 3 days.
 
Thanks and best regards,

${your_name}
```

Example: <https://lists.apache.org/thread/j16lvkyrmvg8wyf3z4gqpjky5m594jhy> (Private Link)

After at least 3 `+1` binding vote and no veto, claim the vote result:

Title:

```
[RESULT][VOTE] Add candidate ${candidate_name} as a new committer
```

Content:

```
Hi, all:

The vote for "Add candidate ${candidate_name} as a new committer" has PASSED and closed now.

The result is as follows:

4 binding +1 Votes:
- voter names

Vote thread: https://lists.apache.org/thread/j16lvkyrmvg8wyf3z4gqpjky5m594jhy

Then I'm going to invite ${candidate_name} to join us.

Thanks for everyone's support!

${your_name}
```

## Send invitation to the candidate

Send an invitation to the candidate and cc <private@opendal.apache.org>:

Title:

```
Invitation to become OpenDAL Committer: ${candidate_name}
```

Content:

```
Hello ${candidate_name},

The OpenDAL PMC hereby offers you committer privileges
to the project. These privileges are offered on the
understanding that you'll use them reasonably and with
common sense. We like to work on trust rather than
unnecessary constraints. 

Being a committer enables you to more easily make 
changes without needing to go through the patch 
submission process.

Being a committer does not require you to 
participate any more than you already do. It does 
tend to make one even more committed. You will 
probably find that you spend more time here.

Of course, you can decline and instead remain as a 
contributor, participating as you do now.

A. This personal invitation is a chance for you to 
accept or decline in private.  Either way, please 
let us know in reply to the [private@opendal.apache.org] 
address only.

B. If you accept, the next step is to register an iCLA:
    1. Details of the iCLA and the forms are found 
    through this link: https://www.apache.org/licenses/#clas

    2. Instructions for its completion and return to 
    the Secretary of the ASF are found at
    https://www.apache.org/licenses/#submitting

    3. When you transmit the completed iCLA, request 
    to notify the Apache OpenDAL and choose a 
    unique Apache ID. Look to see if your preferred 
    ID is already taken at 
    https://people.apache.org/committer-index.html
    This will allow the Secretary to notify the PMC 
    when your iCLA has been recorded.

When recording of your iCLA is noted, you will 
receive a follow-up message with the next steps for 
establishing you as a committer.

With the expectation of your acceptance, welcome!

${your_name} (as represents of The Apache OpenDAL PMC)
```

## Add the candidate to the committer list

After the candidate accepts the invitation and the iCLA is recorded, add the candidate to the committer list by [whimsy roster tools](https://whimsy.apache.org/roster/committee/opendal)

![](roster-add-committer.png)

## Announcement

Once the nominee accepts the invitation and the commit bit is granted, it's encouraged to send an announcement email to dev@opendal.apache.org to welcome the new committers. Here is an email template:

```text
Hello, everyone

On behalf of the Apache OpenDAL PMC, I'm happy to announce that
${candidate_name} has accepted the invitation to become a committer of
Apache OpenDAL.

Welcome, and thank you for your contributions!

${your name}
```

---

---
url: https://opendal.apache.org/community/pmc_members/nominate-pmc-member
---
# Nominate PMC Member

This document mainly introduces how a PMC member nominates a new PMC member.

## Start vote about the candidate

Start a vote about the candidate via sending email to: <private@opendal.apache.org>:

- candidate_name: The full name of the candidate.
- candidate_github_id: The GitHub id of the candidate.

Title:

```
[VOTE] Add candidate ${candidate_name} as a new PMC member
```

Content:

```
Hi, All OpenDAL PMC members.
  
I would like to nominate ${candidate_name} (GitHub id: ${candidate_github_id}) as a candidate for the OpenDAL PMC member. Since becoming an OpenDAL committer, ${candidate_name} has made significant contributions to various modules of the project.

${candidate_name}'s great contributions can be found:

- GitHub Account: https://github.com/${candidate_github_id}
- GitHub Pull Requests: https://github.com/apache/opendal/pulls?q=is%3Apr+author%3A${candidate_github_id}
- GitHub Issues: https://github.com/apache/opendal/issues?q=is%3Aissue+involves%3A${candidate_github_id}

Please make your valuable evaluation on whether we could invite ${candidate_name} as a
PMC member:

[ +1 ] Agree to add ${candidate_name} as a PMC member of OpenDAL.
[ 0  ] Have no sense.
[ -1 ] Disagree to add ${candidate_name} as a PMC member of OpenDAL, because .....

This vote starts from the moment of sending and will be open for 3 days.
 
Thanks and best regards,

${your_name}
```

Example: <https://lists.apache.org/thread/yg2gz2tof3cvbrgp1wxzk6mf9o858h7t> (Private Link)

After at least 3 `+1` binding vote and no veto, claim the vote result:

Title:

```
[RESULT][VOTE] Add candidate ${candidate_name} as a new PMC member
```

Content:

```
Hi, all:

The vote for "Add candidate ${candidate_name} as a new PMC member" has PASSED and closed now.

The result is as follows:

4 binding +1 Votes:
- voter names

Vote thread: https://lists.apache.org/thread/yg2gz2tof3cvbrgp1wxzk6mf9o858h7t

Then I'm going to invite ${candidate_name} to join us.

Thanks for everyone's support!

${your_name}
```

## Send NOTICE to Board after VOTE PASSED

The nominating PMC member should send a message to the Board <board@apache.org> with a reference to the vote result in the following form:

Title:

```
[NOTICE] ${candidate_name} for Apache OpenDAL PMC
```

Content:

```
${candidate_name} has been voted as a new member of the Apache OpenDAL PMC. the vote thread is at: 

https://lists.apache.org/thread/yg2gz2tof3cvbrgp1wxzk6mf9o858h7t
```

## Send invitation to the candidate

Send an invitation to the candidate and cc <private@opendal.apache.org>:

Title:

```
Invitation to become Apache OpenDAL PMC Member: ${candidate_name}
```

Content:

```
Hello ${candidate_name},

In recognition of your contributions to Apache OpenDAL, the OpenDAL PMC has recently voted to add you as a PMC member. The role of a PMC member grants you access to the Project Management Committee (PMC) and enables you to take on greater responsibilities within the OpenDAL project. We hope that you accept this invitation and continue to help us make Apache OpenDAL better.

Please reply to private@opendal.apache.org using the 'reply all' function for your responses.

With the expectation of your acceptance, welcome!

${your_name} (as represents of The Apache OpenDAL PMC)
```

## Add the candidate to the PMC member list

After the candidate accepts the invitation, add the candidate to the PMC member list by [whimsy roster tools](https://whimsy.apache.org/roster/committee/opendal)

![](roster-add-pmc-member.png)

---

---
url: https://opendal.apache.org/community/pmc_members/onboarding
---
# Onboarding

This document primarily serves as a guide for new PMC members to Apache OpenDAL™.

Upon receiving an invitation email from OpenDAL PMC, a new PMC member should consider whether accepting.
If they decide in favor, they should select "Reply All" and express their decision.

## Subscribe to Private Mailing List

1. Send email to [private-subscribe@opendal.apache.org](mailto:private-subscribe@opendal.apache.org)
2. You will receive an email with the subject "confirm subscribe to private@opendal.apache.org"
3. Reply to the email with "Confirm" in the body

If you receive an email with the subject "WELCOME to private@opendal.apache.org", you have successfully subscribed to the private mailing list.

It's required for PMC members to subscribe the private mailing list. The private list is only for confidential discussions that should not be made public, such as the suitability of a particular individual to become a committer or a member of the PMC.

## Setup 1Password Secrets Access

Once you have been added to OpenDAL's PMC member list, you will gain the access to all OpenDAL's secrets.

- Please refrain from modifying secrets in the `Services` vault as this could disrupt our integration tests.
- Ensure that you keep all secrets secure and avoid sharing them with others or making them public. Do not commit them anywhere else.

## Read PMC Member Guide

Please read [PMC GUIDE](https://www.apache.org/dev/pmc.html) to know about the general responsibilities of Project Management Committee (PMC) members in managing our project and common how-to procedures for day to day maintenance.

---

---
url: https://opendal.apache.org/community/release/reference/generate_release_note
---
# Generate release note

This document describes how to generate release notes using GitHub:

1. Go to https://github.com/apache/opendal/releases/new to start a new release.
2. Fill the tag with `draft`.
3. Click on `Generate release notes` to generate them.
4. Copy the generated content and close the page.

Please note that we only use this feature to generate release notes, so please do not click on `Publish Release` or `Save draft`. We will publish it after creating the tag.

---

---
url: https://opendal.apache.org/community/release/reference/setup_gpg
---
# Setup GPG key

:::note

This section is a brief from the [Cryptography with OpenPGP](https://infra.apache.org/openpgp.html) guideline.

:::

## Install GPG

For more details, please refer to [GPG official website](https://www.gnupg.org/download/index.html). Here shows one approach to install GPG with `apt`:

```shell
sudo apt install gnupg2
```

## Generate GPG Key

Attentions:

- Name is best to keep consistent with your full name of Apache ID;
- Email should be the Apache email;
- Name is best to only use English to avoid garbled.

Run `gpg --full-gen-key` and complete the generation interactively:

```shell
gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
  (14) Existing key from card
Your selection? 1 # input 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096 # input 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0 # input 0
Key does not expire at all
Is this correct? (y/N) y # input y

GnuPG needs to construct a user ID to identify your key.

Real name: Hulk Lin               # input your name
Email address: hulk@apache.org    # input your email
Comment:                          # input some annotations, optional
You selected this USER-ID:
    "Hulk <hulk@apache.org>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

# Input the security key
┌──────────────────────────────────────────────────────┐
│ Please enter this passphrase                         │
│                                                      │
│ Passphrase: _______________________________          │
│                                                      │
│       <OK>                              <Cancel>     │
└──────────────────────────────────────────────────────┘
# key generation will be done after your inputting the key with the following output
gpg: key E49B00F626B marked as ultimately trusted
gpg: revocation certificate stored as '/Users/hulk/.gnupg/openpgp-revocs.d/F77B887A4F25A9468C513E9AA3008E49B00F626B.rev'
public and secret key created and signed.

pub   rsa4096 2022-07-12 [SC]
      F77B887A4F25A9468C513E9AA3008E49B00F626B
uid           [ultimate] hulk <hulk@apache.org>
sub   rsa4096 2022-07-12 [E]
```

## Upload your key to public GPG keyserver

Firstly, list your key:

```shell
gpg --list-keys
```

The output is like:

```shell
-------------------------------
pub   rsa4096 2022-07-12 [SC]
      F77B887A4F25A9468C513E9AA3008E49B00F626B
uid           [ultimate] hulk <hulk@apache.org>
sub   rsa4096 2022-07-12 [E]
```

Then, send your key id to key server:

```shell
gpg --keyserver keys.openpgp.org --send-key <key-id> # e.g., F77B887A4F25A9468C513E9AA3008E49B00F626B
```

Among them, `keys.openpgp.org` is a randomly selected keyserver, you can use `keyserver.ubuntu.com` or any other full-featured keyserver.

## Check whether the key is created successfully

Uploading takes about one minute; after that, you can check by your email at the corresponding keyserver.

Uploading keys to the keyserver is mainly for joining a [Web of Trust](https://infra.apache.org/release-signing.html#web-of-trust).

## Add your GPG public key to the KEYS document

:::info

`SVN` is required for this step.

:::

The svn repository of the release branch is: https://dist.apache.org/repos/dist/release/opendal

Please always add the public key to KEYS in the release branch:

```shell
svn co https://dist.apache.org/repos/dist/release/opendal opendal-dist
# As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it.
cd opendal-dist
(gpg --list-sigs YOUR_NAME@apache.org && gpg --export --armor YOUR_NAME@apache.org) >> KEYS # Append your key to the KEYS file
svn add .   # It is not needed if the KEYS document exists before.
svn ci -m "add gpg key for YOUR_NAME" # Later on, if you are asked to enter a username and password, just use your apache username and password.
```

## Upload the GPG public key to your GitHub account

- Enter https://github.com/settings/keys to add your GPG key.
- Please remember to bind the email address used in the GPG key to your GitHub account (https://github.com/settings/emails) if you find "unverified" after adding it.

---

---
url: https://opendal.apache.org/community/release
---
# Create a release

This document mainly introduces how the release manager
releases a new version of Apache OpenDAL™ in accordance with the Apache requirements.

## Introduction

`Source Release` is the key point which Apache values, and is also necessary for an ASF release.

Please remember that publishing software has legal consequences.

This guide complements the foundation-wide policies and guides:

- [Release Policy](https://www.apache.org/legal/release-policy.html)
- [Release Distribution Policy](https://infra.apache.org/release-distribution)
- [Release Creation Process](https://infra.apache.org/release-publishing.html)

## Some Terminology of release

In the context of our release, we use several terms to describe different stages of the release process.

Here's an explanation of these terms:

- `opendal_version`: the version of OpenDAL to be released, like `0.46.0`.
- `release_version`: the version of release candidate, like `0.46.0-rc.1`.
- `rc_version`: the minor version for voting round, like `rc.1`.
- `maven_artifact_number`: the number for Maven staging artifacts, like `1010`. The number can be found by searching "opendal" on https://repository.apache.org/#stagingRepositories. And the Maven staging artifacts will be created automatically when we push a git tag to GitHub for now.

## Preparation

:::caution

This section is the requirements for individuals who are new to the role of release manager.

:::

Refer to [Setup GPG Key](reference/setup_gpg.md) to make sure the GPG key has been set up.

## Start discussion about the next release

Start a discussion at [OpenDAL Discussion General](https://github.com/apache/opendal/discussions/categories/general):

Title:

```
[DISCUSS] Release Apache OpenDAL ${release_version}
```

Content:

```
Hello, Apache OpenDAL Community,

This is a call for a discussion to release Apache OpenDAL version ${opendal_version}.

The change lists about this release:

https://github.com/apache/opendal/compare/v${opendal_last_version}...main

Please leave your comments here about this release plan. We will bump the version in the repo and start the release process after the discussion.

Thanks

${name}
```

## Start a tracking issue about the next release

Start a [tracking issue on GitHub](https://github.com/apache/opendal/issues/new?template=3-new-release.md) for the upcoming release to track all tasks that need to be completed.

## Release List

Update the version list in the `dev/src/release/package.rs` file.

For example:

- If there is any breaking change, please bump the `minor` version instead of the `patch` version.
- If this package is not ready for release, please skip.

## GitHub Side

### Bump version in project

Run `just update-version` to bump the version in the project.

### Update docs

- Update `CHANGELOG.md`, refer to [Generate Release Note](reference/generate_release_note.md) for more information.
- Update `core/src/docs/upgrade.md` if there are breaking changes in `core`
- Make sure every released bindings' `upgrade.md` has been updated.
    - java: `bindings/java/upgrade.md`
    - node.js: `bindings/nodejs/upgrade.md`
    - python: `bindings/python/upgrade.md`

### Generate dependencies list

Download and setup `cargo-deny`. You can refer to [cargo-deny](https://embarkstudios.github.io/cargo-deny/cli/index.html).

Running `python3 ./scripts/dependencies.py generate` to update the dependency list of every package.

### Push release candidate tag

After bump version PR gets merged, we can create a GitHub release for the release candidate:

- Create a tag at `main` branch on the `Bump Version` / `Patch up version` commit: `git tag -s "v0.46.0-rc.1"`, please correctly check out the corresponding commit instead of directly tagging on the main branch.
- Push tags to GitHub: `git push --tags`.


:::note

Pushing a Git tag to GitHub repo will trigger a GitHub Actions workflow that creates a staging Maven release on https://repository.apache.org which can be verified on voting.

:::

### Check the GitHub action status

After pushing the tag, we need to check the GitHub action status to make sure the release candidate is created successfully.

- Python: [Bindings Python CI](https://github.com/apache/opendal/actions/workflows/ci_bindings_python.yml)
- Java: [Bindings Java CI](https://github.com/apache/opendal/actions/workflows/ci_bindings_java.yml) and [Bindings Java Release](https://github.com/apache/opendal/actions/workflows/release_java.yml)
- Node.js: [Bindings Node.js CI](https://github.com/apache/opendal/actions/workflows/ci_bindings_nodejs.yml)

In the most cases, it would be great to rerun the failed workflow directly when you find some failures. But if a new code patch is needed to fix the failure, you should create a new release candidate tag, increase the rc number and push it to GitHub.

## ASF Side

If any step in the ASF Release process fails and requires code changes,
we will abandon that version and prepare for the next one.
Our release page will only display ASF releases instead of GitHub Releases.

Additionally, we should also drop the staging Maven artifacts on https://repository.apache.org.

### Create an ASF Release

After GitHub Release has been created, we can start to create ASF Release.

- Checkout to released tag. (e.g. `git checkout v0.46.0-rc.1`, tag is created in the previous step)
- Use the release script to create a new release: `just release`
  - This script will generate the release candidate artifacts under `dist`, including:
    - `apache-opendal-{package}-{version}-src.tar.gz`
    - `apache-opendal-{package}-{version}-src.tar.gz.asc`
    - `apache-opendal-{package}-{version}-src.tar.gz.sha512`
- Push the newly created branch to GitHub

This script will create a new release under `dist`.

For example:

```shell
dist
├── apache-opendal-bindings-c-0.44.2-src.tar.gz
├── apache-opendal-bindings-c-0.44.2-src.tar.gz.asc
├── apache-opendal-bindings-c-0.44.2-src.tar.gz.sha512
...
├── apache-opendal-core-0.45.0-src.tar.gz
├── apache-opendal-core-0.45.0-src.tar.gz.asc
├── apache-opendal-core-0.45.0-src.tar.gz.sha512
├── apache-opendal-integrations-dav-server-0.0.0-src.tar.gz
├── apache-opendal-integrations-dav-server-0.0.0-src.tar.gz.asc
├── apache-opendal-integrations-dav-server-0.0.0-src.tar.gz.sha512
├── apache-opendal-integrations-object_store-0.42.0-src.tar.gz
├── apache-opendal-integrations-object_store-0.42.0-src.tar.gz.asc
└── apache-opendal-integrations-object_store-0.42.0-src.tar.gz.sha512

1 directory, 60 files
```

### Upload artifacts to the SVN dist repo

:::info

SVN is required for this step.

:::

The svn repository of the dev branch is: <https://dist.apache.org/repos/dist/dev/opendal>

First, checkout OpenDAL to local directory:

```shell
# As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it.
svn co https://dist.apache.org/repos/dist/dev/opendal opendal-dist-dev
```

Then, upload the artifacts:

> The `${release_version}` here should be like `0.46.0-rc.1`

```shell
cd opendal-dist-dev
# create a directory named by version
mkdir ${release_version}
# copy source code and signature package to the versioned directory
cp ${repo_dir}/dist/* ${release_version}/
# check svn status
svn status
# add to svn
svn add ${release_version}
# check svn status
svn status
# commit to SVN remote server
svn commit -m "Prepare for ${release_version}"
```

Visit <https://dist.apache.org/repos/dist/dev/opendal/> to make sure the artifacts are uploaded correctly.

### Close the Nexus staging repo

To verify the Maven staging artifacts in the next step, close the Nexus staging repo as below.

1. Open https://repository.apache.org/#stagingRepositories with your Apache ID login.
2. Find the artifact `orgapacheopendal-${maven_artifact_number}`, click the "Close" button.

The `close` operation means that the artifacts are ready for voting.

:::caution

If the vote failed, click "Drop" to drop the staging Maven artifacts.

:::

### Rescue

If you accidentally published wrong or unexpected artifacts, like wrong signature files, wrong sha256 files,
please cancel the release for the current `release_version`,
_increase th RC counting_ and re-initiate a release with the new `release_version`.
And remember to delete the wrong artifacts from the SVN dist repo.
Additionally, you should also drop the staging Maven artifacts on https://repository.apache.org.

## Voting

OpenDAL requires votes from both the OpenDAL Community.

Start a VOTE at [OpenDAL Discussion General](https://github.com/apache/opendal/discussions/categories/general):

Title:

```
[VOTE] Release Apache OpenDAL ${release_version} - Vote Round 1
```

Content:

```
Hello, Apache OpenDAL Community,

This is a call for a vote to release Apache OpenDAL version ${opendal_version}.

The tag to be voted on is ${opendal_version}.

The release candidate:

https://dist.apache.org/repos/dist/dev/opendal/${release_version}/

Keys to verify the release candidate:

https://downloads.apache.org/opendal/KEYS

Git tag for the release:

https://github.com/apache/opendal/releases/tag/v${release_version}

Maven staging repo:

https://repository.apache.org/content/repositories/orgapacheopendal-${maven_artifact_number}/

Pypi testing repo:

https://test.pypi.org/project/opendal/

Website staged:

https://opendal-v${release_version | replace('.', '-')}.staged.apache.org/

Please download, verify, and test.

The VOTE will be open for at least 72 hours and until the necessary
number of votes are reached.

- [ ] +1 approve
- [ ] +0 no opinion
- [ ] -1 disapprove with the reason

To learn more about apache opendal, please see https://opendal.apache.org/

Checklist for reference:

- [ ] Download links are valid.
- [ ] Checksums and signatures.
- [ ] LICENSE/NOTICE files exist
- [ ] No unexpected binary files
- [ ] All source files have ASF headers
- [ ] Can compile from source

Use our verify.py to assist in the verify process:

    svn co https://dist.apache.org/repos/dist/dev/opendal/${release_version}/ opendal-dev
    cd opendal-dev
    curl -sSL https://github.com/apache/opendal/raw/v${release_version}/scripts/verify.py -o verify.py
    python verify.py

Thanks

${name}
```

Example: <https://github.com/apache/opendal/discussions/5211>

The vote should be open for **at least 72 hours** except the following cases:

1. Security issues
2. The wild user affected bug fixes
3. Any other emergency cases

The Release manager should claim the emergency cases in the vote email if he wants to vote it rapidly.

> Tips: The 72 hours is the minimum time for voting, so we can ensure that community members from various time zones can participate in the verification process.

After at least 3 `+1` binding vote ([from OpenDAL PMC member](https://people.apache.org/phonebook.html?project=opendal)) and more +1 bindings than -1 bindings, claim the vote result:

Title:

```
[RESULT][VOTE] Release Apache OpenDAL ${release_version} - Vote Round 1
```

Content:

```
Hello, Apache OpenDAL Community,

The vote to release Apache OpenDAL ${release_version} has passed.

The vote PASSED with 3 +1 binding and 1 +1 non-binding votes, no +0 or -1 votes:

Binding votes:

- xxx
- yyy
- zzz

Non-Binding votes:

- aaa

Vote thread: ${vote_thread_url}

Thanks

${name}
```

It's better to use the real name or the public name which is displayed on the voters' profile page,
or Apache ID of the voter, to show who voted in the vote result email,
and avoid using nicknames, it will make the vote result hard for others to track the voter.
We should make sure the binding votes are from the people who have the right to vote the binding one.

Example: <https://lists.apache.org/thread/xk5myl10mztcfotn59oo59s4ckvojds6>

## Official Release

### Push the release git tag

```shell
# Checkout the tags that passed VOTE
git checkout ${release_version}
# Tag with the opendal version
git tag -s ${opendal_version}
# Push tags to GitHub to trigger releases
git push origin ${opendal_version}
```

### Publish artifacts to SVN RELEASE branch

```shell
svn mv https://dist.apache.org/repos/dist/dev/opendal/${release_version} https://dist.apache.org/repos/dist/release/opendal/${opendal_version} -m "Release ${opendal_version}"
```

### Release Maven artifacts

1. Open https://repository.apache.org/#stagingRepositories.
2. Find the artifact `orgapacheopendal-${maven_artifact_number}`, click the "Release" button.

It will take some time to sync the Maven artifacts to the Maven Central.

:::caution

If the vote failed, click "Drop" to drop the staging Maven artifacts.

:::

### Check the language binding artifacts

We need to check the language binding artifacts in the language package repo to make sure they are released successfully.

- Python: <https://pypi.org/project/opendal/>
- Java: <https://repository.apache.org/#nexus-search;quick~opendal>
- Node.js: <https://www.npmjs.com/package/opendal>

For Java binding, if we cannot find the latest version of artifacts in the repo,
we need to check the `orgapacheopendal-${maven_artifact_number}` artifact status in staging repo.

For non-Java bindings, if we cannot find the latest version of artifacts in the repo,
we need to check the GitHub action status.

### Create a GitHub Release

- Click [here](https://github.com/apache/opendal/releases/new) to create a new release.
- Pick the git tag of this release version from the dropdown menu.
- Make sure the branch target is `main`.
- Generate the release note by clicking the `Generate release notes` button.
- Add the release note from every component's `upgrade.md` if there are breaking changes before the content generated by GitHub. Check them carefully.
- Publish the release.

### Send the announcement

Start an announcement to [OpenDAL Discussion Announcements](https://github.com/apache/opendal/discussions/categories/announcements) and send the same content to `announce@apache.org`.

> Tips: Please follow the [Committer Email](https://infra.apache.org/committer-email.html) guide to make sure you have already set up the email SMTP. Otherwise, your email cannot be sent to the announcement mailing list.

Instead of adding breaking changes, let's include the new features as "notable changes" in the announcement.

Title:

```
[ANNOUNCE] Release Apache OpenDAL ${opendal_version}
```

Content:

```
Hi all,

The Apache OpenDAL community is pleased to announce
that Apache OpenDAL ${opendal_version} has been released!

OpenDAL is a data access layer that allows users to easily and efficiently
retrieve data from various storage services in a unified way.

The notable changes since ${opendal_version} include:

1. xxxxx
2. yyyyyy
3. zzzzzz

Please refer to the change log for the complete list of changes:
https://github.com/apache/opendal/releases/tag/v${opendal_version}

Apache OpenDAL website: https://opendal.apache.org/

Download Links: https://opendal.apache.org/download

OpenDAL Resources:
- Issue: https://github.com/apache/opendal/issues
- Mailing list: dev@opendal.apache.org

Thanks
On behalf of Apache OpenDAL community
```

Example: <https://lists.apache.org/thread/oy77n55brvk72tnlb2bjzfs9nz3cfd0s>

## Post release

After the official release out, you may perform a few post-actions.

### Remove the old releases

Remove the old releases if any. You only need the latest release there, and older releases are available through the Apache archive.

To clean up old releases, run:

```shell
# 1. Get the list of releases
svn ls https://dist.apache.org/repos/dist/release/opendal
# 2. Delete each release (except for the last one)
svn del -m "Archiving OpenDAL release X.Y.Z" https://dist.apache.org/repos/dist/release/opendal/X.Y.Z
```

---

---
url: https://opendal.apache.org/community/release/verify
---
# Verify a release candidate

To verify a release candidate, the following checklist could be used:

- [ ] Download links are valid.
- [ ] Checksums and signatures.
- [ ] LICENSE/NOTICE files exist.
- [ ] No unexpected binary files.
- [ ] All source files have ASF headers.
- [ ] Can compile from source.

:::note

It is NOT necessary to run all checks to cast a vote for a release candidate.

However, you should clearly state which checks you did. The release manager needs to ensure that each check was done.

:::

## Download links are valid

To verify the release candidate, you need to download the release candidate from the [dist](https://dist.apache.org/repos/dist/dev/opendal/) directory.

Our current distribution contains many files, which we recommend downloading using svn.

Use the following command to download all artifacts, replace "${release_version}-${rc_version}" with the version ID of the version to be released:

```shell
svn co https://dist.apache.org/repos/dist/dev/opendal/${release_version}-${rc_version}/
```

## Checksums and signatures

Every file in a release candidate should have a checksum and signature file.

For example, if the release candidate is `0.46.0-rc1`, the checksum and signature file should be like:

```
https://dist.apache.org/repos/dist/dev/opendal/0.46.0-rc1/apache-opendal-core-0.46.0-rc1-src.tar.gz.sha512
https://dist.apache.org/repos/dist/dev/opendal/0.46.0-rc1/apache-opendal-core-0.46.0-rc1-src.tar.gz.asc
```

### Verify checksums and signatures

GnuPG is recommended here. It can be installed with the following command:

```shell
apt-get install gnupg
# or
yum install gnupg
# or
brew install gnupg
```

Firstly, import the OpenDAL release manager's public key:

```shell
curl https://downloads.apache.org/opendal/KEYS > KEYS # Download KEYS
gpg --import KEYS # Import KEYS to local
```

Then, trust the public key:

```shell
gpg --edit-key <KEY-used-in-this-version> # Edit the key
```

It will enter the interactive mode, use the following command to trust the key:

```shell
gpg> trust
```

And then, select the level of trust, for example:

```
Please decide how far you trust this user to correctly verify other users' keys
(by looking at passports, checking fingerprints from different sources, etc.)

  1 = I don't know or won't say
  2 = I do NOT trust
  3 = I trust marginally
  4 = I trust fully
  5 = I trust ultimately
  m = back to the main menu
```

Select `5` to trust the key ultimately.

Now, we could start the verification.

We've provided a script to verify the checksum and signature of the release candidate.

The script is in the `scripts` directory of our repository.
You can download it directly from [here](https://raw.githubusercontent.com/apache/opendal/main/scripts/verify.py).
Please put it in the same directory as the release candidate.

Run the script in a specific release candidate's folder:

```shell
python ./verify.py
```

You will see the following output if the verification is successful:

```shell
$ python ./verify.py
> Checking apache-opendal-bin-oli-0.41.3-src.tar.gz
gpg: Signature made 五  6/ 7 20:57:06 2024 CST
gpg:                using RSA key 8B374472FAD328E17F479863B379691FC6E298DD
gpg: Good signature from "Zili Chen (CODE SIGNING KEY) <tison@apache.org>" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 8B37 4472 FAD3 28E1 7F47  9863 B379 691F C6E2 98DD
> Success to verify the gpg sign for apache-opendal-bin-oli-0.41.3-src.tar.gz
apache-opendal-bin-oli-0.41.3-src.tar.gz: OK
> Success to verify the checksum for apache-opendal-bin-oli-0.41.3-src.tar.gz
.......
> Start checking LICENSE file in /Users/yan/Downloads/opendal-dev/apache-opendal-0.47.0-src
> LICENSE file exists in /Users/yan/Downloads/opendal-dev/apache-opendal-0.47.0-src
> Start checking NOTICE file in /Users/yan/Downloads/opendal-dev/apache-opendal-0.47.0-src
> NOTICE file exists in /Users/yan/Downloads/opendal-dev/apache-opendal-0.47.0-src
cargo 1.78.0 (54d8815d0 2024-03-26)
Start building opendal core
Success to build opendal core
openjdk version "22.0.1" 2024-04-16
OpenJDK Runtime Environment Temurin-22.0.1+8 (build 22.0.1+8)
OpenJDK 64-Bit Server VM Temurin-22.0.1+8 (build 22.0.1+8, mixed mode)
Start building opendal java binding
> Success to build opendal java binding
```

## Check the file content of the source package

Unzip `apache-opendal-${release_version}-${rc_version}-src.tar.gz` and check the follows:

- LICENSE and NOTICE files are correct for the repository.
- All files have ASF license headers if necessary.
- Building is OK.

## Check the Maven artifacts of opendal-java

Download the artifacts from `https://repository.apache.org/content/repositories/orgapacheopendal-${maven_artifact_number}/`.

You can check the follows:

- Checksum of JARs matches the bundled checksum file.
- Signature of JARs matches the bundled signature file.
- JARs are reproducible locally. This means you can build the JARs on your machine and verify the checksum is the same with the bundled one.

The reproducibility requires the same JDK distribution and the same Maven distribution. You should use [Eclipse Temurin JDK 8](https://adoptium.net/temurin/releases/?version=8) and the bundled Maven Wrapper to make the same artifacts.

---

---
url: https://opendal.apache.org/community/security
---
# Security

The Apache Software Foundation takes a rigorous stance on eliminating security issues in its software projects. Likewise, Apache OpenDAL™ is also vigilant and takes security issues related to its features and functionality into the highest consideration.

If you have any concerns regarding OpenDAL's security,
or you discover a vulnerability or potential threat,
please do not hesitate to get in touch with the Apache Security Team by dropping an email at private@opendal.apache.org.

Please specify the project name as "OpenDAL" in the email, and provide a description of the relevant problem or potential threat. You are also urged to recommend how to reproduce and replicate the issue.

The Apache Security Team and the OpenDAL community will get back to you after assessing and analyzing the findings.

Please note that the security issue should be reported on the security email first, before disclosing it on any public domain.

---